//***************************************ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ********************************* 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект 			= РеквизитФормыВЗначение("Объект");  	                        
	СхемаКомпоновкиДанных 		= ОбработкаОбъект.ПолучитьМакет("СКДДиаграммаНутриентов");
	АдресСКДОтчетаПоНутриентам	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьПоказателей();
КонецПроцедуры

//****************************************КОМАНДЫ*********************************************
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры  

//***************************************ОБРАБОТЧИКИ СОБЫТИЙ*********************************
&НаКлиенте
Процедура ГиперСсылкаНутриентНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	ТекущийИндексНутриента = СписокЗначенийНайтиПоПредставлению(СписокСоответсвияПолейНутриентов, Элемент.Имя);
	Если ТекущийИндексНутриента <> Неопределено Тогда 
		ТекущийЭлементСписка = СписокСоответсвияПолейНутриентов.Получить(ТекущийИндексНутриента);
		Если ТекущийЭлементСписка <> Неопределено Тогда   				
			
			ПараметрыФормы = Новый Структура("Отбор, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов",
										        Новый Структура("Нутриент", ТекущийЭлементСписка.Значение), 			
												"Контекст",			 
												Истина,
												Ложь);
	
			ОткрытьФорму("Отчет.СодержаниеНутриентовВПродуктах.Форма", ПараметрыФормы);

			
		КонецЕсли;  				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагарммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	ПараметрыФормы = Новый Структура("Отбор, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов",
										Новый Структура("Нутриент", Расшифровка), 			
										"Контекст",			 
										Истина,
										Ложь);
	
	ОткрытьФорму("Отчет.СодержаниеНутриентовВПродуктах.Форма", ПараметрыФормы); 	
	
КонецПроцедуры   

&НаКлиенте
Процедура ТД_СКДОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь; 
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКДОтчетаПоНутриентам);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия, ДоступныеДействия);
	
	Если ПараметрВыполненногоДействия <> Неопределено Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ПараметрыФормы = Новый Структура("Отбор, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов",
												Новый Структура("Нутриент", ПараметрВыполненногоДействия), 			
												"Контекст",			 
												Истина,
												Ложь);
			
			ОткрытьФорму("Отчет.СодержаниеНутриентовВПродуктах.Форма", ПараметрыФормы);
			
		КонецЕсли;        
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПриИзменении(Элемент)
	ПродуктыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РационПриИзменении(Элемент)
	РационПриИзмененииНаСервере();
	УстановитьВидимостьПоказателей();
	ЗаполнитьКалендарьПитация();
КонецПроцедуры

&НаКлиенте
Процедура НормаПриИзменении(Элемент)
	НормаПриИзмененииНаСервере();
	УстановитьВидимостьПоказателей();
КонецПроцедуры 

&НаКлиенте
Процедура ПродуктыПродуктПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыСтрокиПродукы(ТекущаяСтрока);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.ПриемыПищи.ТекущаяСтрока = Неопределено;   
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыЕдИзмПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЕдИзм) Тогда
			ТекущаяСтрока.Коэффициент = ПолучитьКоэффициентПересчетаВГраммы(ТекущаяСтрока.ЕдИзм);	
		КонецЕсли;   		
		ПересчитатьВсегоВСтроке(ТекущаяСтрока);			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПересчитатьВсегоВСтроке(ТекущаяСтрока);			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсегоВСтроке(ТекущаяСтрока)
	
	ТекущаяСтрока.Всего = ?(ЗначениеЗаполнено(ТекущаяСтрока.ЕдИзм), ТекущаяСтрока.Коэффициент * ТекущаяСтрока.Количество, 
									ТекущаяСтрока.Количество);		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаВГраммы(ЕдИзм)
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЕдИзм, "Коэффициент");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПользовательскиеЕдиницыИзмерения(ПродуктПитания, ЕдиницаПоУмолч, Коэффициент)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ПродуктПитания) Тогда  		
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользовательскиеЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	ПользовательскиеЕдиницыИзмерения.Коэффициент
		|ИЗ
		|	Справочник.ПользовательскиеЕдиницыИзмерения КАК ПользовательскиеЕдиницыИзмерения
		|ГДЕ
		|	ПользовательскиеЕдиницыИзмерения.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", ПродуктПитания);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Результат = НЕ РезультатЗапроса.Пустой();
		
		Если Результат Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ЕдиницаПоУмолч = Выборка.Ссылка;
				Коэффициент    = Выборка.Коэффициент;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьДополнительныеРеквизитыСтрокиПродукы(ТекущаяСтрока)
	
	ЕдиницаПоУмолч 	= Неопределено;
	Коэффициент 	= 1;
	
	ТекущаяСтрока.ЕстьПользовательскиеЕдИзм = ЕстьПользовательскиеЕдиницыИзмерения(ТекущаяСтрока.Продукт, ЕдиницаПоУмолч, Коэффициент);	
	ТекущаяСтрока.ЕдИзм 					= ЕдиницаПоУмолч;
	ТекущаяСтрока.Коэффициент 				= Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если СписокДнейСТекущимРационом.Количество() > 0 Тогда  		
		
		КоллекцияДат = ОформлениеПериода.Даты;
		Для каждого Ит Из СписокДнейСТекущимРационом Цикл
			
			ТекущаяДата = Ит.Значение;
			Если ТекущаяДата >= ОформлениеПериода.НачалоПериода И ТекущаяДата <= ОформлениеПериода.КонецПериода Тогда
				
				ОформлениеДаты 						= КоллекцияДат.Получить(ТекущаяДата);
				ОформлениеДаты.Значение.ЦветФона 	= WebЦвета.ЖелтоЗеленый;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПероидПриИзменении(Элемент)  
	
	ЗаполнитьКалендарьПитация(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньНеделиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Пероид) Тогда 	 
	
		СписокДнейСТекущимРационом.Очистить();
		
		СтруктураДнейНедели = Новый Структура;
		СтруктураДнейНедели.Вставить("Понедельник", 1);
		СтруктураДнейНедели.Вставить("Вторник", 2);
		СтруктураДнейНедели.Вставить("Среда", 3);
		СтруктураДнейНедели.Вставить("Четверг", 4);
		СтруктураДнейНедели.Вставить("Пятница", 5);
		СтруктураДнейНедели.Вставить("Суббота", 6);
		СтруктураДнейНедели.Вставить("Воскресенье", 7);
			
		ТекДата = Пероид.ДатаНачала;
		Пока ТекДата <= Пероид.ДатаОкончания Цикл
			
			Для каждого Ит Из СтруктураДнейНедели Цикл
				
				Если ЭтаФорма[Ит.Ключ] И ДеньНедели(ТекДата) = Ит.Значение Тогда
					СписокДнейСТекущимРационом.Добавить(ТекДата);		
				КонецЕсли; 
				
			КонецЦикла;  
			
			ТекДата = ТекДата + 86400;
			
		КонецЦикла; 
		
		Элементы.КалендарьРациона.Обновить();
	
	КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Процедура КалендарьРационаВыбор(Элемент, ВыбраннаяДата)
	
	ЭлементСписка = СписокДнейСТекущимРационом.НайтиПоЗначению(ВыбраннаяДата);
	Если ЭлементСписка <> Неопределено Тогда
		СписокДнейСТекущимРационом.Удалить(ЭлементСписка);
	Иначе
		СписокДнейСТекущимРационом.Добавить(ВыбраннаяДата);	
	КонецЕсли;
	
	Элементы.КалендарьРациона.Обновить();
	
КонецПроцедуры


//************************************************СЛУЖЕБНОЕ*******************************************
&НаКлиенте
Процедура ЗаполнитьКалендарьПитация()
	
	Если ЗначениеЗаполнено(Пероид.ДатаНачала) И ЗначениеЗаполнено(Пероид.ДатаОкончания) Тогда
		
		Элементы.КалендарьРациона.НачалоПериодаОтображения = Пероид.ДатаНачала;
		Элементы.КалендарьРациона.КонецПериодаОтображения  = Пероид.ДатаОкончания;
		
		СписокДнейСТекущимРационом.ЗагрузитьЗначения(ПолучитьСписокДнейСТекущимРационом(Объект.Рацион));
		
		Элементы.КалендарьРациона.Обновить();
		
	КонецЕсли; 		
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьДанныеПоРациону()
	
	Если Объект.Рацион.Пустая() Тогда
		Возврат;	
	КонецЕсли;  		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставРациона.ПриемПищи,
		|	СоставРациона.Продукт,
		|	СоставРациона.ЕдИзм,
		|	СоставРациона.КоличествоЕдИзм КАК Количество,
		|	СоставРациона.Количество КАК Всего,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеПользовательскихЕдИзм.Количество, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПользовательскиеЕдИзм
		|ИЗ
		|	РегистрСведений.СоставРациона КАК СоставРациона
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПользовательскиеЕдиницыИзмерения.Владелец КАК Продукт,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользовательскиеЕдиницыИзмерения.Ссылка) КАК Количество
		|		ИЗ
		|			Справочник.ПользовательскиеЕдиницыИзмерения КАК ПользовательскиеЕдиницыИзмерения
		|		ГДЕ
		|			ПользовательскиеЕдиницыИзмерения.Владелец В
		|					(ВЫБРАТЬ
		|						СоставРациона.Продукт
		|					ИЗ
		|						РегистрСведений.СоставРациона КАК СоставРациона
		|					ГДЕ
		|						СоставРациона.Рацион = &Рацион)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПользовательскиеЕдиницыИзмерения.Владелец) КАК ДанныеПользовательскихЕдИзм
		|		ПО СоставРациона.Продукт = ДанныеПользовательскихЕдИзм.Продукт
		|ГДЕ
		|	СоставРациона.Рацион = &Рацион";
	
	Запрос.УстановитьПараметр("Рацион", Объект.Рацион); 	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаПродуктовРациона 	= РезультатЗапроса.Выгрузить();	   
		Объект.Продукты.Загрузить(ТаблицаПродуктовРациона);
		
	КонецЕсли;  	 	
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьДанныеЗаполнения(МВТ = Неопределено)
	
	МассивНутриентов 		= Новый Массив;
	МассивТиповНутриентов 	= Новый Массив;
	Результат		 		= Новый Структура;  	 
	
	//общие показатели
	МассивНутриентов.Добавить(Справочники.Нутриенты.ПищевыеВолокна);
	МассивНутриентов.Добавить(Справочники.Нутриенты.Вода);
	МассивНутриентов.Добавить(Справочники.Нутриенты.Белки);
	МассивНутриентов.Добавить(Справочники.Нутриенты.Жиры);
	МассивНутриентов.Добавить(Справочники.Нутриенты.Углеводы);
	МассивНутриентов.Добавить(Справочники.Нутриенты.Калорийность);
	
	//не создавать реквизиты формы (отображение не строкой прогресса)
	МассивТиповНутриентов.Добавить(Перечисления.ТипыНутриентов.Аминокислоты);
	МассивТиповНутриентов.Добавить(Перечисления.ТипыНутриентов.Витамины);
	МассивТиповНутриентов.Добавить(Перечисления.ТипыНутриентов.Минералы);
	
	МассивТиповНутриентов.Добавить(Перечисления.ТипыНутриентов.Углеводы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХимическийСоставПродуктов.Нутриент,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ХимическийСоставПродуктов.Количество, 0) <> 0
		|				ТОГДА ЕСТЬNULL(ХимическийСоставПродуктов.Количество, 0) * Вт_ПродуктыИзРациона.Количество / ВЫБОР
		|						КОГДА ХимическийСоставПродуктов.Нутриент.Коэффициент = 0
		|							ТОГДА 100
		|						ИНАЧЕ ХимическийСоставПродуктов.Нутриент.Коэффициент
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Факт
		|ПОМЕСТИТЬ Вт_ФактДанные
		|ИЗ
		|	Вт_ПродуктыИзРациона КАК Вт_ПродуктыИзРациона
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХимическийСоставПродуктов КАК ХимическийСоставПродуктов
		|		ПО Вт_ПродуктыИзРациона.Продукт = ХимическийСоставПродуктов.Продукт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХимическийСоставПродуктов.Нутриент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НормыПитания.Нутриент,
		|	НормыПитания.Количество КАК Норма
		|ПОМЕСТИТЬ Вт_НормДанные
		|ИЗ
		|	РегистрСведений.НормыПитания КАК НормыПитания
		|ГДЕ
		|	НормыПитания.Норма = &Норма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_НормДанные.Нутриент,
		|	Вт_НормДанные.Нутриент.Тип КАК Тип,
		|	Вт_НормДанные.Норма,
		|	ЕСТЬNULL(Вт_ФактДанные.Факт, 0) КАК Факт
		|ПОМЕСТИТЬ Вт_ТаблицаПоказателей
		|ИЗ
		|	Вт_НормДанные КАК Вт_НормДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ФактДанные КАК Вт_ФактДанные
		|		ПО Вт_НормДанные.Нутриент = Вт_ФактДанные.Нутриент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Вт_ТаблицаПоказателей.Нутриент) КАК Представление,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Тип,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	НЕ Вт_ТаблицаПоказателей.Нутриент В (&Нутриенты)
		|	И НЕ Вт_ТаблицаПоказателей.Тип В (&МассивТиповНутриентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_ТаблицаПоказателей.Нутриент.ИмяПредопределенныхДанных КАК ИмяРеквизита,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	Вт_ТаблицаПоказателей.Нутриент В(&Нутриенты) 		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Вт_ТаблицаПоказателей.Нутриент) КАК Представление,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	Вт_ТаблицаПоказателей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНутриентов.Аминокислоты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Вт_ТаблицаПоказателей.Нутриент) КАК Представление,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	Вт_ТаблицаПоказателей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНутриентов.Жиры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Вт_ТаблицаПоказателей.Нутриент) КАК Представление,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	Вт_ТаблицаПоказателей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНутриентов.Минералы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Вт_ТаблицаПоказателей.Нутриент) КАК Представление,
		|	Вт_ТаблицаПоказателей.Нутриент,
		|	Вт_ТаблицаПоказателей.Норма,
		|	Вт_ТаблицаПоказателей.Факт,
		|	ВЫБОР
		|		КОГДА Вт_ТаблицаПоказателей.Норма <> 0
		|			ТОГДА Вт_ТаблицаПоказателей.Факт * 100 / Вт_ТаблицаПоказателей.Норма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отношение
		|ИЗ
		|	Вт_ТаблицаПоказателей КАК Вт_ТаблицаПоказателей
		|ГДЕ
		|	Вт_ТаблицаПоказателей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНутриентов.Витамины)"; 		
		
	Запрос.УстановитьПараметр("Норма", Объект.Норма);     
	Запрос.УстановитьПараметр("Нутриенты", МассивНутриентов);
	Запрос.УстановитьПараметр("МассивТиповНутриентов", МассивТиповНутриентов);

	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	Результат.Вставить("ТаблицаПоказателей", РезультатЗапроса[3].Выгрузить());
	Результат.Вставить("ОбщиеПоказатели", РезультатЗапроса[4].Выбрать());
	Результат.Вставить("ВыборкаАминокислоты", РезультатЗапроса[5].Выбрать());
	Результат.Вставить("ВыборкаЖиры", РезультатЗапроса[6].Выбрать());
	Результат.Вставить("ВыборкаМинералы", РезультатЗапроса[7].Выбрать());
	Результат.Вставить("ВыборкаВитамины", РезультатЗапроса[8].Выбрать());
	
	Возврат Результат; 		
	
КонецФункции

&НаСервере
Процедура ОтобразитьПоказателиНутриентов(ДанныеЗаполнения, ПересозданиеИнтерфейса = Истина)
	
	ВыборкаАминокислот  = ДанныеЗаполнения.ВыборкаАминокислоты;
	ТаблицаВитамины 	= ДанныеЗаполнения.ВыборкаВитамины;
	ВыборкаЖиры 		= ДанныеЗаполнения.ВыборкаЖиры;
	ВыборкаМинералы 	= ДанныеЗаполнения.ВыборкаМинералы;
	
	Если ПересозданиеИнтерфейса Тогда  	
	 
		//удаление элементов и реквизитов формы по таблице показателей 
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		Для каждого СтрокаПоказателя Из Объект.ТаблицаПоказателей Цикл 			
			
			Заголовок 		= СтрокаПоказателя.Представление; 
			ИмяРеквизита 	= СтрЗаменить(ТРег(Заголовок), " ", "");
			
			МассивДобавляемыхРеквизитов.Добавить(ИмяРеквизита + "Индикатор");
			МассивДобавляемыхРеквизитов.Добавить(ИмяРеквизита + "Норма");
			МассивДобавляемыхРеквизитов.Добавить(ИмяРеквизита + "Факт");
			МассивДобавляемыхРеквизитов.Добавить(ИмяРеквизита + "Показатель");
			
		КонецЦикла; 
		
		ИзменитьРеквизиты(, МассивДобавляемыхРеквизитов); 		
		
		//Пока Элементы.ГруппаАминокислоты.ПодчиненныеЭлементы.Количество() > 0 Цикл
		//	Элементы.Удалить(Элементы.ГруппаАминокислоты.ПодчиненныеЭлементы[0]);				
		//КонецЦикла;
		//
		//Пока Элементы.ГруппаВитамины.ПодчиненныеЭлементы.Количество() > 0 Цикл
		//	Элементы.Удалить(Элементы.ГруппаВитамины.ПодчиненныеЭлементы[0]);				
		//КонецЦикла;		
		
		//Пока Элементы.ГруппаМинералы.ПодчиненныеЭлементы.Количество() > 0 Цикл
		//	Элементы.Удалить(Элементы.ГруппаМинералы.ПодчиненныеЭлементы[0]);				
		//КонецЦикла; 		
		
		Пока Элементы.ГруппаЖиры.ПодчиненныеЭлементы.Количество() > 0 Цикл
			Элементы.Удалить(Элементы.ГруппаЖиры.ПодчиненныеЭлементы[0]);				
		КонецЦикла; 
		
		СписокСоответсвияПолейНутриентов.Очистить();
	
	КонецЕсли;  	 	
		
	//ИмяГруппы	= "ГруппаАминокислоты"; 	
	//Пока ВыборкаАминокислоты.Следующий() Цикл		
	//	ДобавитьПоказателиНутриентовНаФорму(ВыборкаАминокислоты, ИмяГруппы, ПересозданиеИнтерфейса);		
	//КонецЦикла; 
	
	СформироватьДиаграммуНутриентов(ВыборкаАминокислот, "Диагармма" + "Аминокислоты", "ГруппаАминокислоты"); 
	
	//ИмяГруппы	= "ГруппаВитамины"; 	
	//Пока ВыборкаВитамины.Следующий() Цикл		
	//	ДобавитьПоказателиНутриентовНаФорму(ВыборкаВитамины, ИмяГруппы, ПересозданиеИнтерфейса);		
	//КонецЦикла;
	
	СформироватьОтчетПоНутриентам(ТаблицаВитамины, "ТД_" + "Витамины", "ГруппаВитамины");
	
	//ИмяГруппы	= "ГруппаМинералы"; 	
	//Пока ВыборкаМинералы.Следующий() Цикл		
	//	ДобавитьПоказателиНутриентовНаФорму(ВыборкаМинералы, ИмяГруппы, ПересозданиеИнтерфейса);		
	//КонецЦикла;
	
	СформироватьДиаграммуНутриентов(ВыборкаМинералы, "Диагармма" + "Минералы", "ГруппаМинералы");
	
	ИмяГруппы	= "ГруппаЖиры"; 	
	Пока ВыборкаЖиры.Следующий() Цикл		
		ДобавитьПоказателиНутриентовНаФорму(ВыборкаЖиры, ИмяГруппы, ПересозданиеИнтерфейса);		
	КонецЦикла; 		  	 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиНутриентовНаФорму(Выборка, ИмяГруппы, ПересозданиеИнтерфейса)
	
	Родитель 			= Элементы[ИмяГруппы];
	Заголовок			= Выборка.Представление;
	ИмяРеквизита 		= СтрЗаменить(ТРег(Заголовок), " ", "");
	КЧ 					= Новый КвалификаторыЧисла(15, 8);	
	
	Если ПересозданиеИнтерфейса Тогда 		
	 
		//создание реквизитов и элементов формы
		МассивДобавляемыхРеквизитов = Новый Массив;  		
	
		//РеквизитИндикатор 
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Индикатор", Новый ОписаниеТипов("Число", КЧ),, Заголовок));
		//РеквизитНорма 		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Норма", Новый ОписаниеТипов("Число", КЧ)));
		//РеквизитФакт 		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Факт", Новый ОписаниеТипов("Число", КЧ)));
		//Показатель
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Показатель", Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		Группа 							= Элементы.Вставить(ИмяГруппы + ИмяРеквизита, Тип("ГруппаФормы"), Родитель);
		Группа.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение 				= ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок 		= Ложь;
		Группа.Группировка          	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;  				
		
		Индикатор 						= Элементы.Вставить(ИмяГруппы + ИмяРеквизита + "Индикатор", Тип("ПолеФормы"), Группа);
		Индикатор.Вид					= ВидПоляФормы.ПолеИндикатора; 		 	
		Индикатор.ПутьКДанным			= ИмяРеквизита + "Индикатор";
		
		Показатель 						= Элементы.Вставить(ИмяГруппы + ИмяРеквизита + "Показатель", Тип("ПолеФормы"), Группа);
		Показатель.Вид					= ВидПоляФормы.ПолеНадписи; 
		Показатель.ПутьКДанным			= ИмяРеквизита + "Показатель";
		Показатель.Гиперссылка			= Истина;
		Показатель.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Показатель.УстановитьДействие("Нажатие", "ГиперСсылкаНутриентНажатие");
		
		СписокСоответсвияПолейНутриентов.Добавить(Выборка.Нутриент, ИмяГруппы + ИмяРеквизита + "Показатель");
	
	КонецЕсли;
	
	ЭтаФорма[ИмяРеквизита + "Индикатор"]  		= Выборка.Отношение;
	ЭтаФорма[ИмяРеквизита + "Норма"]  			= Выборка.Норма;
	ЭтаФорма[ИмяРеквизита + "Факт"]  	  		= Выборка.Факт;
	ЭтаФорма[ИмяРеквизита + "Показатель"] 		= Формат(Выборка.Отношение, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0") + "%";	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДиаграммуНутриентов(ВыборкаНутриентов, ИмяРеквизитаДиаграммы, ИмяГруппы)
	
	ЕстьДанные = ВыборкаНутриентов.Количество() > 0;
	
	Если ЕстьДанные Тогда
		
		ДГН = ЭтаФорма[ИмяРеквизитаДиаграммы];
		
		ДГН.Очистить();  	
		ДГН.Обновление = Ложь;  
		
		Пока ВыборкаНутриентов.Следующий() Цикл
			
			Точка 				= ДГН.УстановитьТочку(ВыборкаНутриентов.Нутриент);  		
			Серия 				= ДГН.УстановитьСерию("Факт");		
			ДГН.УстановитьЗначение(Точка, Серия, ВыборкаНутриентов.Факт, ВыборкаНутриентов.Нутриент); 		
			
			Точка 				= ДГН.УстановитьТочку(ВыборкаНутриентов.Нутриент);  		
			Серия 				= ДГН.УстановитьСерию("Норма");		
			ДГН.УстановитьЗначение(Точка, Серия, ВыборкаНутриентов.Норма, ВыборкаНутриентов.Нутриент); 
			
		КонецЦикла; 
		
		ДГН.Обновление = Истина;
		
	КонецЕсли;	
	
	Элементы[ИмяГруппы].Видимость = ЕстьДанные;
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьОтчетПоНутриентам(ТаблицаНутриентов, ИмяРеквизатаТД, ИмяГруппы)
	
	ЕстьДанные = ТаблицаНутриентов.Количество() > 0;
	
	Если ЕстьДанные Тогда
		
		ТД = ЭтаФорма[ИмяРеквизатаТД];
		ТД.Очистить();	
		
		НаборДанных = Новый Структура;
		НаборДанных.Вставить("ТаблицаНутриентов", ТаблицаНутриентов);
		
		// выводим результат		  	                        
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКДОтчетаПоНутриентам);
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;  	
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 	
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, НаборДанных, ДанныеРасшифровки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТД);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
		
		АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
		
	КонецЕсли;  
	
	Элементы[ИмяГруппы].Видимость = ЕстьДанные;
	
КонецПроцедуры     

&НаСервере
Процедура ПолучитьСхемуКомпоновки(Имя) 	
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект"); 
	СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("СКД" + Имя);
	//УдалитьИзВременногоХранилища(	
	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);  	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьОбщиеПоказатели(ДанныеЗаполнения)
	
	ОбщиеПоказатели = ДанныеЗаполнения.ОбщиеПоказатели;
	Пока ОбщиеПоказатели.Следующий() Цикл
		
		ЭтаФорма[ОбщиеПоказатели.ИмяРеквизита] = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(Формат(ОбщиеПоказатели.Факт, "ЧЦ=15; ЧДЦ=2; ЧГ=0"), Новый Шрифт(,,, Истина), WebЦвета.Красный), "/",  
		Новый ФорматированнаяСтрока(Формат(ОбщиеПоказатели.Норма, "ЧЦ=15; ЧДЦ=2; ЧГ=0"), Новый Шрифт(,,, Истина), Новый Цвет(254, 225, 1)), " - ", 
		Новый ФорматированнаяСтрока(Формат(ОбщиеПоказатели.Отношение, "ЧЦ=15; ЧДЦ=2; ЧГ=0") + "%", Новый Шрифт(,,, Истина), WebЦвета.ГрифельноСерый));		
		
		СписокСоответсвияПолейНутриентов.Добавить(ОбщиеПоказатели.Нутриент, Элементы[ОбщиеПоказатели.ИмяРеквизита].Имя);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТаблицуПоказателей(ДополнительныеСвойства)
	
	ТаблицаПоказателей = ДополнительныеСвойства.ТаблицаПоказателей;
	
	Если НЕ ЗначениеЗаполнено(Объект.Норма) Тогда
		Возврат ;	
	КонецЕсли; 
	
	Объект.ТаблицаПоказателей.Загрузить(ТаблицаПоказателей);
	
КонецПроцедуры  

&НаСервере
Функция ПодготовитьВременнуюТаблицуПродуктовРациона(ДанныеИзРациона)

	Результат = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Результат; 
	
	Если ДанныеИзРациона Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СоставРациона.Продукт КАК Продукт,
		               |	СУММА(СоставРациона.Количество) КАК Количество
		               |ПОМЕСТИТЬ Вт_ПродуктыИзРациона
		               |ИЗ
		               |	РегистрСведений.СоставРациона КАК СоставРациона
		               |ГДЕ
		               |	СоставРациона.Рацион = &Рацион
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СоставРациона.Продукт";
					   
		Запрос.УстановитьПараметр("Рацион", Объект.Рацион);
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПродуктыИзРациона.Продукт КАК Продукт,
		               |	ПродуктыИзРациона.Всего КАК Количество
		               |ПОМЕСТИТЬ Вт_Данные
		               |ИЗ
		               |	&ТаблицаПродуктовИзРациона КАК ПродуктыИзРациона
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_ПродуктыИзРациона.Продукт,
		               |	СУММА(Вт_ПродуктыИзРациона.Количество) КАК Количество
		               |ПОМЕСТИТЬ Вт_ПродуктыИзРациона
		               |ИЗ
		               |	Вт_Данные КАК Вт_ПродуктыИзРациона
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Вт_ПродуктыИзРациона.Продукт";
		
		Запрос.УстановитьПараметр("ТаблицаПродуктовИзРациона", Объект.Продукты.Выгрузить());
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

//*********************************************************************************************************************
&НаСервереБезКонтекста
Функция ПолучитьСписокДнейСТекущимРационом(Рацион)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Рацион) Тогда		
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РационыПоШкалеВремени.Дата КАК Период
			|ИЗ
			|	РегистрСведений.РационыПоШкалеВремени КАК РационыПоШкалеВремени
			|ГДЕ
			|	РационыПоШкалеВремени.Пользователь = &Пользователь
			|	И РационыПоШкалеВремени.Рацион = &Рацион";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("Рацион", Рацион);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Период");		 			
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции   

&НаСервере
Процедура РационПриИзмененииНаСервере()	
	
	ЗаполнитьДанныеПоРациону();
	
	МВТ = ПодготовитьВременнуюТаблицуПродуктовРациона(Истина); 	
	ДанныеЗаполнения = ПолучитьДанныеЗаполнения(МВТ); 	 
	 	
	ОтобразитьПоказателиНутриентов(ДанныеЗаполнения);
	ЗаполнитьОбщиеПоказатели(ДанныеЗаполнения);
	ЗаполнитьТаблицуПоказателей(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура НормаПриИзмененииНаСервере()
	
	МВТ = ПодготовитьВременнуюТаблицуПродуктовРациона(Ложь);
	ДанныеЗаполнения = ПолучитьДанныеЗаполнения(МВТ); 	 	
	
	ОтобразитьПоказателиНутриентов(ДанныеЗаполнения);
	ЗаполнитьОбщиеПоказатели(ДанныеЗаполнения);	
	ЗаполнитьТаблицуПоказателей(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Если Объект.Продукты.Количество() > 0 Тогда
		
		Если ПроверитьЗаполнение() Тогда 			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
							"ВЫБРАТЬ
							|	Продукты.ПриемПищи,
							|	Продукты.Продукт,
							|	Продукты.Всего,
							|	&Рацион КАК Рацион,
							|	Продукты.ЕдИзм,
							|	Продукты.Количество
							|ПОМЕСТИТЬ Вт_Продукты
							|ИЗ
							|	&Продукты КАК Продукты
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ТаблицаПродуктов.ПриемПищи,
							|	ТаблицаПродуктов.Продукт,
							|	СУММА(ТаблицаПродуктов.Всего) КАК Количество,
							|	&Рацион КАК Рацион,
							|	ТаблицаПродуктов.ЕдИзм,
							|	СУММА(ТаблицаПродуктов.Количество) КАК КоличествоЕдИзм
							|ИЗ
							|	Вт_Продукты КАК ТаблицаПродуктов
							|
							|СГРУППИРОВАТЬ ПО
							|	ТаблицаПродуктов.ПриемПищи,
							|	ТаблицаПродуктов.Продукт,
							|	ТаблицаПродуктов.ЕдИзм";
			
			Запрос.УстановитьПараметр("Рацион", Объект.Рацион);	
			Запрос.УстановитьПараметр("Продукты", Объект.Продукты.Выгрузить());
			
			ТаблицаПродуктов = Запрос.Выполнить().Выгрузить();   	 	
			
			НаборЗаписей = РегистрыСведений.СоставРациона.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Рацион.Установить(Объект.Рацион);
			НаборЗаписей.Загрузить(ТаблицаПродуктов);
			НаборЗаписей.Записать(); 	
			
			Если СписокДнейСТекущимРационом.Количество() > 0 Тогда 				
				
				НачатьТранзакцию();
				
				ТекущийПользователь = Пользователи.ТекущийПользователь();				
				
				//удаляю записи за выбранный период
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	РационыПоШкалеВремени.Дата,
					|	РационыПоШкалеВремени.Пользователь
					|ИЗ
					|	РегистрСведений.РационыПоШкалеВремени КАК РационыПоШкалеВремени
					|ГДЕ
					|	РационыПоШкалеВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
					|	И РационыПоШкалеВремени.Пользователь = &Пользователь
					|	И РационыПоШкалеВремени.Рацион = &Рацион";
				
				Запрос.УстановитьПараметр("ДатаНачала", Пероид.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаОкончания", Пероид.ДатаОкончания); 
				Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
				Запрос.УстановитьПараметр("Рацион", Объект.Рацион);
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					УстаревшиеЗаписи = РегистрыСведений.РационыПоШкалеВремени.СоздатьНаборЗаписей();
					УстаревшиеЗаписи.Отбор.Дата.Установить(ВыборкаДетальныеЗаписи.Дата);
					УстаревшиеЗаписи.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);	
					УстаревшиеЗаписи.Записать();
					
				КонецЦикла; 
				
				//новые записи
				
				Для каждого Ит Из СписокДнейСТекущимРационом Цикл
					Запись 				= РегистрыСведений.РационыПоШкалеВремени.СоздатьМенеджерЗаписи();
					Запись.Пользователь = ТекущийПользователь;
					Запись.Дата 		= Ит.Значение;
					Запись.Рацион 		= Объект.Рацион;
					Запись.Записать();
				КонецЦикла;  				
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли; 
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнены обязательные поля";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ПродуктыПриИзмененииНаСервере()
	
	МВТ = ПодготовитьВременнуюТаблицуПродуктовРациона(Ложь);
	ДанныеЗаполнения = ПолучитьДанныеЗаполнения(МВТ); 	 	
	
	ОтобразитьПоказателиНутриентов(ДанныеЗаполнения, Ложь);
	ЗаполнитьОбщиеПоказатели(ДанныеЗаполнения);	 	 	
	
КонецПроцедуры  

&НаКлиенте
Функция СписокЗначенийНайтиПоПредставлению(СЗ, Представление, ЗначениеПоУмолч = Неопределено)
	
	Результат = Новый Массив;
		
	Для каждого Ит Из СЗ Цикл
		Если Ит.Представление = Представление Тогда   			
			Результат.Добавить(СЗ.Индекс(Ит));
		КонецЕсли; 	
	КонецЦикла; 
	
	Количество = Результат.Количество();
	
	Если Количество = 0 Тогда 		
		Возврат ЗначениеПоУмолч;
	ИначеЕсли Количество = 1 Тогда
		Возврат Результат[0];	
	Иначе
		Возврат Результат;	
	КонецЕсли; 
	
КонецФункции   

&НаКлиенте
Процедура УстановитьВидимостьПоказателей()
	
	 Элементы.Страницы.Видимость = ЗначениеЗаполнено(Объект.Норма) И ЗначениеЗаполнено(Объект.Рацион);  	 
	
КонецПроцедуры







 

 
 