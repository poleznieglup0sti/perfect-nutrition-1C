// Флаг подтверждения, используется при не модальном закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

#Область ОбработчикиСобытийФормы
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьЦветаИУсловноеОформление();
		
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьОсновныеПараметры();
	
	ИнициализироватьКомпоновщикОтбораИПравила();
	// Схема должна быть переформирована всегда, настройки компоновщика -  в разрезе ОбластьПоискаДублей. 
	
	// Постоянный интерфейс
	ОтображениеСостояния = Элементы.ПоискНеВыполнялся.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей не выполнялся. 
	                                        |Задайте условия отбора и сравнения и нажмите ""Найти дубли"".'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеПоиска.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеУдаления.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Удаление дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ДублейНеНайдено.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Не обнаружено дублей по указанным параметрам.
	                                        |Измените условия отбора и сравнения, нажмите ""Найти дубли""'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	// Пошаговый мастер
	ИнициализироватьМастера(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы
	ИнициализироватьСценарийМастера();
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Контролируем корректность установок
	ОбновитьУстановкиОбластиДублей(ОбластьПоискаДублей);
	
	// Указываем стартовую страницу
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагПоискНеВыполнялся);
	ЗапуститьРаботуМастера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Проверяем клиентскую переменную
	Если ПодтверждениеЗакрытияФормы<>Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Закрыть поиск и замену дублей?'");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыИсточника = Сред(ИсточникВыбора.ИмяФормы, СтрДлина(БазовоеИмяФормы) + 1);
	Если ИмяФормыИсточника = "ПравилаОтбора" Тогда
		ОбновитьКомпоновщикОтбора(ВыбранноеЗначение);
		ОбновитьОписаниеОтбора();
		
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		
	ИначеЕсли ИмяФормыИсточника = "ОбластьПоискаДублей" Тогда
		ОбновитьУстановкиОбластиДублей(ВыбранноеЗначение);
		
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		
	ИначеЕсли ИмяФормыИсточника = "ПравилаПоиска" Тогда
		ОбновитьПравилаПоиска(ВыбранноеЗначение);
		ОбновитьОписаниеПравилПоиска();
		
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Убеждаемся, что область дублей корректная по списку
	КлючНастройки = "ОбластьПоискаДублей";
	Если ОбластиПоискаДублей.НайтиПоЗначению( Настройки[КлючНастройки] ) = Неопределено Тогда
		Настройки.Удалить(КлючНастройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПредставлениеОбластиПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	
	ОткрытьФорму(БазовоеИмяФормы + "ОбластьПоискаДублей", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОбластиПоискаДублейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНеобработанныхНажатие(Элемент)
	
	ПараметрыОтчета = ПараметрыОтчетаМестИспользования(НеобработанныеДубли);
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНажатие(Элемент)
	
	ПараметрыОтчета = ПараметрыОтчетаМестИспользования(НайденныеДубли);
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновки",            АдресСхемыКомпоновки);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновщикаОтбора", АдресНастроекКомпоновщикаОтбора());
	ПараметрыФормы.Вставить("ИдентификаторОсновнойФормы",      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора",
		Элементы.ПредставлениеОбластиПоискаДублей.СписокВыбора[0].Представление);
	
	ОткрытьФорму(БазовоеИмяФормы + "ПравилаОтбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПоискаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПоискаДублей",        ОбластьПоискаДублей);
	ПараметрыФормы.Вставить("ОписаниеПрикладныхПравил",   ОписаниеПрикладныхПравил);
	ПараметрыФормы.Вставить("АдресНастроек",              АдресНастроекПравилПоиска() );
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора", 
		Элементы.ПредставлениеОбластиПоискаДублей.СписокВыбора[0].Представление);
		
	ОткрытьФорму(БазовоеИмяФормы + "ПравилаПоиска", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыНайденныеДубли
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НайденныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиДублей()
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМестаИспользованияКандидата( ДанныеСтроки.ПолучитьИдентификатор() );
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияКандидата(Знач СтрокаДанных)
	ДанныеСтроки = НайденныеДубли.НайтиПоИдентификатору(СтрокаДанных);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияКандидата.Очистить();
		
		НаименованиеОригинала = Неопределено;
		Для Каждого Кандидат Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			Если Кандидат.Основной Тогда
				НаименованиеОригинала = Кандидат.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = ФорматСтроки(
			НСтр("ru = 'Для элемента ""%1"" найдены дубли (%2)'"),
			НаименованиеОригинала, ДанныеСтроки.Количество
		);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
		Возврат;
	КонецЕсли;
	
	// Перечень мест использования
	ТаблицаИспользования = ПолучитьИзВременногоХранилища(АдресМестИспользования);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	МестаИспользованияКандидата.Загрузить(
		ТаблицаИспользования.Скопировать( ТаблицаИспользования.НайтиСтроки(Фильтр) )
	);
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = ФорматСтроки(НСтр("ru = 'Элемент ""%1"" не используется'"), 
			ДанныеСтроки.Наименование
		);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = ФорматСтроки(НСтр("ru = 'Места использования ""%1"" (%2)'"), 
			ДанныеСтроки.Наименование, ДанныеСтроки.Количество
		);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.МестаИспользования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиПометкаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНеобработанныеДубли
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НеобработанныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей()
	
	ДанныеСтроки = Элементы.НеобработанныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМестаИспользованияНеобработанныхДубли( ДанныеСтроки.ПолучитьИдентификатор() );
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияНеобработанныхДубли(Знач СтрокаДанных)
	ДанныеСтроки = НеобработанныеДубли.НайтиПоИдентификатору(СтрокаДанных);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияНеобработанных.Очистить();
		
		НаименованиеОригинала = Неопределено;
		Для Каждого Кандидат Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			Если Кандидат.Основной Тогда
				НаименованиеОригинала = Кандидат.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = ФорматСтроки(
			НСтр("ru = 'Для элемента ""%1"" найдены дубли (%2)'"),
			НаименованиеОригинала, ДанныеСтроки.Количество
		);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
		Возврат;
	КонецЕсли;
	
	// Перечень мест ошибок
	ТаблицаОшибок = ПолучитьИзВременногоХранилища(АдресРезультатаЗамены);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	Данные = ТаблицаОшибок.Скопировать( ТаблицаОшибок.НайтиСтроки(Фильтр) );
	Данные.Колонки.Добавить("Пиктограмма");
	Данные.ЗаполнитьЗначения(Истина, "Пиктограмма");
	МестаИспользованияНеобработанных.Загрузить(Данные);
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = ФорматСтроки(НСтр("ru = 'Элемент ""%1"" успешно обработан'"), 
			ДанныеСтроки.Наименование
		);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = ФорматСтроки(НСтр("ru = 'Не удалось заменить дубли в некоторых местах (%1)'"), 
			ДанныеСтроки.Количество
		);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеМестИспользованияНеобработанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыМестаИспользованияНеобработанных
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура МестаИспользованияНеобработанныхПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОписаниеОшибкиНеобработанных = "";
	Иначе
		ОписаниеОшибкиНеобработанных = ТекущиеДанные.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияНеобработанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияНеобработанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.ОбъектОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМестаИспользованияКандидата
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура МестаИспользованияКандидатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияКандидата.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОчиститьПравилаОтбора(Команда)
	
	ОчиститьОтборПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОсновнойЭлемент(Команда)
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено	// Нет данных
		Или ДанныеСтроки.Основной		// Текущий уже основной
	Тогда
		Возврат;
	КонецЕсли;
		
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОсновнойЭлементИерархически(ДанныеСтроки, Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКандидатаВДубли(Команда)
	
	ОткрытьФормуДубля(Элементы.НайденныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыДублей(Команда)
	
	РазвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппыДублей(Команда)
	
	СвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбновитьУстановкиОбластиДублей(Знач ВыбранноеЗначение)
	
	Элемент = ОбластиПоискаДублей.НайтиПоЗначению(ВыбранноеЗначение);
	Если Элемент = Неопределено Тогда
		ПредставлениеОбластиПоискаДублей = "";
		ОбластьПоискаДублей              = "";
	Иначе
		ПредставлениеОбластиПоискаДублей = Элемент.Представление;
		ОбластьПоискаДублей              = ВыбранноеЗначение;
	КонецЕсли;
	
	ИнициализироватьКомпоновщикОтбораИПравила();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДубля(Знач ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаИУсловноеОформление()
	
	ЦветПоясняющийТекст       = ЦветСтиляИлиАвто("ПоясняющийТекст",       69,  81,  133);
	ЦветПоясняющийОшибкуТекст = ЦветСтиляИлиАвто("ПоясняющийОшибкуТекст", 255, 0,   0);
	ЦветНедоступныеДанные     = ЦветСтиляИлиАвто("ЦветНедоступныеДанные", 192, 192, 192);
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;
	ЭлементыУсловногоОформления.Очистить();
	
	// Отсутствие мест использования у группы
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 1. Строка с текущим основным элементом группы:
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Отсутствие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 2. Строка с обычным элементом
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Наличие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 3. Места использования
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Количество");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 4. Неактивная строка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Пометка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНедоступныеДанные);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДубли");
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновыйПоискДублей()
	
	Если Не ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		// Не инициализировано
		Возврат;
	КонецЕсли;
		
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОбластьПоискаДублей",     ОбластьПоискаДублей);
	ПараметрыПоиска.Вставить("МаксимальноеЧислоДублей", 1500);
	
	МассивПравилПоиска = Новый Массив;
	Для Каждого Правило Из ПравилаПоиска Цикл
		МассивПравилПоиска.Добавить( Новый Структура("Реквизит, Правило", Правило.Реквизит, Правило.Правило) );
	КонецЦикла;
	ПараметрыПоиска.Вставить("ПравилаПоиска", МассивПравилПоиска);
	
	ПараметрыПоиска.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	
	Если ДоступноВыполнениеПроцедурыМодуляОбъектаОбработки Тогда
		// В качестве схемы компоновки передаем схему, будет использован отдельный фоновый сеанс
		ПараметрыПоиска.Вставить("СхемаКомпоновки",  ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки) );
	Иначе
		// В качестве схемы компоновки передаем адрес, будет использован этот же сеанс
		ПараметрыПоиска.Вставить("СхемаКомпоновки",  АдресСхемыКомпоновки);
	КонецЕсли;
	ПараметрыПоиска.Вставить("НастройкиКомпоновщикаПредварительногоОтбора", КомпоновщикПредварительногоОтбора.Настройки);
	
	ЗапуститьДлительнуюОперациюМастера("ФоновыйПоискДублей", ПараметрыПоиска, Истина, НСтр("ru = 'Поиск групп дублей'") );
КонецПроцедуры

&НаСервере
Функция ЦветСтиляИлиАвто(Знач Имя, Знач Красный = Неопределено, Зеленый = Неопределено, Синий = Неопределено)

	ЭлементСтиля = Метаданные.ЭлементыСтиля.Найти(Имя);
	Если ЭлементСтиля <> Неопределено И ЭлементСтиля.Вид = Метаданные.СвойстваОбъектов.ВидЭлементаСтиля.Цвет Тогда
		Возврат ЦветаСтиля[Имя];
	КонецЕсли;
	
	Возврат ?(Красный = Неопределено, Новый Цвет, Новый Цвет(Красный, Зеленый, Синий));
КонецФункции

&НаСервере
Функция ПарыЗаменДублей()
	ПарыЗамен = Новый Соответствие;
	
	ДеревоДублей = РеквизитФормыВЗначение("НайденныеДубли");
	ФильтрПоиска = Новый Структура("Основной", Истина);
	
	Для Каждого Родитель Из ДеревоДублей.Строки Цикл
		ОсновнойВГруппе = Родитель.Строки.НайтиСтроки(ФильтрПоиска)[0].Ссылка;
		
		Для Каждого Потомок Из Родитель.Строки Цикл
			Если Потомок.Пометка = 1 Тогда 
				ПарыЗамен.Вставить(Потомок.Ссылка, ОсновнойВГруппе);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПарыЗамен;
КонецФункции

&НаКлиенте
Функция ПараметрыОтчетаМестИспользования(Знач Источник)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НаборСсылок", Новый Массив);
	
	Для Каждого Родитель Из Источник.ПолучитьЭлементы() Цикл
		Для Каждого Потомок Из Родитель.ПолучитьЭлементы() Цикл
			ПараметрыОтчета.НаборСсылок.Добавить(Потомок.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПараметрыОтчета;
КонецФункции

&НаКлиенте 
Процедура РазвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Развернуть(СтрокаДанных, Истина);
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Развернуть(ДанныеСтроки.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура СвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Свернуть(СтрокаДанных);
		Возврат;
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиКандидатовИерархически(Знач ДанныеСтроки)
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или (Потомок.Пометка > 0);
		КонецЦикла;
		
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
			
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
			
		Иначе
			РодительСтроки.Пометка = 0;
			
		КонецЕсли;
		
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОсновнойЭлементИерархически(Знач ДанныеСтроки, Знач Родитель)
	Для Каждого Потомок Из Родитель.ПолучитьЭлементы() Цикл
		Потомок.Основной = Ложь;
	КонецЦикла;
	ДанныеСтроки.Основной = Истина;
	
	// Выбранный всегда используем
	ДанныеСтроки.Пометка = 1;
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	// И изменяем название группы
	Родитель.Наименование = ФорматСтроки( НСтр("ru = '%1 (%2)'"), ДанныеСтроки.Наименование, Родитель.Количество);
КонецПроцедуры

&НаСервере
Функция ПроверитьСостояниеПоискаДублей()
	СостояниеОперации = СостояниеДлительнойОперацииМастера();
	
	Если Не СостояниеОперации.Завершено Тогда
		// Клиенту пока можно ничего не говорить
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.ИнформацияОбОшибке <> Неопределено Тогда
		// Завершено c ошибками
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.Завершено И СостояниеОперации.Результат <> Неопределено Тогда
		// Формируем таблицы результата
		СостояниеОперации.Результат = ЗаполнитьРезультатыПоискаДублей( СостояниеОперации.Результат );
		
	КонецЕсли;
	
	Возврат СостояниеОперации;
КонецФункции

&НаСервере
Функция ЗаполнитьРезультатыПоискаДублей(Знач Данные)
	// Данные - результат функции ГруппыДублей модуля
	
	// Строим дерево для редактирования по таблицам результата
	ЭлементыДерева = НайденныеДубли.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	МестаИспользования = Данные.МестаИспользования;
	ТаблицаДублей      = Данные.ТаблицаДублей;
	
	ФильтрСтрок = Новый Структура("Родитель");
	ФильтрМест  = Новый Структура("Ссылка");
	
	ВсегоНайденоДублей = 0;
	
	ВсеГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
	Для Каждого Группа Из ВсеГруппы Цикл
		ФильтрСтрок.Родитель = Группа.Ссылка;
		ЭлементыГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
		
		ГруппаДерева = ЭлементыДерева.Добавить();
		ГруппаДерева.Количество = ЭлементыГруппы.Количество();
		ГруппаДерева.Пометка = 1;
		
		МаксСтрока = Неопределено;
		МаксМест   = -1;
		Для Каждого Элемент Из ЭлементыГруппы Цикл
			СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Элемент, "Ссылка, Код, Наименование");
			СтрокаДерева.Пометка = 1;
			
			ФильтрМест.Ссылка = Элемент.Ссылка;
			СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(ФильтрМест).Количество();
			
			Если МаксМест < СтрокаДерева.Количество Тогда
				Если МаксСтрока <> Неопределено Тогда
					МаксСтрока.Основной = Ложь;
				КонецЕсли;
				МаксСтрока = СтрокаДерева;
				МаксМест   = СтрокаДерева.Количество;
				МаксСтрока.Основной = Истина;
			КонецЕсли;
			
			ВсегоНайденоДублей = ВсегоНайденоДублей + 1;
		КонецЦикла;
		
		// Устанавливаем кандидата по максимальной ссылке
		ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + ГруппаДерева.Количество + ")";
	КонецЦикла;
	
	// Места использования сохраняем для дальнейшего фильтра
	МестаИспользованияКандидата.Очистить();
	Элементы.ОписаниеТекущейГруппыДублей.Заголовок = НСтр("ru = 'Дублей не найдено'");
	
	Если ЭтоАдресВременногоХранилища(АдресМестИспользования) Тогда
		УдалитьИзВременногоХранилища(АдресМестИспользования);
	КонецЕсли;
	АдресМестИспользования = ПоместитьВоВременноеХранилище(МестаИспользования, УникальныйИдентификатор);

	Если Не ПустаяСтрока(Данные.ОписаниеОшибки) Тогда
		// Фоновое сломалось
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Внимание16.Картинка, " ", 
			Новый ФорматированнаяСтрока(Данные.ОписаниеОшибки, , ЦветПоясняющийОшибкуТекст)
		);
		Возврат -1;
		
	КонецЕсли;
		
	// Нет ошибок поиска
	Если ВсегоНайденоДублей = 0 Тогда
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ",
			НСтр("ru = 'Не обнаружено дублей по указанным условиям'")
		);
	Иначе
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(ФорматСтроки(
			НСтр("ru = 'Найдены дубли элементов: %2 (среди элементов: %1). Все отмеченные элементы будут помечены на удаление 
			           |и заменены во всех местах использования на оригиналы (отмечены стрелкой).'"),
			ВсегоНайденоДублей, ВсегоНайденоДублей - ЭлементыДерева.Количество()),
			, ЦветПоясняющийТекст
		);
	КонецЕсли;
	
	Возврат ВсегоНайденоДублей;
КонецФункции

&НаСервере
Функция ПроверитьСостояниеУдаленияДублей()
	
	СостояниеОперации = СостояниеДлительнойОперацииМастера();
	
	Если Не СостояниеОперации.Завершено Тогда
		// Клиенту пока можно ничего не говорить
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.ИнформацияОбОшибке <> Неопределено Тогда
		// Завершено c ошибками
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.Завершено И СостояниеОперации.Результат <> Неопределено Тогда
		// Формируем таблицы результата
		СостояниеОперации.Результат = ЗаполнитьРезультатыУдаленияДублей( СостояниеОперации.Результат );
		
	КонецЕсли;
	
	Возврат СостояниеОперации;
КонецФункции

&НаСервере
Функция ЗаполнитьРезультатыУдаленияДублей(Знач ТаблицаОшибок)
	// ТаблицаОшибок - результат функции ЗаменитьСсылки модуля
	
	Если ЭтоАдресВременногоХранилища(АдресРезультатаЗамены) Тогда
		УдалитьИзВременногоХранилища(АдресРезультатаЗамены);
	КонецЕсли;
	
	ЗавершеноБезОшибок = ТаблицаОшибок.Количество() = 0;
	ПоследнийКандидат  = Неопределено;
	
	Если ЗавершеноБезОшибок Тогда
		ВсегоОбработано = 0; 
		ВсегоОсновных   = 0;
		Для Каждого ГруппаДублей Из НайденныеДубли.ПолучитьЭлементы() Цикл
			Если ГруппаДублей.Пометка Тогда
				Для Каждого Кандидат Из ГруппаДублей.ПолучитьЭлементы() Цикл
					Если Кандидат.Основной Тогда
						ПоследнийКандидат = Кандидат.Ссылка;
						ВсегоОбработано   = ВсегоОбработано + 1;
						ВсегоОсновных     = ВсегоОсновных + 1;
					ИначеЕсли Кандидат.Пометка Тогда 
						ВсегоОбработано = ВсегоОбработано + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсегоОсновных = 1 Тогда
			// Много дублей в один элемент
			Если ПоследнийКандидат = Неопределено Тогда
				ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ", ФорматСтроки(
					НСтр("ru = 'Все найденные дубли (%1) успешно объединены'"),
						ВсегоОбработано)
				);
			Иначе
				ПоследнийКандидатСтрокой = ОбщегоНазначения.ПредметСтрокой(ПоследнийКандидат);
				ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ", ФорматСтроки(
					НСтр("ru = 'Все найденные дубли (%1) успешно объединены
					           |в ""%2""'"),
						ВсегоОбработано, ПоследнийКандидатСтрокой)
				);
			КонецЕсли;
		Иначе
			// Много дублей во много групп
			ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ", ФорматСтроки(
				НСтр("ru = 'Все найденные дубли (%1) успешно объединены.
				           |Оставлено элементов (%2).'"),
					ВсегоОбработано, ВсегоОсновных)
			);
		КонецЕсли;
	КонецЕсли;
	
	НеобработанныеДубли.ПолучитьЭлементы().Очистить();
	МестаИспользованияНеобработанных.Очистить();
	МестаИспользованияКандидата.Очистить();
	
	Если ЗавершеноБезОшибок Тогда
		НайденныеДубли.ПолучитьЭлементы().Очистить();
		Возврат Истина;
	КонецЕсли;
	
	// Сохраняем для последующего доступа при анализе ссылок
	АдресРезультатаЗамены = ПоместитьВоВременноеХранилище(ТаблицаОшибок, УникальныйИдентификатор);
	
	// Формируем дерево дублей по ошибкам
	ЗначениеВРеквизитФормы(РеквизитФормыВЗначение("НайденныеДубли"), "НеобработанныеДубли");
	
	// Анализируем оставшихся
	Фильтр = Новый Структура("Ссылка");
	Родители = НеобработанныеДубли.ПолучитьЭлементы();
	ПозицияРодителя = Родители.Количество() - 1;
	Пока ПозицияРодителя >= 0 Цикл
		Родитель = Родители[ПозицияРодителя];
		
		Потомки = Родитель.ПолучитьЭлементы();
		ПозицияПотомка = Потомки.Количество() - 1;
		ОсновнойПотомок = Потомки[0];	// Там есть минимум один
		
		Пока ПозицияПотомка >= 0 Цикл
			Потомок = Потомки[ПозицияПотомка];
			
			Если Потомок.Основной Тогда
				ОсновнойПотомок = Потомок;
				Фильтр.Ссылка = Потомок.Ссылка;
				Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
				
			ИначеЕсли ТаблицаОшибок.Найти(Потомок.Ссылка, "Ссылка") = Неопределено Тогда
				// Был успешно удален, нет ошибок
				Потомки.Удалить(Потомок);
				
			Иначе
				Фильтр.Ссылка = Потомок.Ссылка;
				Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
				
			КонецЕсли;
			
			ПозицияПотомка = ПозицияПотомка - 1;
		КонецЦикла;
		
		КоличествоПотомков = Потомки.Количество();
		Если КоличествоПотомков = 1 И Потомки[0].Основной Тогда
			Родители.Удалить(Родитель);
		Иначе
			Родитель.Количество = КоличествоПотомков - 1;
			Родитель.Наименование = ОсновнойПотомок.Наименование + " (" + КоличествоПотомков + ")";
		КонецЕсли;
		
		ПозицияРодителя = ПозицияРодителя - 1;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция АдресНастроекКомпоновщикаОтбора()
	
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикПредварительногоОтбора.Настройки, УникальныйИдентификатор)
	
КонецФункции

&НаСервере
Функция АдресНастроекПравилПоиска()
	
	Настройки = Новый Структура;
	Настройки.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	Настройки.Вставить("ВсеВариантыСравнения", ВсеВариантыСравнения);
	Настройки.Вставить("ПравилаПоиска", РеквизитФормыВЗначение("ПравилаПоиска"));
	
	Возврат ПоместитьВоВременноеХранилище(Настройки);
КонецФункции

&НаСервере
Процедура ОбновитьКомпоновщикОтбора(Адрес)
	
	КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки( ПолучитьИзВременногоХранилища(Адрес) );
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьПравилаПоиска(Адрес)
	Настройки = ПолучитьИзВременногоХранилища(Адрес);
	Адрес = Неопределено;
	
	УчитыватьПрикладныеПравила = Настройки.УчитыватьПрикладныеПравила;
	ЗначениеВРеквизитФормы(Настройки.ПравилаПоиска, "ПравилаПоиска");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеПравилПоиска()
	ТекстПравил = "";
	Союз        = " " + НСтр("ru = 'И'") + " ";
	
	Для Каждого Правило Из ПравилаПоиска Цикл
		
		Если Правило.Правило = "Равно" Тогда
			Сравнение = НСтр("ru = '%1 совпадает'");
		ИначеЕсли Правило.Правило = "Подобно" Тогда
			Сравнение = НСтр("ru = '%1 совпадает по похожим словам'");
		Иначе
			Сравнение = "";
		КонецЕсли;
		
		ТекстПравил = ТекстПравил + ?(ПустаяСтрока(Сравнение), "", Союз) + СтрЗаменить(Сравнение, "%1", Правило.ПредставлениеРеквизита);
	КонецЦикла;
	
	ПрикладнойТекст = "";
	Если УчитыватьПрикладныеПравила Тогда
		Для Позиция = 1 По СтрЧислоСтрок(ОписаниеПрикладныхПравил) Цикл
			СтрокаПравила = СокрЛП(СтрПолучитьСтроку(ОписаниеПрикладныхПравил, Позиция));
			Если Не ПустаяСтрока(СтрокаПравила) Тогда
				ПрикладнойТекст = ПрикладнойТекст + Союз + СтрокаПравила;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТекстПравил = ТекстПравил + ПрикладнойТекст;
	Если ПустаяСтрока(ТекстПравил) Тогда
		Элементы.ПравилаПоиска.Заголовок = НСтр("ru = 'Правила не заданы'");
	Иначе
		Элементы.ПравилаПоиска.Заголовок = СокрЛП(Сред(ТекстПравил, СтрДлина(Союз)));
	КонецЕсли;
	
	Элементы.ПравилаПоиска.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОтбора()
	
	ОписаниеОтбора = Строка(КомпоновщикПредварительногоОтбора.Настройки.Отбор);
	Если ПустаяСтрока(ОписаниеОтбора) Тогда
		ОписаниеОтбора = НСтр("ru = 'Все элементы'");
		Элементы.ОчиститьПравилаОтбора.Доступность = Ложь;
	Иначе
		Элементы.ОчиститьПравилаОтбора.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ПравилаОтбора.Заголовок = ОписаниеОтбора;
	
	Элементы.ПравилаОтбора.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОбластиПоиска()

	Список = Элементы.ПредставлениеОбластиПоискаДублей.СписокВыбора;
	Список.Очистить();
	ЭлементПредставления = Список.Добавить();
	
	Текущий = ОбластиПоискаДублей.НайтиПоЗначению(ОбластьПоискаДублей);
	Если Текущий <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементПредставления, Текущий);
	КонецЕсли;
	
	ЭтотОбъект.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПринудительно()
	
	КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы.Очистить();
	ОбновитьОписаниеОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикОтбораИПравила()
	// 1. Очистка всего
	КомпоновщикПредварительногоОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Если ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		УдалитьИзВременногоХранилища(АдресСхемыКомпоновки);
		АдресСхемыКомпоновки = "";
	КонецЕсли;
	
	ОписаниеПрикладныхПравил = Неопределено;
	ПравилаПоиска.Очистить();
	
	Если ПустаяСтрока(ОбластьПоискаДублей) Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбласть = Метаданные.НайтиПоПолномуИмени(ОбластьПоискаДублей);
	
	// 2. Собираем компоновщик для поиска - отбора
	ДоступныеРеквизитыОтбора = ДоступныеИменаМетаРеквизитовОтбора(МетаОбласть.СтандартныеРеквизиты);
	ДоступныеРеквизитыОтбора = ?(ПустаяСтрока(ДоступныеРеквизитыОтбора), ",", ДоступныеРеквизитыОтбора)
		+ ДоступныеИменаМетаРеквизитовОтбора(МетаОбласть.Реквизиты);
		
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ " + Сред(ДоступныеРеквизитыОтбора, 2) + " ИЗ " + ОбластьПоискаДублей;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	// Сохраним схему в разрезе основной формы, чтобы компоновщик не терял актуальность
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикПредварительногоОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	// 3. Собираем правила, предлагаемые нами по умолчанию для вида метаданных
	ИгнорируемыеРеквизиты = Новый Структура("ПометкаУдаления, Ссылка, Предопределенный, ИмяПредопределенныхДанных, ЭтоГруппа");
	ТаблицаПравил = РеквизитФормыВЗначение("ПравилаПоиска");
	
	ВсеВариантыСравнения.Очистить();
	ВсеВариантыСравнения.Добавить("Равно",   НСтр("ru = 'Совпадает'"));
	ВсеВариантыСравнения.Добавить("Подобно", НСтр("ru = 'Совпадает по похожим словам'"));

	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, МетаОбласть.СтандартныеРеквизиты);
	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, МетаОбласть.Реквизиты);
	
	УстановитьЗначенияПравилПоУмолчанию(ОбластьПоискаДублей, КомпоновщикПредварительногоОтбора, ТаблицаПравил);
	
	// 4. Обрабатываем прикладные данные
	Если ОбластиПоискаДублей.НайтиПоЗначению(ОбластьПоискаДублей).Пометка Тогда
		// Есть прикладной функционал
		
		// Пустая структура параметров
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ПараметрыПоУмолчанию = ОбъектОбработки.ПрикладныеПараметрыПоУмолчанию(
			ПравилаПоиска.Выгрузить(,"Реквизит, Правило"),
			КомпоновщикПредварительногоОтбора
		);
		
		// Вызываем прикладной код
		МенеджерОбласти = ОбъектОбработки.МенеджерОбластиПоискаДублей(ОбластьПоискаДублей);
		МенеджерОбласти.ПараметрыПоискаДублей(ПараметрыПоУмолчанию);
		
		// Формируем строку прикладных правил
		ОписаниеПрикладныхПравил = "";
		Для Каждого Описание Из ПараметрыПоУмолчанию.ОграниченияСравнения Цикл
			ОписаниеПрикладныхПравил = ОписаниеПрикладныхПравил + Символы.ПС + Описание.Представление;
		КонецЦикла;
		ОписаниеПрикладныхПравил = СокрЛП(ОписаниеПрикладныхПравил);
	КонецЕсли;
	
	ТаблицаПравил.Сортировать("ПредставлениеРеквизита");
	ЗначениеВРеквизитФормы(ТаблицаПравил, "ПравилаПоиска");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеИменаМетаРеквизитовОтбора(Знач МетаКоллекция)
	Результат = "";
	ТипХранилища = Тип("ХранилищеЗначения");
	
	Для Каждого МетаРеквизит Из МетаКоллекция Цикл
		ЭтоХранилище = МетаРеквизит.Тип.СодержитТип(ТипХранилища);
		Если Не ЭтоХранилище Тогда
			Результат = Результат + "," + МетаРеквизит.Имя;
		КонецЕсли
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, Знач Игнорировать, Знач ВсеВариантыСравнения, Знач МетаКоллекция)
	
	Для Каждого МетаРеквизит Из МетаКоллекция Цикл
		Если Не Игнорировать.Свойство(МетаРеквизит.Имя) Тогда
			ВариантыСравнения = ВариантыСравненияДляТипа(МетаРеквизит.Тип, ВсеВариантыСравнения);
			Если ВариантыСравнения <> Неопределено Тогда
				// Можно сравнивать
				СтрокаПравил = ТаблицаПравил.Добавить();
				СтрокаПравил.Реквизит          = МетаРеквизит.Имя;
				СтрокаПравил.ВариантыСравнения = ВариантыСравнения;
				
				ПредставлениеРеквизита = МетаРеквизит.Синоним;
				СтрокаПравил.ПредставлениеРеквизита = ?(ПустаяСтрока(ПредставлениеРеквизита), МетаРеквизит.Имя, ПредставлениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначенияПравилПоУмолчанию(Знач ОбластьПоиска, Знач КомпоновщикОтбора, Знач ПравилаСравнения) 
	
	// Правило отбора
	ЭлементыОтбора = КомпоновщикОтбора.Настройки.Отбор.Элементы;
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;;
	
	// Правило сравнения, только если есть наименование
	Правило = ПравилаСравнения.Найти("Наименование", "Реквизит");
	Если Правило <> Неопределено Тогда
		Если Правило.ВариантыСравнения.НайтиПоЗначению("Подобно") <> Неопределено Тогда
			Правило.Правило = "Подобно";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыСравненияДляТипа(Знач ДоступныеТипы, Знач ВсеВариантыСравнения) 
	
	ЭтоХранилище = ДоступныеТипы.СодержитТип(Тип("ХранилищеЗначения"));
	Если ЭтоХранилище Тогда 
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоСтрока = ДоступныеТипы.СодержитТип(Тип("Строка"));
	ЭтоФиксированнаяСтрока = ЭтоСтрока И ДоступныеТипы.КвалификаторыСтроки <> Неопределено 
		И ДоступныеТипы.КвалификаторыСтроки.Длина <> 0;
		
	Если ЭтоСтрока И Не ЭтоФиксированнаяСтрока Тогда
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[0]);		// Совпадает
	
	Если ЭтоСтрока Тогда
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[1]);	// Похоже
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИнициализироватьОсновныеПараметры()
	
	// Флаг учета правил ставим безусловно
	УчитыватьПрикладныеПравила = Истина;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МетаОбъектОбработки = ОбъектОбработки.Метаданные();
	
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(МетаОбъектОбработки);
	ИмяОбработки        = ?(ЭтоВнешняяОбработка, ОбъектОбработки.ИспользуемоеИмяФайла, МетаОбъектОбработки.Имя);
	БазовоеИмяФормы     = МетаОбъектОбработки.ПолноеИмя() + ".Форма.";
	
	ДоступноВыполнениеПроцедурыМодуляОбъектаОбработки = Метаданные.НайтиПоПолномуИмени(
		"Подсистема.СтандартныеПодсистемы.Подсистема.БазоваяФункциональность"
	) <> Неопределено;
	
	ОбъектОбработки.ОбластиПоискаДублей(ОбластиПоискаДублей, Истина);
КонецПроцедуры

// Построение форматированной строки по шаблону "Текст %1 %2"
//
&НаКлиентеНаСервереБезКонтекста
Функция ФорматСтроки(Знач Шаблон, 
	Знач П1 = Неопределено, Знач П2 = Неопределено, Знач П3 = Неопределено, Знач П4 = Неопределено, Знач П5 = Неопределено,
	Знач П6 = Неопределено, Знач П7 = Неопределено, Знач П8 = Неопределено, Знач П9 = Неопределено
)

	ЧастиСтроки = Новый Массив;
	ДопустимыеТипы = Новый ОписаниеТипов("Строка, ФорматированнаяСтрока, Картинка");
	
	Начало = 1;
	Пока Истина Цикл
		Фрагмент = Сред(Шаблон, Начало);
		
		Позиция = Найти(Фрагмент, "%");
		Если Позиция = 0 Тогда
			ЧастиСтроки.Добавить(Фрагмент);
			Прервать;
		КонецЕсли;
		
		Следующий = Сред(Фрагмент, Позиция + 1, 1);
		
		Если Следующий = "1" Тогда
			Значение = П1;
			
		ИначеЕсли Следующий = "2" Тогда
			Значение = П2;
			
		ИначеЕсли Следующий = "3" Тогда
			Значение = П3;
			
		ИначеЕсли Следующий = "4" Тогда
			Значение = П4;
			
		ИначеЕсли Следующий = "5" Тогда
			Значение = П5;
			
		ИначеЕсли Следующий = "6" Тогда
			Значение = П6;
			
		ИначеЕсли Следующий = "7" Тогда
			Значение = П7;
			
		ИначеЕсли Следующий = "8" Тогда
			Значение = П8;
			
		ИначеЕсли Следующий = "9" Тогда
			Значение = П9;
			
		ИначеЕсли Следующий = "%" Тогда
			Значение = "%";
			
		Иначе
			Значение = Неопределено;
			Позиция  = Позиция - 1;
			
		КонецЕсли;
		
		ЧастиСтроки.Добавить(Лев(Фрагмент, Позиция - 1));
		
		Если Значение <> Неопределено Тогда
			Значение = ДопустимыеТипы.ПривестиЗначение(Значение);
			Если Значение <> Неопределено Тогда
				ЧастиСтроки.Добавить( Значение );
			КонецЕсли;
		КонецЕсли;
		
		Начало = Начало + Позиция + 1;
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пошаговый помощник

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Поиск не выполнялся
	ДобавитьШагМастера(Элементы.ШагПоискНеВыполнялся, 
			ДействиеШагаМастера("ПриАктивации",         "ШагПоискНеВыполнялсяПриАктивации",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагПоискНеВыполнялсяПередДействиемДалее",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагПоискНеВыполнялсяПередДействиемОтмена",
		))),
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Далее",  НСтр("ru = 'Найти дубли'") + " >", НСтр("ru = 'Найти дубли по указанным критериям'"), Истина, Истина, Истина,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Отказаться от поиска и замены дублей'"),
		)))
	);
	
	// 1. Длительный поиск
	ДобавитьШагМастера(Элементы.ШагВыполнениеПоиска, 
			ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеПоискаПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеПоискаПередДействиемОтмена",
			ДействиеШагаМастера("ПриОбработкеОжидания", "ШагВыполнениеПоискаПриОбработкеОжидания",
		))), 
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Прервать'"), НСтр("ru = 'Прервать поиск дублей'"),
		)))
	);
	
	// 2. Обработка результатов поиска, выбор основных элементов
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента, 
			ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",
		))),
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Далее",  НСтр("ru = 'Удалить дубли'") + " >", НСтр("ru = 'Удалить дубли'"), Истина, Истина, Истина,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Отказаться от поиска и замены дублей'"),
		)))
	);
	
	// 3. Длительное удаление дублей
	ДобавитьШагМастера(Элементы.ШагВыполнениеУдаления, 
			ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеУдаленияПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеУдаленияПередДействиемОтмена",
			ДействиеШагаМастера("ПриОбработкеОжидания", "ШагВыполнениеУдаленияПриОбработкеОжидания",
		))), 
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Прервать'"), НСтр("ru = 'Прервать удаление дублей'"),
		)))
	);
	
	// 4. Успешное удаление
	ДобавитьШагМастера(Элементы.ШагУспешноеУдаление,
			ДействиеШагаМастера("ПриАктивации",         "ШагУспешноеУдалениеПриАктивации",
			ДействиеШагаМастера("ПередДействиемНазад",  "ШагУспешноеУдалениеПередДействиемНазад",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешноеУдалениеПередДействиемОтмена",
		))),
			КнопкаШагаМастера("Назад", "< " + НСтр("ru = 'Новый поиск'"), НСтр("ru = 'Начать новый поиск с другими параметрами'"), Истина, Истина, Ложь, 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Закрыть'"), Истина, Истина, Истина
		)))
	);
	
	// 5. Неполное удаление
	ДобавитьШагМастера(Элементы.ШагНеудачныеЗамены,
			ДействиеШагаМастера("ПриАктивации",         "ШагНеудачныеЗаменыПриАктивации",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагНеудачныеЗаменыПередДействиемДалее",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагНеудачныеЗаменыПередДействиемОтмена",
		))),
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Далее",  НСтр("ru = 'Повторить удаление'") + " >", НСтр("ru = 'Удалить дубли'"), Истина, Истина, Истина,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Закрыть'"), Истина, Истина, Ложь
		)))
	);
	
	// 6. Дублей не найдено
	ДобавитьШагМастера(Элементы.ШагДублейНеНайдено,
			ДействиеШагаМастера("ПриАктивации",         "ШагДублейНеНайденоПриАктивации",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагДублейНеНайденоПередДействиемДалее",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагДублейНеНайденоПередДействиемОтмена",
		))),
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Далее",  НСтр("ru = 'Найти дубли'") + " >", НСтр("ru = 'Найти дубли по указанным критериям'"), Истина, Истина, Истина,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Закрыть'"), Истина, Истина, Ложь
		)))
	);
	
КонецПроцедуры

// 0. Поиск не выполнялся

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Истина;
	
	ОбновитьОписаниеОтбора();
	ОбновитьОписаниеОбластиПоиска();
	ОбновитьОписаниеПравилПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Возможность поиска
	Если Не ПустаяСтрока(ОбластьПоискаДублей) Тогда
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать область поиска дублей'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Отказаться от поиска и замены дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// 1. Длительный поиск

&НаКлиенте
Процедура ШагВыполнениеПоискаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Ложь;
	
	ЗапуститьФоновыйПоискДублей();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеПоискаПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	
	// Ожидаем завершения поиска дублей
	СостояниеОперации = ПроверитьСостояниеПоискаДублей();
	
	Если Не СостояниеОперации.Завершено Тогда
		Возврат;
	КонецЕсли;
	
	// Смотрим на результат выполнения
	ОписаниеОшибки = Неопределено;
	Если СостояниеОперации.ИнформацияОбОшибке <> Неопределено Тогда
		ОписаниеОшибки = СостояниеОперации.ИнформацияОбОшибке;
	ИначеЕсли СостояниеОперации.Результат = -1 Тогда
		ОписаниеОшибки = ОписаниеСостоянияНайденныхДублей;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		Прекратить = Истина;
		ПоказатьПредупреждение(, ОписаниеОшибки );
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		Возврат;
	КонецЕсли;
	
	Если СостояниеОперации.Результат <> Неопределено И СостояниеОперации.Результат > 0 Тогда
		// Найдены какие-то дубли
		ШагМастера("Далее");
		Возврат;
	КонецЕсли;
	
	// Дублей по текущим установкам не найдено
	ПерейтиНаШагМастера(Элементы.ШагДублейНеНайдено, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеПоискаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Прекратить поиск дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// 2. Обработка результатов поиска, выбор основных элементов

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Истина;
	
	// Разрешаем повторять поиск
	Элементы.ПовторитьПоиск.Видимость = Истина;
	
	РазвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Запрещаем повторять поиск
	Элементы.ПовторитьПоиск.Видимость = Ложь;
	
	ЗавершитьШагМастера(ПараметрыШага);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Закрыть поиск дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// 3. Длительное удаление

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Ложь;
	
	ПараметрыУдаления = Новый Структура;
	ПараметрыУдаления.Вставить("СпособУдаления", "Пометка");
	ПараметрыУдаления.Вставить("ПарыЗамен", ПарыЗаменДублей() );
	
	ЗапуститьДлительнуюОперациюМастера("ФоновоеУдалениеДублей", ПараметрыУдаления, Истина, НСтр("ru = 'Удаление дублей'") );
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	
	// Ожидаем завершения поиска дублей
	СостояниеОперации = ПроверитьСостояниеУдаленияДублей();
	
	Если Не СостояниеОперации.Завершено Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеОперации.ИнформацияОбОшибке = Неопределено Тогда
		// Выполнено успешно, данные сформированы и переложены в реквизиты
		Если СостояниеОперации.Результат = Истина Тогда
			// Успешно заменены все группы дублей
			ШагМастера("Далее");
		Иначе
			// Не все места использования удалось заменить
			ПерейтиНаШагМастера(Элементы.ШагНеудачныеЗамены, Истина);
		КонецЕсли;
	Иначе
		// Фоновое задание завершено с ошибкой
		Прекратить = Истина;
		ПоказатьПредупреждение(, СостояниеОперации.ИнформацияОбОшибке);
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеУдаленияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Прервать удаление дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// 4. Успешное удаление

&НаКлиенте
Процедура ШагУспешноеУдалениеПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Переход на начало для работы с новыми параметрами
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Успешное завершение, запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Закрыть поиск дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// 5. Неполное удаление

&НаКлиенте
Процедура ШагНеудачныеЗаменыПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Повторяем удаление
	ПерейтиНаШагМастера(Элементы.ВыполнениеУдаления, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Неудачное завершение, запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Закрыть поиск дублей?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// 6. Дублей не найдено

&НаКлиенте
Процедура ШагДублейНеНайденоПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Заголовок.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Переход на повторный поиск
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Успешное завершение
	ЗавершитьРаботуФормы();
	
КонецПроцедуры


// Общий обработчик немодального продолжения отмены с закрытием
//
&НаКлиенте
Процедура ЗавершениеОтменыИЗакрытиеФормы(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		// Подтверждаем продолжение процесса
		ЗавершитьШагМастера(ДополнительныеПараметры.ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ЗавершитьРаботуФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуФормы(Знач ТекстВсплывающегоСообщения = Неопределено)
	
	ОтменитьДлительнуюОперациюМастера();
	
	Если ТекстВсплывающегоСообщения <> Неопределено Тогда
		ПоказатьОповещениеПользователя( , , ТекстВсплывающегоСообщения, Элементы.Информация32);
	КонецЕсли;
	
	// Закрываем без дополнительных вопросов
	ПодтверждениеЗакрытияФормы = Истина;
	Закрыть();
КонецПроцедуры

// Общий обработчик подтверждения закрытия
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуФормы();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Блок мастера

// Для встраивания функционала мастера необходимо:
//
//     1) Нарисовать на форме группу, содержащую страницы помощника
//     2) Определить на форме три команды для действий "Далее", "Назад", "Отмена". Определить им обработчики как:
//
//         &НаКлиенте
//         Процедура ШагМастераНазад(Команда)
//             ШагМастера("Назад");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераДалее(Команда)
//             ШагМастера("Далее");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераОтмена(Команда)
//             ШагМастера("Отмена");
//         КонецПроцедуры
//
//     3) Добавить блок методов пошагового помощника
//
//     4) В коде на сервере:
//          - Инициализировать структуры помощника вызовом "ИнициализироватьМастера", передав туда соответствующие
//            элементы формы
//
//          - Создать сценарий работы последовательным вызовами "ДобавитьШагМастера". Рекомендуется использовать 
//            вспомогательные функции "ДействиеШагаМастера" и "КнопкаШагаМастера". Например:
//
//              ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
//                      ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
//                      ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
//                      ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена",
//                  ))), 
//                      КнопкаШагаМастера("Далее", НСтр("ru = 'Заменить'") + " >", Истина, Истина, Истина,
//                      КнопкаШагаМастера("Назад", "", Ложь, Ложь, Ложь, 
//                      КнопкаШагаМастера("Отмена", НСтр("ru = 'Отмена'")
//                  )))
//              );
//
//     5) В коде на клиенте (обычно при открытии):
//          - Указать начальную страницу мастера при помощи вызова "УстановитьНачальнуюСтраницуМастера"
//          - Запустить начальную страницу вызовом "ЗапуститьРаботуМастера"
//

// Инициализирует структуры мастера.
//
// Параметры:
//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера
//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее"
//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад"
//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена"
//
&НаСервере
Процедура ИнициализироватьМастера(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	НастройкиМастера = Новый Структура;

	НастройкиМастера.Вставить("Шаги", Новый Массив);
	НастройкиМастера.Вставить("НомерТекущегоШага", 0);
	НастройкиМастера.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса
	НастройкиМастера.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	НастройкиМастера.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	НастройкиМастера.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	НастройкиМастера.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Таймаут вызова обработчика
	НастройкиМастера.Вставить("ТаймаутОжиданияДлительнойОперации", 
		?( ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 5, 3) );
		
	// Для обработки длительных операций
	НастройкиМастера.Вставить("ИдентификаторФоновогоЗадания");
	НастройкиМастера.Вставить("АдресРезультатаФоновогоЗадания");
	
	// Для хранения пользовательских параметров
	НастройкиМастера.Вставить("ПользовательскиеПараметры", Новый Соответствие);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("НастройкиПошаговогоМастера", Новый ОписаниеТипов) );
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтотОбъект.НастройкиПошаговогоМастера = НастройкиМастера;
КонецПроцедуры

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          *  ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией страницы
//                                         с двумя параметрами:
//                                           <Страница> - ГруппаФормы - группа-страница, которая активизируется
//                                           <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки "Далее",
//                                            перед переходом на следующую страницу. Процедура будет вызвана с двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки немодальных 
//                                                                вызовов последняя процедура-обработчик должна произвести вызов
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая действие.
//                                             <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки "Назад"
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки "Отмена"
//
//          * ПриОбработкеОжидания - Строка - Необязательное имя процедуры, которая будет периодически вызываться с двумя 
//                                            параметрами:
//                                              <Прекратить> - Если при выходе из процедуры установить в значение Истина, то
//                                                             периодические вызовы будут прекращены.
//                                              <ДополнительныеПараметры> - Неопределено
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость, КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера", "ДействиеШагаМастера", "КнопкаШагаМастера"
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
	
	ПоляКнопки = "Доступность, Видимость, КнопкаПоУмолчанию, Подсказка";
	
	ОписаниеШага.Вставить("КнопкаДалее", Новый Структура(ПоляКнопки, Истина, Истина, Истина));
	ОписаниеШага.КнопкаДалее.Вставить("Заголовок", НСтр("ru='Далее'") + " >" );
	
	ОписаниеШага.Вставить("КнопкаНазад", Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаНазад.Вставить("Заголовок", "< " + НСтр("ru='Назад'"));
	
	ОписаниеШага.Вставить("КнопкаОтмена",Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаОтмена.Вставить("Заголовок", НСтр("ru='Отмена'"));
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	Если Кнопки.Свойство("Далее") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаДалее, Кнопки.Далее);
	КонецЕсли;
	Если Кнопки.Свойство("Назад") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаНазад, Кнопки.Назад);
	КонецЕсли;
	Если Кнопки.Свойство("Отмена") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаОтмена, Кнопки.Отмена);
	КонецЕсли;

	ЭтотОбъект.НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера"
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера"
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопку
//
// Параметры:
//     Идентификатор     - Строка - Идентификатор кнопки, может быть "Далее", "Назад" или "Отмена", 
//                                  см описание метода "ДобавитьШагМастера"
//     Заголовок         - Строка - Заголовок кнопки
//     Подсказка         - Строка - Подсказка для кнопки
//     Видимость         - Булево - параметр отображения кнопки
//     Доступность       - Булево - параметр отображения кнопки
//     КнопкаПоУмолчанию - Булево - параметр отображения кнопки
//     СлужебныеДанные   - Структура - Накапливает значения
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями
//
&НаСервере
Функция КнопкаШагаМастера(Знач Идентификатор, Знач Заголовок = "", Знач Подсказка = "", Знач Видимость = Истина, Знач Доступность = Истина, Знач КнопкаПоУмолчанию = Ложь, Знач СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	
	ОписаниеКнопки = Новый Структура;
	ОписаниеКнопки.Вставить("Заголовок", Заголовок);
	ОписаниеКнопки.Вставить("Подсказка", ?(ПустаяСтрока(Подсказка), Заголовок, Подсказка));
	
	ОписаниеКнопки.Вставить("Доступность", Доступность);
	ОписаниеКнопки.Вставить("Видимость", Видимость);
	ОписаниеКнопки.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
	
	СлужебныеДанные.Вставить(Идентификатор, ОписаниеКнопки);
	Возврат СлужебныеДанные;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	ЭтотОбъект.НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи "УстановитьНачальнуюСтраницуМастера"
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если НастройкиМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
		Для Каждого ОписаниеШага Из НастройкиМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'"),
							ИмяДействия, 
							ОписаниеШага.Страница, 
							ИмяОбработчика
						);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиМастера.НомерТекущегоШага, Истина);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		ЭтотОбъект.НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиМастера.СтраницаСтарта;
		ЭтотОбъект.НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена"
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
		
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// Отрабатываем уход с текущей страницы
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Ложь)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден шаг помощника %1'"),
			ИдентификаторШага
		);
		ВызватьИсключение Ошибка;
	КонецЕсли;
		
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	СледующийШаг = НастройкиМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу
	Элементы[НастройкиМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	ЭтотОбъект.НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
		
	ИначеЕсли Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Запускаем обработчик ожидания, если надо
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
	
	// И запускаем ожидание, если надо
	Если Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Первый запуск быстрый
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	НомерШага = Неопределено;
	
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		НомерШага = ИдентификаторШага;
	Иначе
		ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага); 
		Для НомерШага=0 По НастройкиМастера.Шаги.ВГраница() Цикл
			Если НастройкиМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
				НомерШага = НомерШага;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НомерШага;
КонецФункции

// Возвращает флаг отмены
&НаКлиенте
Функция ОбработкаОжиданияСтраницыМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	Действие = ОписаниеШага.ПриОбработкеОжидания;
	Если ПустаяСтрока(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
	
	Прекратить = Ложь;
	ВыполнитьОбработкуОповещения(Оповещение, Прекратить);
	Продолжать = Не Прекратить;
	
	Если Продолжать Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", НастройкиМастера.ТаймаутОжиданияДлительнойОперации, Истина);
	КонецЕсли;
	
	Возврат Продолжать;
КонецФункции

// Стартует длительную операцию мастера
// 
// Параметры:
//     ИмяМетода           - Строка - Имя метода для фонового задания
//     ПараметрыМетода     - Массив - Параметры метода для фонового задания.
//     ВозвращаетРезультат - Булево - Флаг необходимости получения результатов. Если установлен в Истина, то
//                                    последним параметром вызова автоматически добавляется адрес хранилища для результата
//     ОписаниеМетода      - Строка - Необязательное описание метода для отображения в списке фоновых заданий
//
&НаСервере
Процедура ЗапуститьДлительнуюОперациюМастера(Знач ИмяМетода, Знач ПараметрыМетода, Знач ВозвращаетРезультат = Ложь, Знач ОписаниеМетода = "")
	
	// Отменяем возможно незавершенное предыдущее
	ОтменитьДлительнуюОперациюМастера();
	
	Если ВозвращаетРезультат Тогда
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Иначе
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	СлужебныеПараметры = Новый Структура("ДополнительнаяОбработкаСсылка", Неопределено);
	СлужебныеПараметры.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	СлужебныеПараметры.Вставить("ИмяОбработки",        ИмяОбработки);
	СлужебныеПараметры.Вставить("ИмяМетода",           ИмяМетода);
	СлужебныеПараметры.Вставить("ПараметрыВыполнения", ПараметрыМетода);
	
	 Если Не ДоступноВыполнениеПроцедурыМодуляОбъектаОбработки Тогда
		// Запуск задания будет выполнен прямым вызовом
		ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = СлужебныеПараметры;
		Возврат;
	КонецЕсли;
	
	// У нас есть БСП
	ПараметрыДлительнойОперации = Новый Массив;
	ПараметрыДлительнойОперации.Добавить(СлужебныеПараметры);
	ПараметрыДлительнойОперации.Добавить(ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания);
	
	Задание = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыДлительнойОперации, , ОписаниеМетода);
	ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Задание.УникальныйИдентификатор;
КонецПроцедуры

// Получает состояние текущей длительной операцию
// 
// Возвращаемое значение - Структура - Описание состояния с полями:
//     Завершено             - Булево              - Флаг активности длительной операции
//     ИнформацияОбОшибке    - ИнформацияОбОшибке  - Если операция завершилась аварийно, то содержит информацию почему
//     Результат             - Произвольный        - Если длительное задание было запущено с флагом возвращения результата,
//                                                   то содержит текущее значение результата.
//
&НаСервере
Функция СостояниеДлительнойОперацииМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Данные = Новый Структура("Завершено, Результат, ИнформацияОбОшибке", Истина);

	Если НастройкиМастера.ИдентификаторФоновогоЗадания = Неопределено Тогда
		Возврат Данные;
		
	ИначеЕсли ТипЗнч(НастройкиМастера.ИдентификаторФоновогоЗадания) <> Тип("УникальныйИдентификатор") Тогда
		// Отложенное выполнение, которое необходимо произвести здесь
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		
		ИмяМетода           = НастройкиМастера.ИдентификаторФоновогоЗадания.ИмяМетода;
		ПараметрыВыполнения = НастройкиМастера.ИдентификаторФоновогоЗадания.ПараметрыВыполнения;
		АдресРезультата     = НастройкиМастера.АдресРезультатаФоновогоЗадания;
		
		УстановитьБезопасныйРежим(Истина);
		Выполнить("ОбъектОбработки." + ИмяМетода + "(ПараметрыВыполнения, АдресРезультата)");
		УстановитьБезопасныйРежим(Ложь);
		
		Задание = Неопределено;
	Иначе
		// Нормальное фоновое
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиМастера.ИдентификаторФоновогоЗадания);
		
	КонецЕсли;
	
	Если Задание <> Неопределено Тогда
		// Все непонятное - завершено, см значения по умолчанию
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Данные.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Данные.Завершено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
		Если Данные.Завершено Тогда
			// Текущие сообщения фонового задания
			НакопленныеСообщения = Задание.ПолучитьСообщенияПользователю(Истина);
			Если НакопленныеСообщения <> Неопределено Тогда
				Для Каждого Сообщение Из НакопленныеСообщения Цикл
					Сообщение.Сообщить();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НастройкиМастера.АдресРезультатаФоновогоЗадания) Тогда
		Данные.Результат = ПолучитьИзВременногоХранилища(НастройкиМастера.АдресРезультатаФоновогоЗадания);
	КонецЕсли;
	
	Если Данные.Завершено Тогда
		ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Отменяет текущую длительную операцию
&НаСервере
Процедура ОтменитьДлительнуюОперациюМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если НастройкиМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда 
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиМастера.ИдентификаторФоновогоЗадания);
		Если Задание <> Неопределено Тогда
			Задание.Отменить();
		КонецЕсли;
		ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	
КонецПроцедуры

#КонецОбласти