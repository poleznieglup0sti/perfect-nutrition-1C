////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Функции отчетов (клиент, сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Настройки формы отчета по умолчанию.
//
// Возвращаемое значение:
//   Структура - Настройки формы отчета.
//       
//       * ФормироватьСразу - Булево - Значение по умолчанию для флажка "Формировать сразу".
//           Когда флажок включен, то отчет будет формироваться:
//             - После открытия;
//             - После выбора пользовательских настроек;
//             - После выбора другого варианта отчета.
//       
//       * ВыводитьСуммуВыделенныхЯчеек - Булево - Если Истина, то в отчете будет выводиться поле автосуммы.
//       
//       * СоответствиеПериодичностиПараметров - Соответствие - Ограничение списка выбора полей "СтандартныйПериод".
//           ** Ключ - ПараметрКомпоновкиДанных - Имя параметра отчета, к которому применятся ограничение.
//           ** Значение - ПеречислениеСсылка.ДоступныеПериодыОтчета - Ограничение периода отчета "снизу".
//       
//       * Печать - Структура - Параметры печати табличного документа "по умолчанию".
//           ** ПолеСверху - Число - Отступ сверху при печати (в миллиметрах).
//           ** ПолеСлева  - Число - Отступ слева  при печати (в миллиметрах).
//           ** ПолеСнизу  - Число - Отступ снизу  при печати (в миллиметрах).
//           ** ПолеСправа - Число - Отступ справа при печати (в миллиметрах).
//           ** ОриентацияСтраницы - ОриентацияСтраницы - "Портрет" или "Ландшафт".
//           ** АвтоМасштаб - Булево - Автоматически подгонять масштаб под размер страницы.
//           ** МасштабПечати - Число - Масштаб изображения (в процентах).
//       
//       * События - Структура - События, для которых определены обработчики в модуле объекта отчета.
//           
//           ** ПриСозданииНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   Отказ - Передается из параметров обработчика "как есть".
//               //   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//               //
//               // См. также:
//               //   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗагрузкойВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеПользовательскихНастроекНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//               //       Пользовательские настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗаполнениемПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается до перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПослеЗаполненияПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается после перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** КонтекстныйВызовСервера - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Обработчик контекстного вызова сервера.
//               //   Позволяет выполнить контекстный вызов сервера когда это требуется из клиентского общего модуля.
//               //   Например, из ФормаОтчетаКлиентПереопределяемый.ОбработчикКоманды().
//               //
//               // Параметры:
//               //   Форма  - УправляемаяФорма
//               //   Ключ      - Строка    - Ключ операции, которую необходимо выполнить в контекстном вызове.
//               //   Параметры - Структура - Параметры вызова сервера.
//               //   Результат - Структура - Результат работы сервера, возвращается на клиент.
//               //
//               // См. также:
//               //   ОбщаяФорма.ФормаОтчета.ВыполнитьКонтекстныйВызовСервера().
//               //
//               Процедура КонтекстныйВызовСервера(Форма, Ключ, Параметры, Результат) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриОпределенииПараметровВыбора - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в форме отчета перед выводом настройки.
//               //   Подробнее - см. ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора()
//               //
//               Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ДополнитьСвязиОбъектовМетаданных - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Дополнительные связи настроек этого отчета.
//               //   Подробнее - см. ФормаОтчетаПереопределяемый.ДополнитьСвязиОбъектовМетаданных()
//               //
//               Процедура ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	Печать = Новый Структура;
	Печать.Вставить("ПолеСверху", 10);
	Печать.Вставить("ПолеСлева", 10);
	Печать.Вставить("ПолеСнизу", 10);
	Печать.Вставить("ПолеСправа", 10);
	Печать.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	Печать.Вставить("АвтоМасштаб", Истина);
	Печать.Вставить("МасштабПечати", Неопределено);
	
	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере", Ложь);
	События.Вставить("ПередЗагрузкойВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере", Ложь);
	События.Вставить("ПередЗаполнениемПанелиБыстрыхНастроек", Ложь);
	События.Вставить("ПослеЗаполненияПанелиБыстрыхНастроек", Ложь);
	События.Вставить("КонтекстныйВызовСервера", Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора", Ложь);
	События.Вставить("ДополнитьСвязиОбъектовМетаданных", Ложь);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ФормироватьСразу", Ложь);
	Настройки.Вставить("ВыводитьСуммуВыделенныхЯчеек", Истина);
	Настройки.Вставить("СоответствиеПериодичностиПараметров", Новый Соответствие);
	Настройки.Вставить("Печать", Печать);
	Настройки.Вставить("События", События);
	
	// Устарели:
	Настройки.Вставить("ПараметрыПечатиПоУмолчанию", Печать); // См. Настройки.Печать.
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует краткое представление ошибки.
//
// Параметры:
//   ИнформацияОбОшибке - ИнформацияОбОшибке - Информация об ошибке.
//
// Возвращаемое значение:
//   Строка - Краткое представление ошибки.
//
Функция КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке) Экспорт
	
	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Пока ПричинаОшибки <> Неопределено Цикл
		ОписаниеОшибки = ПричинаОшибки.Описание;
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит доступную настройку для отбора или параметра.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ОбщаяНастройка - ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных,
//       НастройкиВложенногоОбъектаКомпоновкиДанных - Значение элемента настройки.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, ДоступныйПараметрКомпоновкиДанных, ДоступныйОбъектНастройкиКомпоновкиДанных - Доступная настройка.
//   Неопределено - Если доступная настройка не найдена.
//
Функция НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка) Экспорт
	ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
	Если ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат НайтиДоступноеПолеКД(НастройкиКД, ОбщаяНастройка.ЛевоеЗначение);
	ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат НайтиДоступныйПараметрКД(НастройкиКД, ОбщаяНастройка.Параметр);
	ИначеЕсли ТипОбщейНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат НастройкиКД.ДоступныеОбъекты.Элементы.Найти(ОбщаяНастройка.ИдентификаторОбъекта);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку поля компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПолеКД - ПолеКомпоновкиДанных - Имя поля.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, Неопределено - Доступная настройка для поля.
//
Функция НайтиДоступноеПолеКД(НастройкиКД, ПолеКД) Экспорт
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку параметра компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПараметрКД - ПараметрКомпоновкиДанных - Имя параметра.
//
// Возвращаемое значение:
//   ДоступныйПараметрКомпоновкиДанных, Неопределено - Доступная настройка для параметра.
//
Функция НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД) Экспорт
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Коллекция пользовательских настроек.
//   Идентификатор - Строка -
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит вложенную пользовательскую настройку по ее идентификатору.
Функция НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройка, Идентификатор) Экспорт
	
	Для Каждого ВложеннаяНастройка Из ПользовательскаяНастройка.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ВложеннаяНастройка)) = Идентификатор Тогда
			Возврат ВложеннаяНастройка;
		КонецЕсли;
		Если ТипЗнч(ВложеннаяНастройка) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			РезультатПоиска = НайтиПолеВыбора(ПользовательскаяНастройка, Идентификатор, ВложеннаяНастройка);
			Если РезультатПоиска <> Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает доступное поле компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Поле           - Имя поля компоновки данных
//
Функция ПолучитьДоступноеПоле(ДоступныеПоля, Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеДоступа = Новый ПолеКомпоновкиДанных(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		ПолеДоступа = Поле;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПоля.НайтиПоле(ПолеДоступа);
	
КонецФункции

// Функция возвращает доступный параметр компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Параметр       - Имя параметра компоновки данных
//
Функция ПолучитьДоступныйПараметр(ДоступныеПараметры, Параметр) Экспорт
	
	Если ТипЗнч(ДоступныеПараметры) <> Тип("ДоступныеПараметрыКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		ПараметрДоступа = Новый ПараметрКомпоновкиДанных(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных") Тогда
		ПараметрДоступа = Параметр;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПараметры.НайтиПараметр(ПараметрДоступа);
	
КонецФункции

// Загружает значения элемента настроек в таблицу.
Процедура ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ЭлементВыбора, ДобавлятьИерархическиеПоля, Отступ = "") Экспорт
	
	Для каждого ПолеВыбора Из ЭлементВыбора.Элементы Цикл
		Заголовок = ПолеВыбора.Заголовок;
		Если Заголовок = "" Тогда
			ДоступноеПоле = ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ПолеВыбора.Поле);
			Если ДоступноеПоле <> Неопределено Тогда
				Заголовок = ДоступноеПоле.Заголовок;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаПоляВыбора = Таблица.Добавить();
		СтрокаПоляВыбора.Представление = Отступ + Заголовок;
		СтрокаПоляВыбора.Использование = ПолеВыбора.Использование;
		СтрокаПоляВыбора.Идентификатор = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора));
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СтрокаПоляВыбора.ЭтоГруппа = Истина;
		КонецЕсли;
		Если ДобавлятьИерархическиеПоля И ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") И ПолеВыбора.Элементы.Количество() > 0 Тогда
			ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ПолеВыбора, Истина, Отступ + "    ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список периодов в диапазоне периода.
Функция ПолучитьСтруктуруОтборов(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	Если ТипОтбора = Неопределено И (СтрокаТипаОтбора = Неопределено Или СтрокаТипаОтбора = "") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено И СтрокаТипаОтбора <> Неопределено И СтрокаТипаОтбора = "" Тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	// Получим таблицу связей 
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи Из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора Тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим отборы и параметры из элементов настройки отчета по таблице связей полей
	Для Каждого СтрокаСвязи Из МассивСтрокСвязи Цикл
		ЭлементНастройки = НайтиПользовательскуюНастройку(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ЭлементНастройки = Неопределено Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеОтбора = НеОпределено;
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.Значение;
		КонецЕсли;
		Если ЗначениеОтбора <> НеОпределено Тогда
			ПараметрВыбораИмена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвязи.РеквизитПоля, ".");
			Если ПараметрВыбораИмена.Количество() = 1 Тогда
				СтруктураПараметров.Вставить(ПараметрВыбораИмена[0], ЗначениеОтбора);
			ИначеЕсли ПараметрВыбораИмена[0] = "Отбор" Тогда
				Если Не СтруктураПараметров.Свойство("Отбор") Тогда
					СтруктураПараметров.Вставить("Отбор", Новый Структура());
				КонецЕсли;
				СтруктураПараметров.Отбор.Вставить(ПараметрВыбораИмена[1], ЗначениеОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Добавляет выбранное поле компоновки данных.
//
// Параметры:
//   Куда - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных -
//       Коллекция в которую требуется добавить выбранное поле.
//   ИмяИлиПолеКД - Строка, ПолеКомпоновкиДанных - Имя поля.
//   Заголовок    - Строка - Необязательный. Представление поля.
//
// Возвращаемое значение:
//   ВыбранноеПолеКомпоновкиДанных - Добавленное выбранное поле.
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек 
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию Истина)
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	Возврат СписокПолей;
	
КонецФункции

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ИмяПараметра          - Строка - Имя параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных - Пользовательская настройка параметра.
//   Неопределено - Если параметр не найден.
//
Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

// Возвращает список полей группировок всех группировок компоновщика настроек
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек)
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Приводит значение типа ИспользованиеГруппИЭлементов к типу ГруппыИЭлементы.
//  Для других типов возвращает значение Авто.
//
Функция ПривестиЗначениеКТипуГруппыИЭлементы(ИсходноеЗначение) Экспорт
	Если ИсходноеЗначение = ИспользованиеГруппИЭлементов.Элементы Тогда
		Возврат ГруппыИЭлементы.Элементы;
	ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Возврат ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
		Возврат ГруппыИЭлементы.Группы;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ГруппыИЭлементы") Тогда
		Возврат ИсходноеЗначение;
	Иначе
		Возврат ГруппыИЭлементы.Авто;
	КонецЕсли;
КонецФункции

// Приводит значение типа ГруппыИЭлементы к типу ИспользованиеГруппИЭлементов.
//  Для значения Авто и других типов возвращает значение Неопределено.
//
Функция ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(ИсходноеЗначение) Экспорт
	Если ИсходноеЗначение = ГруппыИЭлементы.Элементы Тогда
		Возврат ИспользованиеГруппИЭлементов.Элементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.ГруппыИЭлементы Тогда
		Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Группы Тогда
		Возврат ИспользованиеГруппИЭлементов.Группы;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ИспользованиеГруппИЭлементов") Тогда
		Возврат ИсходноеЗначение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Добавляет вложенные поля группировки.
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет вложенные группировки элемента структуры.
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит выбранное поле компоновки данных по идентификатору.
Функция НайтиПолеВыбора(ЭлементНастроек, Идентификатор, Группа)
	
	НайденноеПолеВыбора = Неопределено;
	
	Для каждого ПолеВыбора Из Группа.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ПолеВыбора)) = Идентификатор Тогда
			НайденноеПолеВыбора = ПолеВыбора;
			Прервать;
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			НайденноеПолеВыбора = НайтиПолеВыбора(ЭлементНастроек, Идентификатор, ПолеВыбора);
			Если НайденноеПолеВыбора <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПолеВыбора;
КонецФункции

// Находит общую настройку компоновки данных по идентификатору.
Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);
		
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы с механизмом периодичности

// Возвращает дату начала периода.
Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
Функция КонецПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает список периодов в диапазоне начала периода.
Функция СписокФиксированныхПериодов(Знач НачалоПериода, ВидПериода) Экспорт
	СписокПериодов = Новый СписокЗначений;
	
	Если НачалоПериода = '00010101' Тогда
		Возврат СписокПериодов;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(НачалоПериода);
	ВыборОтносительногоПериода = (НачалоПериода = "ВыборОтносительногоПериода");
	ПоказыватьВсеОтносительныеПериоды = Ложь;
	
	#Если Клиент Тогда
		Сегодня = ОбщегоНазначенияКлиент.ДатаСеанса();
	#Иначе
		Сегодня = ТекущаяДатаСеанса();
	#КонецЕсли
	Сегодня = НачалоДня(Сегодня);
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		ТекущийДеньНедели   = ДеньНедели(Сегодня);
		ВыбранныйДеньНедели = ДеньНедели(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		НачальныйДеньНедели = ТекущийДеньНедели - 5;
		КонечныйДеньНедели  = ТекущийДеньНедели + 1;
		Если ВыбранныйДеньНедели > КонечныйДеньНедели Тогда
			ВыбранныйДеньНедели = ВыбранныйДеньНедели - 7;
		КонецЕсли;
		
		Период = НачалоПериода - 86400 * (ВыбранныйДеньНедели - НачальныйДеньНедели);
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		НачалоПредыдущегоПериода = Период - 86400 * 7;
		КонецПредыдущегоПериода = Период - 86400;
		Если Месяц(НачалоПредыдущегоПериода) = Месяц(КонецПредыдущегоПериода) Тогда
			НачалоПредыдущегоПериодаФормат = "ДФ='dd'"; // Месяц и год совпадают.
		ИначеЕсли Год(НачалоПредыдущегоПериода) = Год(КонецПредыдущегоПериода) Тогда
			НачалоПредыдущегоПериодаФормат = "ДФ='dd MMMM'"; // Неделя на стыке двух месяцев одного года.
		Иначе
			НачалоПредыдущегоПериодаФормат = "ДФ='dd MMMM yyyy'"; // Неделя начинается в одном году и заканчивается в другом.
		КонецЕсли;
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, Формат(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаФормат) + " - " + Формат(КонецПредыдущегоПериода, "ДФ='dd MMMM yyyy'") + "...");
		
		// Добавление значений.
		Для Счетчик = 1 По 7 Цикл
			СписокПериодов.Добавить(Период, Формат(Период, "ДФ='dd MMMM yyyy, dddd'") + ?(Период = Сегодня, " - " + НСтр("ru = 'сегодня'"), ""));
			Период = Период + 86400;
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		НачалоСледующегоПериода = Период;
		КонецСледующегоПериода = Период + 86400 * 6;
		Если Месяц(НачалоСледующегоПериода) = Месяц(КонецСледующегоПериода) Тогда
			НачалоСледующегоПериодаФормат = "ДФ='dd'"; // Месяц и год совпадают.
		ИначеЕсли Год(НачалоСледующегоПериода) = Год(КонецСледующегоПериода) Тогда
			НачалоСледующегоПериодаФормат = "ДФ='dd MMMM'"; // Неделя на стыке двух месяцев одного года.
		Иначе
			НачалоСледующегоПериодаФормат = "ДФ='dd MMMM yyyy'"; // Неделя начинается в одном году и заканчивается в другом.
		КонецЕсли;
		СписокПериодов.Добавить(КонецСледующегоПериода, Формат(НачалоСледующегоПериода, НачалоСледующегоПериодаФормат) + " - " + Формат(КонецСледующегоПериода, "ДФ='dd MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		ТекущееНачалоНедели   = НачалоНедели(Сегодня);
		ВыбранноеНачалоНедели = НачалоНедели(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		РазностьНедель = (ВыбранноеНачалоНедели - ТекущееНачалоНедели) / 604800;
		Коэффициент = (РазностьНедель - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальнаяНеделя = ТекущееНачалоНедели + (2 + Коэффициент*7) * 604800;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		НачалоПредыдущегоПериода = НачальнаяНеделя - 7 * 604800;
		КонецПредыдущегоПериода = НачальнаяНеделя - 1;
		Если Год(НачалоПредыдущегоПериода) = Год(КонецПредыдущегоПериода) Тогда
			НачалоПредыдущегоПериодаФормат = "ДФ=dd.MM";
		Иначе
			НачалоПредыдущегоПериодаФормат = "ДЛФ=D";
		КонецЕсли;
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, Формат(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаФормат) + " - " + Формат(КонецПредыдущегоПериода, "ДЛФ=D") + "...");
		
		// Добавление значений.
		Для Счетчик = 0 По 6 Цикл
			Период = НачальнаяНеделя + Счетчик * 604800;
			КонецПериода  = КонецНедели(Период);
			ПредставлениеПериода = Формат(Период, "ДФ=dd.MM") + " - " + Формат(КонецПериода, "ДЛФ=D") + " (" + НеделяГода(КонецПериода) + " " + НСтр("ru = 'неделя года'") + ")";
			Если Период = ТекущееНачалоНедели Тогда
				ПредставлениеПериода = ПредставлениеПериода + " - " + НСтр("ru = 'эта неделя'");
			КонецЕсли;
			СписокПериодов.Добавить(Период, ПредставлениеПериода);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		НачалоСледующегоПериода = НачальнаяНеделя + 7 * 604800;
		КонецСледующегоПериода = НачалоСледующегоПериода + 6 * 604800;
		Если Год(НачалоСледующегоПериода) = Год(КонецСледующегоПериода) Тогда
			НачалоСледующегоПериодаФормат = "ДФ=dd.MM";
		Иначе
			НачалоСледующегоПериодаФормат = "ДЛФ=D";
		КонецЕсли;
		СписокПериодов.Добавить(КонецСледующегоПериода, Формат(НачалоСледующегоПериода, НачалоСледующегоПериодаФормат) + " - " + Формат(КонецСледующегоПериода, "ДЛФ=D") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		ТекущийГод   = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийМесяц   = Месяц(Сегодня);
		ВыбранныйМесяц = Месяц(НачалоПериода);
		ТекущийДень   = День(Сегодня);
		ВыбранныйДень = День(НачалоПериода);
		ТекущаяДекада   = ?(ТекущийДень   <= 10, 1, ?(ТекущийДень   <= 20, 2, 3));
		ВыбраннаяДекада = ?(ВыбранныйДень <= 10, 1, ?(ВыбранныйДень <= 20, 2, 3));
		ТекущаяДекадаАбсолютно   = ТекущийГод*36 + (ТекущийМесяц-1)*3 + (ТекущаяДекада-1);
		ВыбраннаяДекадаАбсолютно = ВыбранныйГод*36 + (ВыбранныйМесяц-1)*3 + (ВыбраннаяДекада-1);
		СтрокаДекада = НСтр("ru = 'декада'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбраннаяДекадаАбсолютно - ТекущаяДекадаАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальнаяДекада = ТекущаяДекадаАбсолютно + 2 + Коэффициент*7;
		КонечнаяДекада  = НачальнаяДекада + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Переменная = НачальнаяДекада - 7;
		НачалоПредыдущегоПериодаГод = Цел(Переменная/36);
		Переменная = Переменная - НачалоПредыдущегоПериодаГод*36;
		НачалоПредыдущегоПериодаМесяц = Цел(Переменная/3) + 1;
		НачалоПредыдущегоПериодаДекада = Переменная - (НачалоПредыдущегоПериодаМесяц-1)*3 + 1;
		НачалоПредыдущегоПериода = Дата(НачалоПредыдущегоПериодаГод, НачалоПредыдущегоПериодаМесяц, НачалоПредыдущегоПериодаДекада*10 - 9);
		НачалоПредыдущегоПериодаПредставление = Формат(НачалоПредыдущегоПериода, "ДФ='yyyy.MM'") + "." + Лев("III", НачалоПредыдущегоПериодаДекада);
		Переменная = НачальнаяДекада - 1;
		КонецПредыдущегоПериодаГод = Цел(Переменная/36);
		Переменная = Переменная - КонецПредыдущегоПериодаГод*36;
		КонецПредыдущегоПериодаМесяц = Цел(Переменная/3) + 1;
		КонецПредыдущегоПериодаДекада = Переменная - (КонецПредыдущегоПериодаМесяц-1)*3 + 1;
		КонецПредыдущегоПериода = Дата(КонецПредыдущегоПериодаГод, КонецПредыдущегоПериодаМесяц, КонецПредыдущегоПериодаДекада*10 - 9);
		КонецПредыдущегоПериодаПредставление = Формат(КонецПредыдущегоПериода, "ДФ='yyyy.MM'") + "." + Лев("III", КонецПредыдущегоПериодаДекада);
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаПредставление + " - " + КонецПредыдущегоПериодаПредставление + "...");
		
		// Добавление значений.
		Для Счетчик = НачальнаяДекада По КонечнаяДекада Цикл
			Год = Цел(Счетчик/36);
			Переменная = Счетчик - Год*36;
			Месяц = Цел(Переменная/3) + 1;
			Декада = Переменная - (Месяц-1)*3 + 1;
			Период = Дата(Год, Месяц, (Декада - 1) * 10 + 1);
			Представление = Формат(Период, "ДФ='MMMM yyyy'") + ", " + Лев("III", Декада) + " " + СтрокаДекада + ?(Счетчик = ТекущаяДекадаАбсолютно, " - " + НСтр("ru = 'эта декада'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Переменная = КонечнаяДекада + 1;
		НачалоСледующегоПериодаГод = Цел(Переменная/36);
		Переменная = Переменная - НачалоСледующегоПериодаГод*36;
		НачалоСледующегоПериодаМесяц = Цел(Переменная/3) + 1;
		НачалоСледующегоПериодаДекада = Переменная - (НачалоСледующегоПериодаМесяц-1)*3 + 1;
		НачалоСледующегоПериода = Дата(НачалоСледующегоПериодаГод, НачалоСледующегоПериодаМесяц, НачалоСледующегоПериодаДекада*10 - 9);
		НачалоСледующегоПериодаПредставление = Формат(НачалоСледующегоПериода, "ДФ='yyyy.MM'") + "." + Лев("III", НачалоСледующегоПериодаДекада);
		Переменная = КонечнаяДекада + 7;
		КонецСледующегоПериодаГод = Цел(Переменная/36);
		Переменная = Переменная - КонецСледующегоПериодаГод*36;
		КонецСледующегоПериодаМесяц = Цел(Переменная/3) + 1;
		КонецСледующегоПериодаДекада = Переменная - (КонецСледующегоПериодаМесяц-1)*3 + 1;
		КонецСледующегоПериода = Дата(КонецСледующегоПериодаГод, КонецСледующегоПериодаМесяц, КонецСледующегоПериодаДекада*10 - 9);
		КонецСледующегоПериодаПредставление = Формат(КонецСледующегоПериода, "ДФ='yyyy.MM'") + "." + Лев("III", КонецСледующегоПериодаДекада);
		СписокПериодов.Добавить(НачалоСледующегоПериода, НачалоСледующегоПериодаПредставление + " - " + КонецСледующегоПериодаПредставление + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		ТекущийГод   = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийМесяц   = ТекущийГод*12   + Месяц(Сегодня);
		ВыбранныйМесяц = ВыбранныйГод*12 + Месяц(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйМесяц - ТекущийМесяц - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйМесяц = ТекущийМесяц + 2 + Коэффициент*7;
		КонечныйМесяц  = НачальныйМесяц + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Счетчик = НачальныйМесяц - 7;
		НачалоПредыдущегоПериодаГод = Цел((Счетчик - 1) / 12);
		НачалоПредыдущегоПериодаМесяц = Счетчик - НачалоПредыдущегоПериодаГод * 12;
		НачалоПредыдущегоПериода = Дата(НачалоПредыдущегоПериодаГод, НачалоПредыдущегоПериодаМесяц, 1);
		Счетчик = НачальныйМесяц - 1;
		КонецПредыдущегоПериодаГод = Цел((Счетчик - 1) / 12);
		КонецПредыдущегоПериодаМесяц = Счетчик - КонецПредыдущегоПериодаГод * 12;
		КонецПредыдущегоПериода = Дата(КонецПредыдущегоПериодаГод, КонецПредыдущегоПериодаМесяц, 1);
		Если НачалоПредыдущегоПериодаГод = КонецПредыдущегоПериодаГод Тогда
			НачалоПредыдущегоПериодаФормат = "ДФ=MMMM";
		Иначе
			НачалоПредыдущегоПериодаФормат = "ДФ='MMMM yyyy'";
		КонецЕсли;
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, Формат(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаФормат) + " - " + Формат(КонецПредыдущегоПериода, "ДФ='MMMM yyyy'") + "...");
		
		// Добавление значений.
		Для Счетчик = НачальныйМесяц По КонечныйМесяц Цикл
			Год = Цел((Счетчик - 1) / 12);
			Месяц = Счетчик - Год * 12;
			Период = Дата(Год, Месяц, 1);
			СписокПериодов.Добавить(Период, Формат(Период, "ДФ='MMMM yyyy'") + ?(Год = ТекущийГод И ТекущийМесяц = Счетчик, " - " + НСтр("ru = 'этот месяц'"), ""));
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Счетчик = КонечныйМесяц + 1;
		НачалоСледующегоПериодаГод = Цел((Счетчик - 1) / 12);
		НачалоСледующегоПериодаМесяц = Счетчик - НачалоСледующегоПериодаГод * 12;
		НачалоСледующегоПериода = Дата(НачалоСледующегоПериодаГод, НачалоСледующегоПериодаМесяц, 1);
		Счетчик = КонечныйМесяц + 7;
		КонецСледующегоПериодаГод = Цел((Счетчик - 1) / 12);
		КонецСледующегоПериодаМесяц = Счетчик - КонецСледующегоПериодаГод * 12;
		КонецСледующегоПериода = Дата(КонецСледующегоПериодаГод, КонецСледующегоПериодаМесяц, 1);
		Если НачалоСледующегоПериодаГод = КонецСледующегоПериодаГод Тогда
			НачалоСледующегоПериодаФормат = "ДФ=MMMM";
		Иначе
			НачалоСледующегоПериодаФормат = "ДФ='MMMM yyyy'";
		КонецЕсли;
		СписокПериодов.Добавить(КонецСледующегоПериода, Формат(НачалоСледующегоПериода, НачалоСледующегоПериодаФормат) + " - " + Формат(КонецСледующегоПериода, "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийКвартал   = 1 + Цел((Месяц(Сегодня)-1)/3);
		ВыбранныйКвартал = 1 + Цел((Месяц(НачалоПериода)-1)/3);
		ТекущийКварталАбсолютно   = ТекущийГод*4   + ТекущийКвартал   - 1;
		ВыбранныйКварталАбсолютно = ВыбранныйГод*4 + ВыбранныйКвартал - 1;
		СтрокаКвартал = НСтр("ru = 'квартал'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйКварталАбсолютно - ТекущийКварталАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйКвартал = ТекущийКварталАбсолютно + 2 + Коэффициент*7;
		КонечныйКвартал  = НачальныйКвартал + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Переменная = НачальныйКвартал - 7;
		НачалоПредыдущегоПериодаГод = Цел(Переменная/4);
		НачалоПредыдущегоПериодаКвартал = Переменная - НачалоПредыдущегоПериодаГод*4 + 1;
		НачалоПредыдущегоПериодаМесяц = (НачалоПредыдущегоПериодаКвартал-1)*3 + 1;
		НачалоПредыдущегоПериода = Дата(НачалоПредыдущегоПериодаГод, НачалоПредыдущегоПериодаМесяц, 1);
		НачалоПредыдущегоПериодаПредставление = ?(НачалоПредыдущегоПериодаКвартал = 4, "IV", Лев("III", НачалоПредыдущегоПериодаКвартал)) + " " + СтрокаКвартал + " " + Формат(НачалоПредыдущегоПериода, "ДФ='yyyy'");
		Переменная = НачальныйКвартал - 1;
		КонецПредыдущегоПериодаГод = Цел(Переменная/4);
		КонецПредыдущегоПериодаКвартал = Переменная - КонецПредыдущегоПериодаГод*4 + 1;
		КонецПредыдущегоПериодаМесяц = (КонецПредыдущегоПериодаКвартал-1)*3 + 1;
		КонецПредыдущегоПериода = Дата(КонецПредыдущегоПериодаГод, КонецПредыдущегоПериодаМесяц, 1);
		КонецПредыдущегоПериодаПредставление = ?(КонецПредыдущегоПериодаКвартал = 4, "IV", Лев("III", КонецПредыдущегоПериодаКвартал)) + " " + СтрокаКвартал + " " + Формат(КонецПредыдущегоПериода, "ДФ='yyyy'");
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаПредставление + " - " + КонецПредыдущегоПериодаПредставление + "...");
		
		// Добавление значений.
		Для Счетчик = НачальныйКвартал По КонечныйКвартал Цикл
			Год = Цел(Счетчик/4);
			Квартал = Счетчик - Год*4 + 1;
			Месяц = (Квартал-1)*3 + 1;
			Период = Дата(Год, Месяц, 1);
			Представление = ?(Квартал = 4, "IV", Лев("III", Квартал)) + " " + СтрокаКвартал + " " + Формат(Период, "ДФ='yyyy'") + ?(Счетчик = ТекущийКварталАбсолютно, " - " + НСтр("ru = 'этот квартал'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Переменная = КонечныйКвартал + 1;
		НачалоСледующегоПериодаГод = Цел(Переменная/4);
		НачалоСледующегоПериодаКвартал = Переменная - НачалоСледующегоПериодаГод*4 + 1;
		НачалоСледующегоПериодаМесяц = (НачалоСледующегоПериодаКвартал-1)*3 + 1;
		НачалоСледующегоПериода = Дата(НачалоСледующегоПериодаГод, НачалоСледующегоПериодаМесяц, 1);
		НачалоСледующегоПериодаПредставление = ?(НачалоСледующегоПериодаКвартал = 4, "IV", Лев("III", НачалоСледующегоПериодаКвартал)) + " " + СтрокаКвартал + " " + Формат(НачалоСледующегоПериода, "ДФ='yyyy'");
		Переменная = КонечныйКвартал + 7;
		КонецСледующегоПериодаГод = Цел(Переменная/4);
		КонецСледующегоПериодаКвартал = Переменная - КонецСледующегоПериодаГод*4 + 1;
		КонецСледующегоПериодаМесяц = (КонецСледующегоПериодаКвартал-1)*3 + 1;
		КонецСледующегоПериода = Дата(КонецСледующегоПериодаГод, КонецСледующегоПериодаМесяц, 1);
		КонецСледующегоПериодаПредставление = ?(КонецСледующегоПериодаКвартал = 4, "IV", Лев("III", КонецСледующегоПериодаКвартал)) + " " + СтрокаКвартал + " " + Формат(КонецСледующегоПериода, "ДФ='yyyy'");
		СписокПериодов.Добавить(НачалоСледующегоПериода, НачалоСледующегоПериодаПредставление + " - " + КонецСледующегоПериодаПредставление + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущееПолугодие   = 1 + Цел((Месяц(Сегодня)-1)/6);
		ВыбранноеПолугодие = 1 + Цел((Месяц(НачалоПериода)-1)/6);
		ТекущееПолугодиеАбсолютно   = ТекущийГод*2   + ТекущееПолугодие   - 1;
		ВыбранноеПолугодиеАбсолютно = ВыбранныйГод*2 + ВыбранноеПолугодие - 1;
		СтрокаПолугодие = НСтр("ru = 'полугодие'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранноеПолугодиеАбсолютно - ТекущееПолугодиеАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальноеПолугодие = ТекущееПолугодиеАбсолютно + 2 + Коэффициент*7;
		КонечноеПолугодие  = НачальноеПолугодие + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Переменная = НачальноеПолугодие - 7;
		НачалоПредыдущегоПериодаГод = Цел(Переменная/2);
		НачалоПредыдущегоПериодаПолугодие = Переменная - НачалоПредыдущегоПериодаГод*2 + 1;
		НачалоПредыдущегоПериодаМесяц = (НачалоПредыдущегоПериодаПолугодие-1)*6 + 1;
		НачалоПредыдущегоПериода = Дата(НачалоПредыдущегоПериодаГод, НачалоПредыдущегоПериодаМесяц, 1);
		НачалоПредыдущегоПериодаПредставление = Лев("II", НачалоПредыдущегоПериодаПолугодие) + " " + СтрокаПолугодие + " " + Формат(НачалоПредыдущегоПериода, "ДФ='yyyy'");
		Переменная = НачальноеПолугодие - 1;
		КонецПредыдущегоПериодаГод = Цел(Переменная/2);
		КонецПредыдущегоПериодаПолугодие = Переменная - КонецПредыдущегоПериодаГод*2 + 1;
		КонецПредыдущегоПериодаМесяц = (КонецПредыдущегоПериодаПолугодие-1)*6 + 1;
		КонецПредыдущегоПериода = Дата(КонецПредыдущегоПериодаГод, КонецПредыдущегоПериодаМесяц, 1);
		КонецПредыдущегоПериодаПредставление = Лев("II", КонецПредыдущегоПериодаПолугодие) + " " + СтрокаПолугодие + " " + Формат(КонецПредыдущегоПериода, "ДФ='yyyy'");
		СписокПериодов.Добавить(НачалоПредыдущегоПериода, НачалоПредыдущегоПериодаПредставление + " - " + КонецПредыдущегоПериодаПредставление + "...");
		
		// Добавление значений.
		Для Счетчик = НачальноеПолугодие По КонечноеПолугодие Цикл
			Год = Цел(Счетчик/2);
			Полугодие = Счетчик - Год*2 + 1;
			Месяц = (Полугодие-1)*6 + 1;
			Период = Дата(Год, Месяц, 1);
			Представление = Лев("II", Полугодие) + " " + СтрокаПолугодие + " " + Формат(Период, "ДФ='yyyy'") + ?(Счетчик = ТекущееПолугодиеАбсолютно, " - " + НСтр("ru = 'это полугодие'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Переменная = КонечноеПолугодие + 1;
		НачалоСледующегоПериодаГод = Цел(Переменная/2);
		НачалоСледующегоПериодаПолугодие = Переменная - НачалоСледующегоПериодаГод*2 + 1;
		НачалоСледующегоПериодаМесяц = (НачалоСледующегоПериодаПолугодие-1)*6 + 1;
		НачалоСледующегоПериода = Дата(НачалоСледующегоПериодаГод, НачалоСледующегоПериодаМесяц, 1);
		НачалоСледующегоПериодаПредставление = Лев("II", НачалоСледующегоПериодаПолугодие) + " " + СтрокаПолугодие + " " + Формат(НачалоСледующегоПериода, "ДФ='yyyy'");
		Переменная = КонечноеПолугодие + 7;
		КонецСледующегоПериодаГод = Цел(Переменная/2);
		КонецСледующегоПериодаПолугодие = Переменная - КонецСледующегоПериодаГод*2 + 1;
		КонецСледующегоПериодаМесяц = (КонецСледующегоПериодаПолугодие-1)*6 + 1;
		КонецСледующегоПериода = Дата(КонецСледующегоПериодаГод, КонецСледующегоПериодаМесяц, 1);
		КонецСледующегоПериодаПредставление = Лев("II", КонецСледующегоПериодаПолугодие) + " " + СтрокаПолугодие + " " + Формат(КонецСледующегоПериода, "ДФ='yyyy'");
		СписокПериодов.Добавить(НачалоСледующегоПериода, НачалоСледующегоПериодаПредставление + " - " + КонецСледующегоПериодаПредставление + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйГод - ТекущийГод - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйГод = ТекущийГод + 2 + Коэффициент*7;
		КонечныйГод = НачальныйГод + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		СписокПериодов.Добавить(Дата(НачальныйГод-7, 1, 1), Формат(НачальныйГод-7, "ЧГ=") + " - " + Формат(НачальныйГод-1, "ЧГ=") + "...");
		
		// Добавление значений.
		Для Год = НачальныйГод По КонечныйГод Цикл
			СписокПериодов.Добавить(Дата(Год, 1, 1), Формат(Год, "ЧГ=") + ?(Год = ТекущийГод, " - " + НСтр("ru = 'этот год'"), ""));
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		СписокПериодов.Добавить(Дата(КонечныйГод+7, 1, 1), Формат(КонечныйГод+1, "ЧГ=") + " - " + Формат(КонечныйГод+7, "ЧГ=") + "...");
		
	КонецЕсли;
	
	Возврат СписокПериодов;
КонецФункции

// Возвращает список периодов в диапазоне начала периода.
Функция СписокВычисляемыхПериодов(ВидПериода) Экспорт
	СписокПериодов = Новый СписокЗначений;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Вчера);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Сегодня);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Завтра);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Последние7Дней);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтаНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтойНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтойНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Следующие7Дней);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтаДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтойДекады);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтойДекады);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Месяц, НСтр("ru = 'С такой же даты прошлого месяца'"));
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоМесяца);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоКвартала);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлоеПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтоПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующееПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоПолугодия);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоГода);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоГода);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты);
	КонецЕсли;
	
	Возврат СписокПериодов;
КонецФункции

// Возвращает представление периода, используя его вид и указанное значение.
Функция ПредставлениеСтандартногоПериода(СтандартныйПериод, ВидПериода) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц Тогда
		Возврат НСтр("ru = 'С такой же даты прошлого месяца'");
	ИначеЕсли СтандартныйПериод.Вариант <> ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат Строка(СтандартныйПериод.Вариант);
	КонецЕсли;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		Возврат Формат(СтандартныйПериод.ДатаНачала, "ДФ='dd MMMM yyyy'") + " - " + Формат(СтандартныйПериод.ДатаОкончания, "ДФ='dd MMMM yyyy'");
	КонецЕсли;
	
	СписокПериодов = СписокФиксированныхПериодов(СтандартныйПериод.ДатаНачала, ВидПериода);
	ЭлементСписка = СписокПериодов.НайтиПоЗначению(СтандартныйПериод.ДатаНачала);
	Если ЭлементСписка <> Неопределено Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Возвращает вид периода.
Функция ПолучитьВидПериода(НачалоПериода, КонецПериода, ДоступныеПериоды = Неопределено) Экспорт
	
	ВидПериода = Неопределено;
	Если НачалоПериода = НачалоДня(НачалоПериода)
		И КонецПериода = КонецДня(КонецПериода) Тогда
		
		РазностьДней = (КонецПериода - НачалоПериода + 1) / (60*60*24);
		Если РазностьДней = 1 Тогда
			
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
			
		ИначеЕсли РазностьДней = 7 Тогда
			
			Если НачалоПериода = НачалоНедели(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 11 Тогда
			
			Если (День(НачалоПериода) = 1 И День(КонецПериода) = 10)
				ИЛИ (День(НачалоПериода) = 11 И День(КонецПериода) = 20)
				ИЛИ (День(НачалоПериода) = 21 И КонецПериода = КонецМесяца(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 31 Тогда
			
			Если НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 92 Тогда
			
			Если НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 190 Тогда
			
			Если Месяц(НачалоПериода) + 5 = Месяц(КонецПериода)
				И НачалоПериода = НачалоМесяца(НачалоПериода)
				И КонецПериода = КонецМесяца(КонецПериода)
				И (НачалоПериода = НачалоГода(НачалоПериода) ИЛИ КонецПериода = КонецГода(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 366 Тогда
			
			Если НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПериода = Неопределено Тогда
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	КонецЕсли;
	
	Если ДоступныеПериоды <> Неопределено И ДоступныеПериоды.НайтиПоЗначению(ВидПериода) = Неопределено Тогда
		ВидПериода = ДоступныеПериоды[0].Значение;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Возвращает вид периода. В отличии от функции ПолучитьВидПериода на вход принимает СтандартныйПериод.
Функция ПолучитьВидСтандартногоПериода(СтандартныйПериод, ДоступныеПериоды = Неопределено) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		Возврат ПолучитьВидПериода(СтандартныйПериод.ДатаНачала, СтандартныйПериод.ДатаОкончания, ДоступныеПериоды);
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Последние7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Следующие7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Вчера
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Завтра Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
		
	КонецЕсли;
	
КонецФункции

// Возвращает доступные периоды в порядке возрастания периодичности.
Функция ПолучитьСписокДоступныхПериодов() Экспорт
	
	СписокДоступныхПериодов = Новый Массив;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

#КонецОбласти
