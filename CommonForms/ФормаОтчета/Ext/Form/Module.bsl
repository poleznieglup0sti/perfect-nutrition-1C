&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПанельОтчетовКлючВарианта = " - ";
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.КомандыЕще.Ширина = 11;
	КонецЕсли;
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	// Параметры формы
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, ОтчетСсылка, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Реквизиты
	НастройкиОтчета = ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Отбор", Новый Структура);
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	Если ВариантыОтчетовПовтИсп.ОтчетыСНастройками().Найти(ФормаПараметры.ОтчетСсылка) <> Неопределено Тогда
		ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
	КонецЕсли;
	Если ОтчетМетаданные.ХранилищеНастроек = Неопределено Тогда
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", Неопределено);
	Иначе
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", ОтчетМетаданные.ХранилищеНастроек.ПолноеИмя());
	КонецЕсли;
	
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		НастройкиОтчета.ФормироватьСразу = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаГруппа.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов
	Если Не Параметры.Свойство("ВидимостьКомандВариантовОтчетов", ВидимостьКомандВариантовОтчетов) Тогда
		ВидимостьКомандВариантовОтчетов = ВариантыОтчетовПовтИсп.ПравоДобавления();
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Скрытие кнопки выбора варианта из расшифровки.
	Если РежимРасшифровки Тогда
		Элементы.ВыбратьВариант.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			РежимРасшифровкиПредставлениеВладельца = ОтчетНаименованиеТекущегоВарианта;
		КонецЕсли;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции
	ВидимостьДоступностьКорректность();
	
	// Механизмы расширения
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Иначе
		ФормаОтчетаПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.Отправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Отправить.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.Отправить.Заголовок + "...";
	КонецЕсли;
	Если Элементы.ОтправитьВсеДействия.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьВсеДействия.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Заголовок = Элементы.ОтправитьВсеДействия.Заголовок + "...";
	КонецЕсли;
	
	ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеременныеКлиента = Новый Структура;
	СформироватьПриНеобходимости();
	Если Не Отказ Тогда
		ФормаОткрыта = Истина;
	КонецЕсли;
	ПодключитьОбработчикОжидания("СформироватьПриНеобходимости", 1, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) Экспорт
	Результат = Ложь;
	
	СуффиксФормыИсточника = ИсточникВыбора.ИмяФормы;
	ПозицияТочки = СтрДлина(СуффиксФормыИсточника);
	Пока Сред(СуффиксФормыИсточника, ПозицияТочки, 1) <> "." Цикл
		ПозицияТочки = ПозицияТочки - 1;
	КонецЦикла;
	СуффиксФормыИсточника = ВРег(Сред(СуффиксФормыИсточника, ПозицияТочки + 1));
	
	Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаНастроек") Тогда
		ИзмененияИзФормыВариантаОтчета = Ложь;
	ИначеЕсли СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
		ИзмененияИзФормыВариантаОтчета = Истина;
	Иначе
		ИзмененияИзФормыВариантаОтчета = Неопределено;
	КонецЕсли;
	
	Если ИзмененияИзФормыВариантаОтчета <> Неопределено Тогда
		БыстрыеНастройкиЗаполнить(ВыбранноеЗначение);
		СформироватьПриНеобходимости();
		Результат = Истина;
	КонецЕсли;
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, Результат);
	КонецЕсли;
	ФормаОтчетаКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ПанельОтчетовКлючВарианта = " - ";
		ВидимостьДоступностьКорректность();
		ОповещениеОбработано = Истина;
	КонецЕсли;
	
	ФормаОтчетаКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Иначе
		ФормаОтчетаПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(НастройкиОтчета.Отбор) = Тип("Структура") Тогда
		ПараметрыКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ОтборыКД = Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Для Каждого КлючИЗначение Из НастройкиОтчета.Отбор Цикл
			Имя = КлючИЗначение.Ключ;
			Значение = КлючИЗначение.Значение;
			ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
			Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрКД.ИдентификаторПользовательскойНастройки = "";
				ПараметрКД.Использование    = Истина;
				ПараметрКД.РежимОтображения = Недоступный;
				ПараметрКД.Значение         = Значение;
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, , , Истина, Недоступный, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Заполнение панели быстрых настроек
	РежимВариантаОтчета = Истина;
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Иначе
		ФормаОтчетаПереопределяемый.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	ВидимостьДоступностьКорректность("ВариантОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	Иначе
		ФормаОтчетаПереопределяемый.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если НеобходимоОбновитьНастройки Тогда
		ПриОбновленииСоставаПользовательскихНастроекНаСервере(Истина);
	Иначе
		НеобходимоОбновитьНастройки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НеобходимоОбновитьНастройки = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Событие.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.Событие.СтандартнаяОбработка <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.Событие.СтандартнаяОбработка;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	
	// Сохранение выбранных значений в дополнительных свойствах.
	Если ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ЭлементыФормы") Тогда
		ДополнительныеНастройкиЭлементов = ПользовательскиеНастройкиКД.ДополнительныеСвойства.ЭлементыФормы;
		Для Каждого КлючИЗначение Из ДополнительныеНастройкиЭлементов Цикл
			ИдентификаторЭлемента = КлючИЗначение.Ключ;
			НастройкиЭлемента = КлючИЗначение.Значение;
			ИмяРеквизита = ХранимыеСпискиВыбора.Получить(ИдентификаторЭлемента);
			Если ИмяРеквизита = Неопределено Тогда
				ДополнительныеНастройкиЭлементов.Удалить(ИдентификаторЭлемента);
				Продолжить;
			КонецЕсли;
			НастройкиЭлемента.ЗначенияДляВыбора = ЭтотОбъект[ИмяРеквизита].ВыгрузитьЗначения();
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьКомандыВыбораПользовательскихНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ПользовательскаяНастройкаКД.Использование = ЭтотОбъект[Элемент.Имя];
	
	ВсеСвязиВедущего = БыстрыйПоискОтключаемыхСвязей.Получить(ИдентификаторЭлемента);
	Если ВсеСвязиВедущего <> Неопределено Тогда
		Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Значение = ПользовательскаяНастройкаКД.Значение;
		Иначе
			Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
		КонецЕсли;
		ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, ПользовательскаяНастройкаКД.Использование, ВсеСвязиВедущего, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ЗначениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ЗначениеИмя, 32);
	СвойстваНастройкиТип = Лев(ЗначениеИмя, Найти(ЗначениеИмя, "_Значение_")-1);
	
	ИспользованиеИмя = СвойстваНастройкиТип + "_Использование_" + ИдентификаторЭлемента;
	Значение = ЭтотОбъект[ЗначениеИмя];
	
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		МассивТипов = Значение.Типы();
		Если МассивТипов.Количество() > 0 Тогда
			Значение = МассивТипов[0];
		КонецЕсли;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) И Не ПользовательскаяНастройкаКД.Использование Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
		Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
			ЭтотОбъект[ИспользованиеИмя] = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскаяНастройкаКД.Использование Тогда
		// Включение связей когда был включен флажок "Использование".
		// Когда связи включены - очистка значений при изменении значения.
		ВсеСвязиВедущего = БыстрыйПоискОтключаемыхСвязей.Получить(ИдентификаторЭлемента);
		Если ВсеСвязиВедущего <> Неопределено Тогда
			ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, ПользовательскаяНастройкаКД.Использование, ВсеСвязиВедущего, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяКолонки = Поле.Имя;
	Если Лев(ИмяКолонки, 39) = "Порядок_КолонкаПорядок_" Тогда // Изменение порядка.
		
		СтандартнаяОбработка = Ложь;
		
		ИзменитьНаправлениеСортировкиТаблицы(ИмяКолонки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_КолонкаИспользование_ПриИзменении(Элемент)
	
	КолонкаИспользованиеИмя = Элемент.Имя;
	
	ТаблицаИмя = СтрЗаменить(КолонкаИспользованиеИмя, "_КолонкаИспользование_", "_Таблица_");
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(КолонкаИспользованиеИмя);
	
	// Отражение изменений флажка элемента таблицы в соответствующей пользовательской настройке.
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		ИндексСтрокиТаблицы = ЭтотОбъект[ТаблицаИмя].Индекс(СтрокаТаблицы);
		ПолеГруппировки = ПользовательскаяНастройкаКД.Структура.Получить(ИндексСтрокиТаблицы);
		ПолеГруппировки.Использование = СтрокаТаблицы.Использование;
		ПолеГруппировки.Состояние     = СостояниеЭлементаНастройкиКомпоновкиДанных[?(СтрокаТаблицы.Использование, "Включен", "Отключен")];
	Иначе //ВыбранныеПоляКомпоновкиДанных, ПорядокКомпоновкиДанных
		СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
		Если СтрокаПользовательскойНастройки <> Неопределено Тогда
			СтрокаПользовательскойНастройки.Использование = СтрокаТаблицы.Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отмеченные");
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПараметрыФормы.Отмеченные = ЗначенияСписком(ПользовательскаяНастройкаКД.ПравоеЗначение);
	Иначе
		ПараметрыФормы.Отмеченные = ЗначенияСписком(ПользовательскаяНастройкаКД.Значение);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ДополнительныеНастройки, Истина);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	ПараметрыОбработчика.Вставить("ФлажокИмя", СтрЗаменить(Элемент.Имя, "_Значение_", "_Использование_"));
	Обработчик = Новый ОписаниеОповещения("Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора_Завершение", ЭтотОбъект, ПараметрыОбработчика);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора_Завершение(РезультатВыбора, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	ИдентификаторЭлемента = ПараметрыОбработчика.ИдентификаторЭлемента;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	
	// Загрузка выбранных значений в 2 списка.
	Отмеченные = Новый СписокЗначений;
	Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора = Новый Массив;
	КонецЕсли;
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		Значение = ЭлементСписка.Значение;
		Если ЭлементСписка.Пометка Тогда
			Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
				Значение = Значение.Типы()[0];
			КонецЕсли;
			Отмеченные.Добавить().Значение = Значение;
		ИначеЕсли Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			ДополнительныеНастройки.ЗначенияДляВыбора.Добавить(Значение); // Не отмечен, но выбран.
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.ПравоеЗначение = Отмеченные;
	Иначе
		ПользовательскаяНастройкаКД.Значение = Отмеченные;
	КонецЕсли;
	
	// Включение флажка Использование.
	ЭтотОбъект[ПараметрыОбработчика.ФлажокИмя] = Истина;
	ПользовательскаяНастройкаКД.Использование = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Вид_ПриИзменении(Элемент)
	
	ВидПериодаИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ВидПериодаИмя, 32);
	СвойстваНастройкиТип = Лев(ВидПериодаИмя, Найти(ВидПериодаИмя, "_Вид_")-1);
	
	СтраницыИмя             = СвойстваНастройкиТип + "_Страницы_"      + ИдентификаторЭлемента;
	ИспользованиеИмя        = СвойстваНастройкиТип + "_Использование_" + ИдентификаторЭлемента;
	ПериодЗначениеИмя       = СвойстваНастройкиТип + "_Значение_"      + ИдентификаторЭлемента;
	ПериодПредставлениеИмя  = СвойстваНастройкиТип + "_Представление_" + ИдентификаторЭлемента;
	СтраницаПроизвольныйИмя = СвойстваНастройкиТип + "_СтраницаПроизвольный_" + ИдентификаторЭлемента;
	СтраницаСтандартныйИмя  = СвойстваНастройкиТип + "_СтраницаСтандартный_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	ВидПериода = ЭтотОбъект[ВидПериодаИмя];
	
	ВыбранПроизвольный = ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	
	Если ВыбранПроизвольный Тогда
		
		// Переключение страницы.
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаПроизвольныйИмя];
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	Иначе
		
		// Переключение страницы.
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаСтандартныйИмя];
		
		// Приведение значения периода в соответствие с выбранным видом.
		НачалоПериода = НачалоДня(Значение.ДатаНачала);
		Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, НачалоПериода);
		КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоПериода);
		
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	Представление = ФункцииОтчетовКлиентСервер.ПредставлениеСтандартногоПериода(Значение, ВидПериода);
	ЭтотОбъект[ПериодПредставлениеИмя] = Представление;
	ЭтотОбъект[ПериодЗначениеИмя]      = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтотОбъект[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Формирование сведений по элементу.
	ПериодПредставлениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодПредставлениеИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодПредставлениеИмя, Найти(ПериодПредставлениеИмя, "_Представление_")-1);
	
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_"      + ИдентификаторЭлемента;
	ВидПериодаИмя     = СвойстваНастройкиТип + "_Вид_"           + ИдентификаторЭлемента;
	ИспользованиеИмя  = СвойстваНастройкиТип + "_Использование_" + ИдентификаторЭлемента;
	
	Значение   = ЭтотОбъект[ПериодЗначениеИмя];
	ВидПериода = ЭтотОбъект[ВидПериодаИмя];
	
	НачалоПериода = Значение.ДатаНачала;
	Если НачалоПериода = '00010101' тогда
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	// Параметры для чтения из обработчиков:
	ПараметрыВыбора = Новый Структура;
	// Для выбора значения:
	ПараметрыВыбора.Вставить("Значение",               Значение);
	ПараметрыВыбора.Вставить("Элемент",                Элемент);
	// Для загрузки значения:
	ПараметрыВыбора.Вставить("ИдентификаторЭлемента",  ИдентификаторЭлемента);
	ПараметрыВыбора.Вставить("ПериодПредставлениеИмя", ПериодПредставлениеИмя);
	ПараметрыВыбора.Вставить("ПериодЗначениеИмя",      ПериодЗначениеИмя);
	ПараметрыВыбора.Вставить("ИспользованиеИмя",       ИспользованиеИмя);
	ПараметрыВыбора.Вставить("ВидПериода",             ВидПериода);
	ПараметрыВыбора.Вставить("ЭтоПараметр",            СвойстваНастройкиТип = "ЗначениеПараметраНастроек");
	
	ВыборПериодаИзВыпадающегоСписка(-1, ПараметрыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодНачалоИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодНачалоИмя, Найти(ПериодНачалоИмя, "_Начало_")-1);
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_" + ИдентификаторЭлемента;
	ИспользованиеИмя  = СвойстваНастройкиТип + "_Использование_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	Если Значение.ДатаНачала <> '00010101' Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаНачала <> '00010101' И Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтотОбъект[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодОкончаниеИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодОкончаниеИмя, Найти(ПериодОкончаниеИмя, "_Окончание_")-1);
	
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_" + ИдентификаторЭлемента;
	ИспользованиеИмя  = СвойстваНастройкиТип + "_Использование_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	Если Значение.ДатаОкончания <> '00010101' Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаОкончания <> '00010101' И Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтотОбъект[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Список значений с кнопкой "Подбор"

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПриИзменении(Элемент)
	// Обновление выбранных значений в данных СКД.
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ТаблицаИмя = Элемент.Имя;
	ИдентификаторЭлемента = Прав(ТаблицаИмя, 32);
	
	СписокЗначенийВФорме = ЭтотОбъект[ТаблицаИмя];
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		СписокЗначенийВСКД = ПользовательскаяНастройкаКД.Значение;
	Иначе
		СписокЗначенийВСКД = ПользовательскаяНастройкаКД.ПравоеЗначение;
	КонецЕсли;
	
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора = Новый Массив;
	КонецЕсли;
	
	СписокЗначенийВСКД.Очистить();
	Для Каждого ЭлементСпискаВФорме Из СписокЗначенийВФорме Цикл
		ЗначениеВФорме = ЭлементСпискаВФорме.Значение;
		Если ЭлементСпискаВФорме.Пометка Тогда
			Если ТипЗнч(ЗначениеВФорме) = Тип("ОписаниеТипов") Тогда
				ЗначениеВСКД = ЗначениеВФорме.Типы()[0];
			Иначе
				ЗначениеВСКД = ЗначениеВФорме;
			КонецЕсли;
			ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, ЗначениеВСКД, ЭлементСпискаВФорме.Представление, Истина);
		ИначеЕсли Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			ДополнительныеНастройки.ЗначенияДляВыбора.Добавить(ЗначениеВФорме); // Не отмечен, но выбран.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Использование_ПриИзменении(Элемент)
	// Включение флажка Использование если пользователь включил флажок в строке таблицы.
	КолонкаИспользованиеИмя = Элемент.Имя;
	ИдентификаторЭлемента   = Прав(КолонкаИспользованиеИмя, 32);
	СвойстваНастройкиТип    = Лев(КолонкаИспользованиеИмя, Найти(КолонкаИспользованиеИмя, "_Колонка_Использование_")-1);
	
	ТаблицаИмя       = СвойстваНастройкиТип + "_СписокЗначений_" + ИдентификаторЭлемента;
	ИспользованиеИмя = СвойстваНастройкиТип + "_Использование_"  + ИдентификаторЭлемента;
	
	ЭлементСпискаВФорме = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если ЭлементСпискаВФорме <> Неопределено И ЭлементСпискаВФорме.Пометка Тогда
		Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
			ЭтотОбъект[ИспользованиеИмя] = Истина;
		КонецЕсли;
		ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ОбработкаВыбора(Элемент, РезультатВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	// Списки в данных формы.
	СписокЗначенийВФорме = ЭтотОбъект[Элемент.Имя];
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Элемент.Имя);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		СписокЗначенийВСКД = ЗначенияСписком(ПользовательскаяНастройкаКД.Значение);
	Иначе
		СписокЗначенийВСКД = ЗначенияСписком(ПользовательскаяНастройкаКД.ПравоеЗначение);
	КонецЕсли;
	
	// Добавление выбранных элементов с контролем уникальности.
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		Для Каждого Значение Из РезультатВыбора Цикл
			ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВФорме, Значение, Неопределено, Истина);
			ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, Значение, Неопределено, Истина);
		КонецЦикла;
	Иначе
		ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВФорме, РезультатВыбора, Неопределено, Истина);
		ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, РезультатВыбора, Неопределено, Истина);
	КонецЕсли;
	
	// Включение флажка Использование.
	ИспользованиеИмя = СтрЗаменить(Элемент.Имя, "_СписокЗначений_", "_Использование_");
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтотОбъект[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЭлементСпискаВФорме = Элемент.ТекущиеДанные;
	Если ЭлементСпискаВФорме = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокЗначенийВФорме = ЭтотОбъект[Элемент.Имя];
	
	Значение = ЭлементСпискаВФорме.Значение;
	Если Значение = Неопределено
		Или Значение = Тип("Неопределено")
		Или Значение = Новый ОписаниеТипов("Неопределено")
		Или Не ЗначениеЗаполнено(Значение) Тогда
		Отказ = Истина; // Запрет пустых значений.
	Иначе
		Для Каждого ЭлементСпискаДубльВФорме Из СписокЗначенийВФорме Цикл
			Если ЭлементСпискаДубльВФорме.Значение = Значение И ЭлементСпискаДубльВФорме <> ЭлементСпискаВФорме Тогда
				Отказ = Истина; // Запрет дублей.
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		// Перезапуск события "ПередОкончаниемРедактирования" с ОтменаРедактирования = Истина.
		Элемент.ЗакончитьРедактированиеСтроки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Подбор(Команда)
	
	КнопкаПодборИмя    = Команда.Имя;
	
	ИдентификаторЭлемента  = Прав(КнопкаПодборИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаПодборИмя, Найти(КнопкаПодборИмя, "_Подбор_")-1);
	
	ТаблицаИмя         = СвойстваНастройкиТип + "_СписокЗначений_"   + ИдентификаторЭлемента;
	КолонкаЗначениеИмя = СвойстваНастройкиТип + "_Колонка_Значение_" + ИдентификаторЭлемента;
	КоманднаяПанельИмя = СвойстваНастройкиТип + "_КоманднаяПанель_"  + ИдентификаторЭлемента;
	
	ТаблицаЗначение = ЭтотОбъект[ТаблицаИмя];
	КолонкаЗначениеЭлемент = Элементы[КолонкаЗначениеИмя];
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ИдентификаторЭлемента",  ИдентификаторЭлемента);
	ПараметрыЭлемента.Вставить("ВыбранныйТип",           Неопределено);
	ПараметрыЭлемента.Вставить("КолонкаЗначениеЭлемент", КолонкаЗначениеЭлемент);
	ПараметрыЭлемента.Вставить("ТаблицаЭлемент",         Элементы[ТаблицаИмя]);
	ПараметрыЭлемента.Вставить("ВыборТолькоГрупп",       КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы);
	
	Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.СвязьПоТипу.ПутьКДанным) Тогда
		ЗначениеВедущего = ЭтотОбъект[КолонкаЗначениеЭлемент.СвязьПоТипу.ПутьКДанным];
		Если ЗначениеЗаполнено(ЗначениеВедущего) Тогда
			ТипВедущего = ТипЗнч(ЗначениеВедущего);
			Если ТаблицаЗначение.ТипЗначения.СодержитТип(ТипВедущего) Тогда
				// Тип определен ведущим.
				ПараметрыЭлемента.ВыбранныйТип = ТипВедущего;
				ПоказатьДиалогПодбораДляСписка(ПараметрыЭлемента);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выбор типа из списка.
	СписокВыбора = Новый СписокЗначений;
	
	ПростыеТипы = Новый Соответствие;
	ПростыеТипы.Вставить(Тип("Строка"), Истина);
	ПростыеТипы.Вставить(Тип("Дата"),   Истина);
	ПростыеТипы.Вставить(Тип("Число"),  Истина);
	
	МассивТипов = ТаблицаЗначение.ТипЗначения.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		// Исключение типов, для которых нет групп.
		Если ПараметрыЭлемента.ВыборТолькоГрупп Тогда
			ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(Тип);
			ВидОбъектаМетаданных = ВРег(Лев(ИмяОбъектаМетаданных, Найти(ИмяОбъектаМетаданных, ".")-1));
			Если ВидОбъектаМетаданных <> "СПРАВОЧНИК" И ВидОбъектаМетаданных <> "ПЛАНВИДОВХАРАКТЕРИСТИК" И ВидОбъектаМетаданных <> "ПЛАНСЧЕТОВ" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Исключение простых типов.
		Если ПростыеТипы[Тип] = Истина Тогда
			Продолжить;
		КонецЕсли;
		// Добавление типа в список выбора.
		СписокВыбора.Добавить(Тип, Строка(Тип));
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		ПараметрыЭлемента.ТаблицаЭлемент.ДобавитьСтроку();
		Возврат;
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда
		// Один тип - выбор не требуется.
		ПараметрыЭлемента.ВыбранныйТип = СписокВыбора[0].Значение;
		ПоказатьДиалогПодбораДляСписка(ПараметрыЭлемента);
	Иначе
		// Более одного типа.
		Обработчик = Новый ОписаниеОповещения("Подключаемый_СписокСПодбором_Подбор_ПослеВыбораТипа", ЭтотОбъект, ПараметрыЭлемента);
		ПоказатьВыборИзМеню(Обработчик, СписокВыбора, Элементы[КоманднаяПанельИмя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Подбор_ПослеВыбораТипа(ВыбранныйЭлемент, ПараметрыЭлемента) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыЭлемента.ВыбранныйТип = ВыбранныйЭлемент.Значение;
		ПоказатьДиалогПодбораДляСписка(ПараметрыЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ВставитьИзБуфера(Команда)
	КнопкаВставитьИмя = Команда.Имя;
	
	ИдентификаторЭлемента    = Прав(КнопкаВставитьИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаВставитьИмя, Найти(КнопкаВставитьИмя, "_")-1);
	
	ИспользованиеИмя   = СвойстваНастройкиТип + "_Использование_"    + ИдентификаторЭлемента;
	ТаблицаИмя         = СвойстваНастройкиТип + "_СписокЗначений_"   + ИдентификаторЭлемента;
	КолонкаЗначениеИмя = СвойстваНастройкиТип + "_Колонка_Значение_" + ИдентификаторЭлемента;
	
	Список = ЭтотОбъект[ТаблицаИмя];
	СписокЭлемент = Элементы[ТаблицаИмя];
	КолонкаЗначениеЭлемент = Элементы[КолонкаЗначениеИмя];
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОписаниеТипов", ОписаниеТиповУдалитьПримитивные(Список.ТипЗначения));
	ПараметрыПоиска.Вставить("ПараметрыВыбора", КолонкаЗначениеЭлемент.ПараметрыВыбора);
	ПараметрыПоиска.Вставить("ПредставлениеПоля", СписокЭлемент.Заголовок);
	ПараметрыПоиска.Вставить("Сценарий", "ПоискСсылок");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	ПараметрыВыполнения.Вставить("ТаблицаИмя", ТаблицаИмя);
	ПараметрыВыполнения.Вставить("ФлажокИмя", ИспользованиеИмя);
	Обработчик = Новый ОписаниеОповещения("Подключаемый_СписокСПодбором_ВставитьИзБуфера_Завершение", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗаполненияСсылок(ПараметрыПоиска, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ВставитьИзБуфера_Завершение(НайденныеОбъекты, ПараметрыВыполнения) Экспорт
	Если НайденныеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	ИдентификаторЭлемента = ПараметрыВыполнения.ИдентификаторЭлемента;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	
	Список = ЭтотОбъект[ПараметрыВыполнения.ТаблицаИмя];
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Отмеченные = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Отмеченные = ПользовательскаяНастройкаКД.Значение;
	КонецЕсли;
	Для Каждого Значение Из НайденныеОбъекты Цикл
		ДобавитьУникальноеЗначениеВСписок(Список, Значение, Неопределено, Истина);
		ДобавитьУникальноеЗначениеВСписок(Отмеченные, Значение, Неопределено, Истина);
	КонецЦикла;
	
	// Включение флажка Использование.
	Если Элементы.Найти(ПараметрыВыполнения.ФлажокИмя) <> Неопределено Тогда
		ЭтотОбъект[ПараметрыВыполнения.ФлажокИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогПодбораДляСписка(ПараметрыЭлемента)
	КолонкаЗначениеЭлемент = ПараметрыЭлемента.КолонкаЗначениеЭлемент;
	
	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	ПутьКФорме = БыстрыйПоискИменОбъектовМетаданных.Получить(ПараметрыЭлемента.ИдентификаторЭлемента);
	Если Не ЗначениеЗаполнено(ПутьКФорме) Тогда
		ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(ПараметрыЭлемента.ВыбранныйТип);
		Если ПараметрыЭлемента.ВыборТолькоГрупп Тогда
			ВидОбъектаМетаданных = ВРег(Лев(ИмяОбъектаМетаданных, Найти(ИмяОбъектаМетаданных, ".")-1));
			Если ВидОбъектаМетаданных = "СПРАВОЧНИК" Или ВидОбъектаМетаданных = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбораГруппы";
			Иначе
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
			КонецЕсли;
		Иначе
			ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
		КонецЕсли;
	КонецЕсли;
	
	ВыборГруппИЭлементов = ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(КолонкаЗначениеЭлемент.ВыборГруппИЭлементов);
	
	ПараметрыФормыВыбора = Новый Структура;
	// Стандартные параметры формы.
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе",            Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов",          ВыборГруппИЭлементов);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор",            Истина);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	// Добавление фиксированных параметров выбора.
	Для Каждого ПараметрВыбора Из КолонкаЗначениеЭлемент.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрВыбора.Имя) Тогда
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление динамических параметров выбора (от ведущих).
	Для Каждого СвязьПараметраВыбора Из КолонкаЗначениеЭлемент.СвязиПараметровВыбора Цикл
		Если ПустаяСтрока(СвязьПараметраВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийЗначение = ЭтотОбъект[СвязьПараметраВыбора.ПутьКДанным];
		Если ВРег(Лев(СвязьПараметраВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
			ПараметрыФормыВыбора.Отбор.Вставить(Сред(СвязьПараметраВыбора.Имя, 7), ВедущийЗначение);
		Иначе
			ПараметрыФормыВыбора.Вставить(СвязьПараметраВыбора.Имя, ВедущийЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормыВыбора, ПараметрыЭлемента.ТаблицаЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Добавить(Команда)
	
	КнопкаПодборИмя = Команда.Имя;
	
	ИдентификаторЭлемента  = Прав(КнопкаПодборИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаПодборИмя, Найти(КнопкаПодборИмя, "_Подбор_") - 1);
	
	ТаблицаИмя = СвойстваНастройкиТип + "_СписокЗначений_" + ИдентификаторЭлемента;
	
	Элементы[ТаблицаИмя].ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФиксированныйСписок_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФиксированныйСписок_ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючОбъекта",               Строка(КлючОбъекта));
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ВариантСсылка",             ВариантСсылка);
	ПараметрыФормы.Вставить("НастройкиОтчета",           НастройкиОтчета);
	ПараметрыФормы.Вставить("НаименованиеОтчета",        НаименованиеОтчета);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",     Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(КлючОбъекта + ".ФормаНастроек", ПараметрыФормы, ЭтотОбъект, , , , , Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(КлючОбъекта + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
		Или ТипЗнч(ФормаПараметры.ОтчетСсылка) = Тип("Строка") Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		Если ФоновоеЗаданиеЗапустить() Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не НастройкиОтчета.ФормироватьСразу;
	НастройкиОтчета.ФормироватьСразу = ФормироватьСразу;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	КонецЕсли;
	ФормаОтчетаКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_ПереместитьВверх(Команда)
	Направление = -1;
	ТаблицаИмя = СтрЗаменить(Команда.Имя, "_Команда_ПереместитьВверх_", "_Таблица_");
	ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_ПереместитьВниз(Команда)
	Направление = 1;
	ТаблицаИмя = СтрЗаменить(Команда.Имя, "_Команда_ПереместитьВниз_", "_Таблица_");
	ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_СортироватьПоВозрастанию(Команда)
	
	// Установка направления сортировки.
	ИзменитьНаправлениеСортировкиТаблицы(Команда.Имя, НаправлениеСортировкиКомпоновкиДанных.Возр);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_СортироватьПоУбыванию(Команда)
	
	// Установка направления сортировки.
	ИзменитьНаправлениеСортировкиТаблицы(Команда.Имя, НаправлениеСортировкиКомпоновкиДанных.Убыв);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьПользовательскуюНастройку(Команда)
	КнопкаИдентификатор = Прав(Команда.Имя, 32);
	КнопкаУникальныйИдентификатор = ПривестиИмяКИдентификатору(КнопкаИдентификатор);
	НеобходимоОбновитьНастройки = Истина;
	УстановитьТекущиеПользовательскиеНастройки(КнопкаУникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора) Экспорт
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Если Результат = -1 Тогда // Начало выбора.
		// Чтение параметров для формирования списка из сохраненного значения периода.
		ПараметрыВыбора.Вставить("НачалоПериода", ПараметрыВыбора.Значение.ДатаНачала);
		ПараметрыВыбора.Вставить("Вариант",       ПараметрыВыбора.Значение.Вариант);
		ИндексНачальногоЗначения = Неопределено;
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
		// Чтение параметров для формирования списка из выбранного значения.
		ПараметрыВыбора.Вставить("НачалоПериода", Результат.Значение.НачалоПериода);
		ПараметрыВыбора.Вставить("Вариант",       Результат.Значение.Вариант);
		ИндексНачальногоЗначения = Результат.Значение.ИндексНачальногоЗначения;
	Иначе
		// Загрузка результата выбора.
		ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора);
		Возврат;
	КонецЕсли;
	
	// Формирование списка выбора.
	Если ПараметрыВыбора.Вариант = Неопределено Или ПараметрыВыбора.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		СписокПериодов = ФункцииОтчетовКлиентСервер.СписокФиксированныхПериодов(ПараметрыВыбора.НачалоПериода, ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.НачалоПериода);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[0].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 0);
		СписокПериодов[0].Значение = ОписаниеНавигационногоЭлемента;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[8].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 8);
		СписокПериодов[8].Значение = ОписаниеНавигационногоЭлемента;
		
		Если Не ПараметрыВыбора.Свойство("ВариантСтандартногоПериодаПоВиду") Тогда
			ПараметрыВыбора.Вставить("ВариантСтандартногоПериодаПоВиду", ВариантСтандартногоПериодаПоВиду(ПараметрыВыбора.ВидПериода));
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  ПараметрыВыбора.ВариантСтандартногоПериодаПоВиду);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Относительный...'"));
		
	Иначе
		
		СписокПериодов = ФункцииОтчетовКлиентСервер.СписокВычисляемыхПериодов(ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.Вариант);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Фиксированный...'"));
		
	КонецЕсли;
	
	Если ИндексНачальногоЗначения = Неопределено Тогда
		ИндексНачальногоЗначения = СписокПериодов.Количество() - 1;
	КонецЕсли;
	
	ПеременныеКлиента.Вставить("ВыборПериодаИзВыпадающегоСписка", Новый Структура);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("СписокПериодов", СписокПериодов);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("ИндексНачальногоЗначения", ИндексНачальногоЗначения);
	Если Результат = -1 Тогда
		НачатьВыборПериодаИзВыпадающегоСписка();
	Иначе
		ПодключитьОбработчикОжидания("НачатьВыборПериодаИзВыпадающегоСписка", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПериодаИзВыпадающегоСписка()
	Если ПеременныеКлиента.Свойство("ВыборПериодаИзВыпадающегоСписка") Тогда
		Контекст = ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка;
		ПеременныеКлиента.Удалить("ВыборПериодаИзВыпадающегоСписка");
		Обработчик = Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтотОбъект, Контекст.ПараметрыВыбора);
		ПоказатьВыборИзСписка(Обработчик, Контекст.СписокПериодов, Контекст.ПараметрыВыбора.Элемент, Контекст.ИндексНачальногоЗначения);
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора)
	Значение = ПараметрыВыбора.Значение;
	
	// Запись результата выбора в данные формы и пользовательские настройки КД.
	Если ТипЗнч(Результат.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		ЭтотОбъект[ПараметрыВыбора.ПериодПредставлениеИмя] = ?(ПустаяСтрока(Результат.Представление), Строка(Результат.Значение), Результат.Представление);
		Значение.Вариант = Результат.Значение;
	Иначе
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		
		ЭтотОбъект[ПараметрыВыбора.ПериодПредставлениеИмя] = Результат.Представление;
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыбора.ПериодЗначениеИмя] = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ПараметрыВыбора.ИдентификаторЭлемента);
	Если ПараметрыВыбора.ЭтоПараметр Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Элементы.Найти(ПараметрыВыбора.ИспользованиеИмя) <> Неопределено Тогда
		ЭтотОбъект[ПараметрыВыбора.ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантСтандартногоПериодаПоВиду(ВидПериода)
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		Возврат ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаНеделя;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаДекада;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотКвартал;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Возврат ВариантСтандартногоПериода.ЭтоПолугодие;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотГод;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя)
	
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ЭтотОбъект[ТаблицаИмя];
	ИндексСтрокиТаблицы = Таблица.Индекс(СтрокаТаблицы);
	Если ИндексСтрокиТаблицы + Направление < 0 ИЛИ ИндексСтрокиТаблицы + Направление >= Таблица.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ТаблицаИмя);
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
	
	ПользовательскаяНастройкаКД.Элементы.Сдвинуть(СтрокаПользовательскойНастройки, Направление);
	Таблица.Сдвинуть(ИндексСтрокиТаблицы, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаправлениеСортировкиТаблицы(ИмяЭлемента, Направление)
	
	// Формирование сведений о таблице.
	ИдентификаторЭлемента  = Прав(ИмяЭлемента, 32);
	СвойстваНастройкиТип = Лев(ИмяЭлемента, Найти(ИмяЭлемента, "_")-1);
	ТаблицаИмя = СвойстваНастройкиТип + "_Таблица_" + ИдентификаторЭлемента;
	
	// Получение данных.
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
	Если СтрокаПользовательскойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение необязательных параметров.
	Если Направление = Неопределено Тогда
		Если СтрокаПользовательскойНастройки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			Направление = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			Направление = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение направления сортировки.
	СтрокаПользовательскойНастройки.ТипУпорядочивания = Направление;
	СтрокаТаблицы.Направление = Направление;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента)
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИмяИлиИдентификаторЭлемента)
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	
	ВсеДополнительныеНастройки = Неопределено;
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ЭлементыФормы", ВсеДополнительныеНастройки);
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт // Исключение из стандартов разработки
	// Программный интерфейс для контекстного вызова сервера из клиентского общего модуля.
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если ФоновоеЗаданиеВыполнено() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаВыделенныхЯчеек = Формат(Сумма, "ЧН=0");
	Иначе
		СуммаВыделенныхЯчеек = "-";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОбласти()
	Результат = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Результат.Добавить(Структура);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СформироватьНепосредственно();
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтотОбъект.ОтчетТабличныйДокумент, ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ФормаЗаголовок = СтрЗаменить(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), "%1", ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема",               ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок",          ФормаЗаголовок);
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриНеобходимости()
	Если НеобходимоОбновитьНастройки Тогда
		ПриОбновленииСоставаПользовательскихНастроекНаСервере(Истина);
	КонецЕсли;
	Если НадоСформировать Тогда
		НадоСформировать = Ложь;
		ОтчетСкомпоноватьРезультат(Неопределено);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИдентификаторКИмени(Идентификатор)
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИмяКИдентификатору(Имя)
	Возврат Лев(Имя, 8) + "-" + Сред(Имя, 9, 4) + "-" + Сред(Имя, 13, 4) + "-" + Сред(Имя, 17, 4) + "-" + Сред(Имя, 21);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			Если Не ЗнакОтрицательный Или Результат = 0 Тогда // Не было открывающей скобки или нет числа.
				Возврат 0;
			КонецЕсли;
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				Возврат 0; // Разделитель уже был, следовательно это не число.
			КонецЕсли;
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповУдалитьПримитивные(ИсходноеОписаниеТипов)
	ВычитаемыеТипы = Новый Массив;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Строка"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Дата"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Число")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Число"));
	КонецЕсли;
	Если ВычитаемыеТипы.Количество() = 0 Тогда
		Возврат ИсходноеОписаниеТипов;
	КонецЕсли;
	Возврат Новый ОписаниеТипов(ИсходноеОписаниеТипов, , ВычитаемыеТипы);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьУникальноеЗначениеВСписок(СписокЗначений, Значение, Представление, Использование)
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокЗначений.Добавить();
		ЭлементСписка.Значение = Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементСписка.Представление = Представление;
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
		ЭлементСписка.Представление = Строка(Значение);
	КонецЕсли;
	Если Использование И Не ЭлементСписка.Пометка Тогда
		ЭлементСписка.Пометка = Истина;
	КонецЕсли;
	Возврат ЭлементСписка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияСписком(Значения)
	Если ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Возврат Значения;
	Иначе
		СписокЗначений = Новый СписокЗначений;
		ДобавитьУникальноеЗначениеВСписок(СписокЗначений, Значения, Неопределено, Ложь);
		Значения = СписокЗначений;
		Возврат СписокЗначений;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	// Быстрые настройки
	Если Изменения = "" Тогда
		
		// Вычисление параметров отображения.
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		ПоказыватьКомандыВариантовОтчетов = РежимВариантаОтчета И ВидимостьКомандВариантовОтчетов;
		ЕстьМедленныеНастройки = РежимВариантаОтчета И ПользовательскиеНастройкиКД.Элементы.Количество() > 0;
		
		// Применение параметров отображения.
		Элементы.ВсеНастройки.Видимость = ЕстьМедленныеНастройки;
		Элементы.КомандыВариантовОтчета.Видимость = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ГруппаПользовательскиеНастройки_Левая.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		Элементы.ГруппаПользовательскиеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		
		Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
			ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
			ЗаполнитьКомандыВыбораПользовательскихНастроек();
		КонецЕсли;
		
		//Элементы.ВсеНастройки_Левая.Видимость = ЕстьОбычныеНастройки Или ЕстьДругиеОтчеты;
		//Элементы.ВсеНастройки.Видимость = ЕстьОбычныеНастройки Или ЕстьДругиеОтчеты;
		Элементы.ФормироватьСразу.Пометка = НастройкиОтчета.ФормироватьСразу;
	КонецЕсли;
	
	// Заголовок
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		Конецесли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗаполнить(Знач ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.Свойство("Переформировать") И ПараметрыЗаполнения.Переформировать Тогда
		НадоСформировать = Истина;
	КонецЕсли;
	
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	БыстрыеНастройкиДозаполнитьПараметры(ПараметрыЗаполнения);
	
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		ФормаОтчетаПереопределяемый.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения);
	
	// Обработка дополнительных настроек.
	ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения);
	
	// Заголовок и свойства элементов.
	ВидимостьДоступностьКорректность();
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		ФормаОтчетаПереопределяемый.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	РезультатВызова = Новый Структура;
	Если НастройкиОтчета.События.КонтекстныйВызовСервера Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	Иначе
		ФормаОтчетаПереопределяемый.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	КонецЕсли;
	Возврат РезультатВызова;
КонецФункции

&НаСервере
Процедура СформироватьНепосредственно()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Перезаполнение настроек.
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	Если ВариантыОтчетовКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован") = Истина Тогда
		РезультатФормирования.ВариантМодифицирован = Истина;
	КонецЕсли;
	Если РезультатФормирования.ВариантМодифицирован
		Или ВариантыОтчетовКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы") = Истина Тогда
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("Событие", Новый Структура);
		РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
		РезультатФормирования.Событие.Вставить("Непосредственно", Истина);
		БыстрыеНастройкиЗаполнить(РезультатФормирования);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
	// Запуск фонового задания
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ОтчетСсылка", ФормаПараметры.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("Настройки",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройки",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ВариантыОтчетов.СформироватьОтчет",
			ПараметрыФормированияОтчета,
			НСтр("ru = 'Варианты отчетов: Формирование отчета'"));
		ДопСвойства.Удалить("КлючВарианта");
	Исключение
		ДопСвойства.Удалить("КлючВарианта");
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Возврат Формат(Сумма, "ЧН=0");
КонецФункции

&НаСервере
Процедура ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, Использование, ВсеСвязиВедущего, ЗначениеИзменено)
	
	// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
	Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненныхПоТипуВедущего") Тогда
		ЗначениеТип = ТипЗнч(Значение);
		Для Каждого СтрокаСвязиОтбора Из ВсеСвязиВедущего.ПараметрыВыбораПодчиненныхПоТипуВедущего Цикл
			СвязьВключена = Использование И ЗначениеТип = СтрокаСвязиОтбора.ВедущийТип;
			ПодчиненныйЭлемент = Элементы[СтрокаСвязиОтбора.ПодчиненныйИмяЭлемента];
			УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтрокаСвязиОтбора, СвязьВключена);
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненных") Тогда
		Для Каждого СтрокаСвязиОтбора Из ВсеСвязиВедущего.ПараметрыВыбораПодчиненных Цикл
			ПодчиненныйЭлемент = Элементы[СтрокаСвязиОтбора.ПодчиненныйИмяЭлемента];
			УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтрокаСвязиОтбора, Использование);
			Если ЗначениеИзменено = Истина И СтрокаСвязиОтбора.Действие = РежимИзмененияСвязанногоЗначения.Очищать Тогда
				Если ТипЗнч(ЭтотОбъект[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита]) = Тип("СписокЗначений") Тогда
					ЭтотОбъект[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита].Очистить();
				Иначе
					ЭтотОбъект[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита] = Неопределено;
				КонецЕсли;
				Если Не ПустаяСтрока(СтрокаСвязиОтбора.ПодчиненныйИмяФлажка) Тогда
					ЭтотОбъект[СтрокаСвязиОтбора.ПодчиненныйИмяФлажка] = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура БыстрыеНастройкиДозаполнитьПараметры(ПараметрыЗаполнения)
	Если Не ПараметрыЗаполнения.Свойство("Событие") Тогда
		ПараметрыЗаполнения.Вставить("Событие", Новый Структура("Имя", ""));
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыЗаполнения.НастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыЗаполнения.ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Событие.Имя = "НастройкиПоУмолчанию" Тогда
		ПустойКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПустойКомпоновщик.ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		НастройкиОтчета.ФормироватьСразу = ВариантыОтчетовКлиентСервер.СвойствоСтруктуры(
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройкиКолонка1.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройкиКолонка2.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Новый Соответствие;
	СоответствиеОтключаемыхСвязей        = Новый Соответствие;
	
	СоответствиеХранимыхСписковВыбора = Новый Соответствие;
	
	ЕстьБыстрыеНастройки = Ложь;
	ЕстьОбычныеНастройки = Ложь;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСпискиЗначений     = Новый Массив;
	ДобавленныеТаблицыСФлажками   = Новый Массив;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = СоздатьСтруктуруТаблицСвязей();
	
	ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование        = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	Если ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ЭлементыФормы") Тогда
		ДополнительныеНастройкиЭлементов = ПользовательскиеНастройкиКД.ДополнительныеСвойства.ЭлементыФормы;
	Иначе
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ШаблонНастройки = Новый Структура("Тип, Подтип, Шаблон, СтрокаДерева,
		|ПользовательскаяСКД, ИдентификаторСКД, ВариантаСКД, ДоступнаяСКД");
	ШаблонНастройки.Вставить("Иерархия", Ложь);
	ШаблонНастройки.Вставить("ФлажокИспользование", Ложь);
	ШаблонНастройки.Вставить("ВыводВЗакладке", Ложь);
	ШаблонНастройки.Вставить("ВводСписком", Ложь);
	ШаблонНастройки.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ШаблонНастройки = Новый ФиксированнаяСтруктура(ШаблонНастройки);
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый СписокЗначений, 0));
	
	ОтчетОбъект = Неопределено;
	
	ДеревоВарианта = Новый ДеревоЗначений;
	ДеревоВарианта.Колонки.Добавить("Настройка");
	ДеревоВарианта.Колонки.Добавить("ТипНастройки", Новый ОписаниеТипов("Строка"));
	ДеревоВарианта.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ДеревоВарианта.Колонки.Добавить("ЕстьСтруктура", Новый ОписаниеТипов("Булево"));
	ДеревоВарианта.Колонки.Добавить("ЕстьПоляИОформление", Новый ОписаниеТипов("Булево"));
	ДеревоВариантаЗарегистрироватьЭлемент(НастройкиКД, ДеревоВарианта.Строки);
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	// Перебор коллекций пользовательских настроек.
	//   Отдельный цикл верхнего уровня нужен для поддержки сценария,
	//   когда коллекция отборов выведена в пользовательские настройки
	//   и можно добавлять новые отборы не меняя настроек варианта.
	НаборыПользовательскихНастроек = Новый СписокЗначений;
	НаборыПользовательскихНастроек.Добавить(ПользовательскиеНастройкиКД.Элементы, "Отчет.КомпоновщикНастроек.ПользовательскиеНастройки");
	Пока Истина Цикл
		Если НаборыПользовательскихНастроек.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НаборПользовательскихНастроек = НаборыПользовательскихНастроек[0].Значение;
		ПутьПользовательскихНастроек = НаборыПользовательскихНастроек[0].Представление;
		НаборыПользовательскихНастроек.Удалить(0);
		ЭтоНаборОтбора = (ТипЗнч(НаборПользовательскихНастроек) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных"));
		
		// Перебор пользовательских настроек.
		Для Каждого ПользовательскаяНастройка Из НаборПользовательскихНастроек Цикл
			РежимОтображения = ПользовательскаяНастройка.РежимОтображения;
			Если РежимОтображения = Режимы.Недоступный Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексЭлемента = НаборПользовательскихНастроек.Индекс(ПользовательскаяНастройка);
			ИдентификаторСКД = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
			Если Не ЗначениеЗаполнено(ИдентификаторСКД) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторЭлемента = ПривестиИдентификаторКИмени(ИдентификаторСКД);
			
			СоответствиеПользовательскихНастроек.Вставить(ИдентификаторЭлемента, ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройка));
			
			СвойстваНастройки = Новый Структура(ШаблонНастройки);
			СвойстваНастройки.Тип = ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройка));
			СвойстваНастройки.ПользовательскаяСКД = ПользовательскаяНастройка;
			СвойстваНастройки.ИдентификаторСКД    = ИдентификаторСКД;
			
			//СвойстваНастройки.СтрокаДерева = Неопределено;
			Если ЭтоНаборОтбора Тогда
				СвойстваНастройки.ВариантаСКД = ПользовательскаяНастройка;
			Иначе
				ДеревоВариантаНайти(ДеревоВарианта, СвойстваНастройки);
				//СвойстваНастройки.ВариантаСКД = ДеревоВариантаНайти(ДеревоВарианта, СвойстваНастройки, СвойстваНастройки.СтрокаДерева);
				Если СвойстваНастройки.ВариантаСКД = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваНастройки.Тип = "Отбор" Тогда
				//НаборыПользовательскихНастроек.Добавить(ПользовательскаяНастройка.Элементы);
				//Продолжить;
			КонецЕсли;
			
			Если РежимОтображения = Режимы.Авто Тогда
				РежимОтображения = СвойстваНастройки.ВариантаСКД.РежимОтображения;
			КонецЕсли;
			Если РежимОтображения = Режимы.БыстрыйДоступ Тогда
				ЭтоБыстраяНастройка = Истина;
			ИначеЕсли РежимОтображения = Режимы.Обычный Тогда
				ЕстьОбычныеНастройки = Истина;
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			
			//СвойстваНастройки.ДоступнаяСКД = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, СвойстваНастройки.ВариантаСКД);
			
			СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
			ЗаполнитьЗначенияСвойств(СтруктураПредставлений, СвойстваНастройки.ВариантаСКД);
			Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
				ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
			ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
				ЭлементЗаголовок = СтруктураПредставлений.Представление;
			ИначеЕсли СвойстваНастройки.ДоступнаяСКД <> Неопределено И ЗначениеЗаполнено(СвойстваНастройки.ДоступнаяСКД.Заголовок) Тогда
				ЭлементЗаголовок = СвойстваНастройки.ДоступнаяСКД.Заголовок;
			Иначе
				ЭлементЗаголовок = ПредставлениеПользовательскойНастройки(СвойстваНастройки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
				СвойстваНастройки.Тип = "ФиксированныйОтбор"; // Виртуальный тип.
			КонецЕсли;
			
			Если СвойстваНастройки.Тип = "ГруппаЭлементовОтбора"
				Или СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта"
				Или СвойстваНастройки.Тип = "ФиксированныйОтбор"
				Или СвойстваНастройки.Тип = "Группировка"
				Или СвойстваНастройки.Тип = "ФиксированныйОтбор"
				Или СвойстваНастройки.Тип = "Таблица"
				Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
				Или СвойстваНастройки.Тип = "Диаграмма"
				Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы"
				Или СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
				
				СвойстваНастройки.Шаблон = "ТолькоФлажокИспользование";
				
			ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				
				Если СвойстваНастройки.ДоступнаяСКД = Неопределено Тогда
					Продолжить; // Имя параметра изменилось или параметр был удален.
				КонецЕсли;
				
				СвойстваНастройки.ФлажокИспользование = СвойстваНастройки.ДоступнаяСКД.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда;
				Если ТипЗнч(ПользовательскаяНастройка.Значение) = Тип("СтандартныйПериод") Тогда
					СвойстваНастройки.Шаблон = "СтандартныйПериод";
				ИначеЕсли СвойстваНастройки.ДоступнаяСКД.ДоступенСписокЗначений Тогда
					СвойстваНастройки.ВводСписком = Истина;
					СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком";
				Иначе
					СвойстваНастройки.Шаблон = "ПолеВвода";
				КонецЕсли;
				
				АнализТиповИСвязей(ИдентификаторЭлемента, СвойстваНастройки, СоответствиеИменОбъектовМетаданных, Связи); // Определение типа значения настройки.
				
				Если СвойстваНастройки.Шаблон = "ПолеВвода" Тогда
					НастройкиСВидомСравненияРавно.Вставить(ИдентификаторЭлемента, Истина);
				КонецЕсли;
				
				Если Не СвойстваНастройки.ФлажокИспользование Тогда
					ПользовательскаяНастройка.Использование = Истина;
				КонецЕсли;
				
				ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(СвойстваНастройки.ВариантаСКД.Параметр));
				ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Вставить(ПолеКД, ИдентификаторЭлемента);
				
			ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
				
				Если СвойстваНастройки.ДоступнаяСКД = Неопределено Тогда
					Продолжить; // Имя поля изменилось или поле было удалено.
				КонецЕсли;
				
				СвойстваНастройки.ФлажокИспользование = Истина;
				Если ТипЗнч(ПользовательскаяНастройка.ПравоеЗначение) = Тип("СтандартныйПериод") Тогда
					СвойстваНастройки.Шаблон = "СтандартныйПериод";
				ИначеЕсли ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
					СвойстваНастройки.Шаблон = "ТолькоФлажокИспользование";
					ЭлементЗаголовок = ЭлементЗаголовок + ": " + НРег(Строка(ПользовательскаяНастройка.ВидСравнения));
				ИначеЕсли ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					СвойстваНастройки.ВводСписком = Истина;
					СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком";
					СвойстваНастройки.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.ГруппыИЭлементы);
				Иначе
					СвойстваНастройки.Шаблон = "ПолеВвода";
					Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						НастройкиСВидомСравненияРавно.Вставить(ИдентификаторЭлемента, Истина);
					КонецЕсли;
					Если ПользовательскаяНастройка.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
						И ПользовательскаяНастройка.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит Тогда
						ЭлементЗаголовок = ЭлементЗаголовок + " (" + НРег(Строка(ПользовательскаяНастройка.ВидСравнения)) + ")";
					КонецЕсли;
					Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
						Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						СвойстваНастройки.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Группы);
					КонецЕсли;
				КонецЕсли;
				
				АнализТиповИСвязей(ИдентификаторЭлемента, СвойстваНастройки, СоответствиеИменОбъектовМетаданных, Связи); // Определение типа значения настройки.
				
				ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Вставить(СвойстваНастройки.ВариантаСКД.ЛевоеЗначение, ИдентификаторЭлемента);
				
			ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
				
				СвойстваНастройки.Шаблон  = "ТаблицаПорядкаСФлажками";
				СвойстваНастройки.Иерархия = Истина;
				
			ИначеЕсли СвойстваНастройки.Тип = "Порядок" Тогда
				
				СвойстваНастройки.Шаблон = "ТаблицаПорядкаСФлажками";
				
			ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек"
				И СвойстваНастройки.Подтип = "Структура" Тогда
				
				СвойстваНастройки.Шаблон = "ТаблицаПорядкаСФлажками";
				
			Иначе
				
				СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком";
				
			КонецЕсли;
			
			Если ЭтоБыстраяНастройка И СвойстваНастройки.Шаблон = "ТаблицаПорядкаСФлажками" Тогда
				СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком";
			КонецЕсли;
			
			// Определение группы для вывода.
			ГруппаВывода = ГруппыВывода.Быстрые;
			
			// Параметры выбора: условия, ограничения и список значений.
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
				Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
				// Значение списка.
				Если СвойстваНастройки.ВводСписком Тогда
					Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
						ОтмеченныеЗначения = ЗначенияСписком(ПользовательскаяНастройка.Значение);
					Иначе
						ОтмеченныеЗначения = ЗначенияСписком(ПользовательскаяНастройка.ПравоеЗначение);
					КонецЕсли;
					СвойстваНастройки.Вставить("ОтмеченныеЗначения", ОтмеченныеЗначения);
				КонецЕсли;
				
				// Формирование параметров и текста запроса.
				СвойстваНастройки.Вставить("ЗначенияДляВыбора", Новый СписокЗначений);
				СвойстваНастройки.Вставить("ЗапросЗначенийВыбора", Новый Запрос);
				
				Если ТипЗнч(СвойстваНастройки.ДоступнаяСКД.ДоступныеЗначения) = Тип("СписокЗначений") И СвойстваНастройки.ДоступнаяСКД.ДоступныеЗначения.Количество() > 0 Тогда
					// Разработчик ограничил выбор списком доступных значений.
					СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
					Для Каждого ЭлементСписка Из СвойстваНастройки.ДоступнаяСКД.ДоступныеЗначения Цикл
						ЗначениеВСКД = ЭлементСписка.Значение;
						Если ЗначениеВСКД = Неопределено
							Или ЗначениеВСКД = Тип("Неопределено")
							Или ЗначениеВСКД = Новый ОписаниеТипов("Неопределено")
							Или Не ЗначениеЗаполнено(ЗначениеВСКД) Тогда
							Продолжить; // Запрет пустых значений.
						КонецЕсли;
						Если ТипЗнч(ЗначениеВСКД) = Тип("Тип") Тогда
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(ЗначениеВСКД);
							ЗначениеВФорме = Новый ОписаниеТипов(МассивТипов);
						Иначе
							ЗначениеВФорме = ЗначениеВСКД;
						КонецЕсли;
						ДобавитьУникальноеЗначениеВСписок(СвойстваНастройки.ЗначенияДляВыбора, ЗначениеВФорме, ЭлементСписка.Представление, Ложь);
					КонецЦикла;
				Иначе
					Если Не СвойстваНастройки.ФлажокИспользование
						И СвойстваНастройки.СодержитТипБулево
						И СвойстваНастройки.КоличествоТипов = 1
						И Не СвойстваНастройки.ВводСписком Тогда
						СвойстваНастройки.Шаблон = "ТолькоФлажокЗначения"; // Замена поля "Да/Нет" на флажок.
					КонецЕсли;
					// Чтение сохраненных ранее настроек.
					НастройкиСохраненныеРанее = ДополнительныеНастройкиЭлементов[ИдентификаторЭлемента];
					Если НастройкиСохраненныеРанее <> Неопределено
						И НастройкиСохраненныеРанее.Свойство("ЗначенияДляВыбора")
						И ТипЗнч(НастройкиСохраненныеРанее.ЗначенияДляВыбора) = Тип("Массив") Тогда
						// Фильтр выбранных если изменилось описание типов.
						Если НастройкиСохраненныеРанее.Свойство("ОписаниеТипов")
							И ТипЗнч(НастройкиСохраненныеРанее.ОписаниеТипов) = Тип("ОписаниеТипов")
							И Не ОписанияТиповСовпадают(СвойстваНастройки.ОписаниеТипов, НастройкиСохраненныеРанее.ОписаниеТипов) Тогда
							Количество = НастройкиСохраненныеРанее.ЗначенияДляВыбора.Количество();
							Для Номер = 1 По Количество Цикл
								ОбратныйИндекс = Количество - Номер;
								ЗначениеВФорме = НастройкиСохраненныеРанее.ЗначенияДляВыбора[ОбратныйИндекс];
								Если СвойстваНастройки.ОписаниеТипов.СодержитТип(ТипЗнч(ЗначениеВФорме)) Тогда
									ДобавитьУникальноеЗначениеВСписок(СвойстваНастройки.ЗначенияДляВыбора, ЗначениеВФорме, Неопределено, Ложь);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					// Текст для автоматического заполнения значений настройки.
					Если СвойстваНастройки.КоличествоПеречислений > 0 Тогда
						// Разработчик не ограничил выбор...
						// И есть возможность автоматически заполнить список.
						ШаблонЗапросаПеречислений = "ВЫБРАТЬ Ссылка ИЗ &ИмяПеречисления";
						ТекстЗапроса = "";
						Для Каждого ПеречислениеПолноеИмя Из СвойстваНастройки.Перечисления Цикл
							Если ТекстЗапроса <> "" Тогда
								ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
							КонецЕсли;
							ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПеречислений, "&ИмяПеречисления", ПеречислениеПолноеИмя);
						КонецЦикла;
						СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
						Если СвойстваНастройки.КоличествоПеречислений = СвойстваНастройки.КоличествоТипов Тогда
							СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина; // Выбираются только значения перечислений.
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Механизмы расширения.
				ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора(ЭтотОбъект, СвойстваНастройки); // Глобальные настройки вывода типов...
				Если НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда // ... можно переопределить локально для отчета.
					Если ОтчетОбъект = Неопределено Тогда
						ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
					КонецЕсли;
					ОтчетОбъект.ПриОпределенииПараметровВыбора(ЭтотОбъект, СвойстваНастройки);
				КонецЕсли;
				
				// Автоматическое заполнение.
				Если СвойстваНастройки.ЗапросЗначенийВыбора.Текст <> "" Тогда
					ДобавляемыеЗначения = СвойстваНастройки.ЗапросЗначенийВыбора.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
					Для Каждого ЗначениеВФорме Из ДобавляемыеЗначения Цикл
						ДобавитьУникальноеЗначениеВСписок(СвойстваНастройки.ЗначенияДляВыбора, ЗначениеВФорме, Неопределено, Ложь);
					КонецЦикла;
				КонецЕсли;
				
				// Сохранение параметров выбора настройки в дополнительных свойствах пользовательских настроек.
				НастройкиЭлемента = Новый Структура("ОписаниеТипов, ОграничиватьВыборУказаннымиЗначениями, ПараметрыВыбора");
				ЗаполнитьЗначенияСвойств(НастройкиЭлемента, СвойстваНастройки);
				НастройкиЭлемента.Вставить("ЗначенияДляВыбора", СвойстваНастройки.ЗначенияДляВыбора.ВыгрузитьЗначения());
				НастройкиЭлемента.Вставить("ПредставлениеПоля", ЭлементЗаголовок);
				ДополнительныеНастройкиЭлементов.Вставить(ИдентификаторЭлемента, НастройкиЭлемента);
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Генератор
			
			Если СвойстваНастройки.Шаблон = "ТолькоФлажокИспользование" Или СвойстваНастройки.Шаблон = "ТолькоФлажокЗначения" Тогда
				
				Если СвойстваНастройки.Шаблон = "ТолькоФлажокИспользование" Тогда
					ФлажокИмя = СвойстваНастройки.Тип + "_Использование_" + ИдентификаторЭлемента;
					ДействиеПриИзменении = "Подключаемый_ФлажокИспользование_ПриИзменении";
				Иначе
					ФлажокИмя = СвойстваНастройки.Тип + "_Значение_" + ИдентификаторЭлемента;
					ДействиеПриИзменении = "Подключаемый_ПолеВвода_ПриИзменении";
				КонецЕсли;
				
				Если СвойстваНастройки.ВыводВЗакладке
					И (СвойстваНастройки.Тип = "Группировка"
						Или СвойстваНастройки.Тип = "Таблица"
						Или СвойстваНастройки.Тип = "Диаграмма")
					И ГруппаВывода.ИмяФлажка = "" Тогда
					ГруппаВывода.ИмяФлажка = ФлажокИмя;
				Иначе
					ГруппаВывода.Порядок.Добавить(1, ФлажокИмя);
					ГруппаВывода.Размер = ГруппаВывода.Размер + 1;
				КонецЕсли;
				
				// Реквизиты.
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ФлажокИмя, "Булево");
				
				// Флажок.
				ИспользованиеОтбора = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), Элементы.БыстрыеНастройки);
				ИспользованиеОтбора.Вид                = ВидПоляФормы.ПолеФлажка;
				ИспользованиеОтбора.Заголовок          = ЭлементЗаголовок;
				ИспользованиеОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ИспользованиеОтбора.УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
				
				// Значения.
				Если СвойстваНастройки.Шаблон = "ТолькоФлажокИспользование" Тогда
					ДобавленныеПоляВвода.Вставить(ФлажокИмя, ПользовательскаяНастройка.Использование);
				Иначе
					ДобавленныеПоляВвода.Вставить(ФлажокИмя, ПользовательскаяНастройка.Значение);
				КонецЕсли;
				
			ИначеЕсли СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком" Тогда
				
				ГруппаИмя   = СвойстваНастройки.Тип + "_Группа_"        + ИдентификаторЭлемента;
				ФлажокИмя   = СвойстваНастройки.Тип + "_Использование_" + ИдентификаторЭлемента;
				ЗначениеИмя = СвойстваНастройки.Тип + "_Значение_"      + ИдентификаторЭлемента;
				
				Путь = ПутьПользовательскихНастроек + "[" + ИндексЭлемента + "]";
				
				ИменаОсновныхРеквизитовФормы.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
				ИменаЭлементовДляУстановкиСвязей.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
				ИменаФлажковИспользование.Вставить(ИдентификаторЭлемента, ?(СвойстваНастройки.ФлажокИспользование, ФлажокИмя, ""));
				
				// Группа с флажком.
				Если СвойстваНастройки.ФлажокИспользование Тогда
					
					// Добавление основной группы
					Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.БыстрыеНастройки);
					Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
					Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
					Группа.Заголовок           = ЭлементЗаголовок;
					Группа.ОтображатьЗаголовок = Ложь;
					
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ФлажокИмя, "Булево");
					
					// Флажок
					ПолеФлажка = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), Группа);
					ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
					ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
					ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
					ПолеФлажка.Заголовок = ЭлементЗаголовок + ":";
					
					ДобавленныеПоляВвода.Вставить(ФлажокИмя, ПользовательскаяНастройка.Использование);
					
				Иначе
					
					Группа = Элементы.БыстрыеНастройки;
					ГруппаИмя = ЗначениеИмя;
					
				КонецЕсли;
				
				ГруппаВывода.Порядок.Добавить(1, ГруппаИмя);
				ГруппаВывода.Размер = ГруппаВывода.Размер + 1;
				
				ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
				ПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;
				ПолеВвода.Заголовок   = ЭлементЗаголовок;
				ПолеВвода.ПутьКДанным = Путь + ".Значение";
				
				Если СвойстваНастройки.ВводСписком Тогда
					ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора");
				КонецЕсли;
				
				Если СвойстваНастройки.ФлажокИспользование Тогда
					ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
				
			ИначеЕсли СвойстваНастройки.Шаблон = "СтандартныйПериод" Тогда
				
				ГруппаИмя = СвойстваНастройки.Тип + "_Группа_" + ИдентификаторЭлемента;
				ИспользованиеИмя       = СвойстваНастройки.Тип + "_Использование_" + ИдентификаторЭлемента;
				ВидПериодаИмя          = СвойстваНастройки.Тип + "_Вид_"           + ИдентификаторЭлемента;
				ПериодЗначениеИмя      = СвойстваНастройки.Тип + "_Значение_"      + ИдентификаторЭлемента;
				ПериодПредставлениеИмя = СвойстваНастройки.Тип + "_Представление_" + ИдентификаторЭлемента;
				ПериодНачалоИмя        = СвойстваНастройки.Тип + "_Начало_"        + ИдентификаторЭлемента;
				ПериодОкончаниеИмя     = СвойстваНастройки.Тип + "_Окончание_"     + ИдентификаторЭлемента;
				ДекорацияИмя           = СвойстваНастройки.Тип + "_Декорация_"     + ИдентификаторЭлемента;
				СтраницыИмя             = СвойстваНастройки.Тип + "_Страницы_"             + ИдентификаторЭлемента;
				СтраницаСтандартныйИмя  = СвойстваНастройки.Тип + "_СтраницаСтандартный_"  + ИдентификаторЭлемента;
				СтраницаПроизвольныйИмя = СвойстваНастройки.Тип + "_СтраницаПроизвольный_" + ИдентификаторЭлемента;
				
				ГруппаВывода.Порядок.Вставить(0, 1, ГруппаИмя);
				ГруппаВывода.Размер = ГруппаВывода.Размер + 1;
				
				// Реквизиты.
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ВидПериодаИмя,          "ПеречислениеСсылка.ДоступныеПериодыОтчета");
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ПериодПредставлениеИмя, "Строка");
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ПериодЗначениеИмя,      "СтандартныйПериод");
				
				// Основная Группа
				ГруппаСтрок = Элементы.БыстрыеНастройки;
				Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), ГруппаСтрок);
				Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Группа.ОтображатьЗаголовок = Ложь;
				Группа.Заголовок           = ЭлементЗаголовок;
				
				Если СвойстваНастройки.ФлажокИспользование Тогда
					
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ИспользованиеИмя, "Булево");
					
					// Флажок
					ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), Группа);
					ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
					ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
					ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
					ПолеФлажка.Заголовок = ЭлементЗаголовок + ":";
					
					// Значение флажка.
					ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
					
				КонецЕсли;
				
				// Вид периода - Элемент.
				ВидПериодаЭлемент = Элементы.Добавить(ВидПериодаИмя, Тип("ПолеФормы"), Группа);
				ВидПериодаЭлемент.Вид                      = ВидПоляФормы.ПолеВвода;
				ВидПериодаЭлемент.Заголовок                = ЭлементЗаголовок;
				ВидПериодаЭлемент.РежимВыбораИзСписка      = Истина;
				ВидПериодаЭлемент.РастягиватьПоГоризонтали = Ложь;
				ВидПериодаЭлемент.Ширина                   = 11;
				ВидПериодаЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_Вид_ПриИзменении");
				
				Если СвойстваНастройки.ФлажокИспользование Тогда
					ВидПериодаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Иначе
					ВидПериодаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
				КонецЕсли;
				
				// Вид периода - Список выбора.
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[СвойстваНастройки.ВариантаСКД.Параметр];
				Иначе
					МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[СвойстваНастройки.ВариантаСКД.ЛевоеЗначение];
				КонецЕсли;
				Если МинимальнаяПериодичность = Неопределено Тогда
					МинимальнаяПериодичность = Перечисления.ДоступныеПериодыОтчета.День;
				КонецЕсли;
				
				ДоступныеПериоды = ФункцииОтчетовКлиентСервер.ПолучитьСписокДоступныхПериодов();
				Для Индекс = ДоступныеПериоды.Найти(МинимальнаяПериодичность) По ДоступныеПериоды.ВГраница() Цикл
					ВидПериодаЭлемент.СписокВыбора.Добавить(ДоступныеПериоды[Индекс]);
				КонецЦикла;
				
				// Страницы.
				ГруппаСтраниц = Элементы.Добавить(СтраницыИмя, Тип("ГруппаФормы"), Группа);
				ГруппаСтраниц.Вид                = ВидГруппыФормы.Страницы;
				ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
				ГруппаСтраниц.Ширина = 24;
				ГруппаСтраниц.РастягиватьПоГоризонтали = Ложь;
				
				// Страница СтандартныйПериод.
				СтраницаСтандартныйПериод = Элементы.Добавить(СтраницаСтандартныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
				СтраницаСтандартныйПериод.Вид                 = ВидГруппыФормы.Страница;
				СтраницаСтандартныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				СтраницаСтандартныйПериод.ОтображатьЗаголовок = Ложь;
				
				// Страница Произвольный.
				СтраницаПроизвольныйПериод = Элементы.Добавить(СтраницаПроизвольныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
				СтраницаПроизвольныйПериод.Вид                 = ВидГруппыФормы.Страница;
				СтраницаПроизвольныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				СтраницаПроизвольныйПериод.ОтображатьЗаголовок = Ложь;
				
				// Стандартный период.
				Период = Элементы.Добавить(ПериодПредставлениеИмя, Тип("ПолеФормы"), СтраницаСтандартныйПериод);
				Период.Вид       = ВидПоляФормы.ПолеВвода;
				Период.Заголовок = НСтр("ru = 'Период'");
				Период.РастягиватьПоГоризонтали = Истина;
				Период.КнопкаВыбора   = Истина;
				Период.КнопкаОткрытия = Ложь;
				Период.КнопкаОчистки  = Ложь;
				Период.КнопкаРегулирования  = Ложь;
				Период.РедактированиеТекста = Ложь;
				Период.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Период.УстановитьДействие("Очистка",      "Подключаемый_СтандартныйПериод_Значение_Очистка");
				Период.УстановитьДействие("НачалоВыбора", "Подключаемый_СтандартныйПериод_Значение_НачалоВыбора");
				
				// Начало произвольного периода
				ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
				ПериодНачало.Вид    = ВидПоляФормы.ПолеВвода;
				ПериодНачало.РастягиватьПоГоризонтали = Истина;
				ПериодНачало.КнопкаВыбора   = Истина;
				ПериодНачало.КнопкаОткрытия = Ложь;
				ПериодНачало.КнопкаОчистки  = Ложь;
				ПериодНачало.КнопкаРегулирования  = Ложь;
				ПериодНачало.РедактированиеТекста = Истина;
				ПериодНачало.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
				
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					ПериодНачало.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяСКД.ЗапрещатьНезаполненныеЗначения;
				КонецЕсли;
				
				Тире = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), СтраницаПроизвольныйПериод);
				Тире.Вид       = ВидДекорацииФормы.Надпись;
				Тире.Заголовок = "–";
				
				// Окончание произвольного периода.
				ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
				ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
				ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, Ширина, ПоложениеЗаголовка, 
				|РедактированиеТекста, КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, АвтоОтметкаНезаполненного");
				ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
				
				// Значения.
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					Значение = ПользовательскаяНастройка.Значение;
				Иначе
					Значение = ПользовательскаяНастройка.ПравоеЗначение;
				КонецЕсли;
				НачалоПериода = Значение.ДатаНачала;
				КонецПериода  = Значение.ДатаОкончания;
				ВидПериода    = ФункцииОтчетовКлиентСервер.ПолучитьВидСтандартногоПериода(Значение, ВидПериодаЭлемент.СписокВыбора);
				Представление = ФункцииОтчетовКлиентСервер.ПредставлениеСтандартногоПериода(Значение, ВидПериода);
				
				СвойстваНастройки.Вставить("ПериодЗначениеИмя",       ПериодЗначениеИмя);
				СвойстваНастройки.Вставить("ВидПериодаИмя",           ВидПериодаИмя);
				СвойстваНастройки.Вставить("ПериодНачалоИмя",         ПериодНачалоИмя);
				СвойстваНастройки.Вставить("ПериодОкончаниеИмя",      ПериодОкончаниеИмя);
				СвойстваНастройки.Вставить("ПериодПредставлениеИмя",  ПериодПредставлениеИмя);
				СвойстваНастройки.Вставить("Значение",                Значение);
				СвойстваНастройки.Вставить("ВидПериода",              ВидПериода);
				СвойстваНастройки.Вставить("Представление",           Представление);
				ДобавленныеСтандартныеПериоды.Добавить(СвойстваНастройки);
				
				// Активация страницы.
				Если ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
					ГруппаСтраниц.ТекущаяСтраница = СтраницаПроизвольныйПериод;
				Иначе
					ГруппаСтраниц.ТекущаяСтраница = СтраницаСтандартныйПериод;
				КонецЕсли;
				
			ИначеЕсли СвойстваНастройки.Шаблон = "ПолеВвода" Тогда
				
				ГруппаИмя        = СвойстваНастройки.Тип + "_Группа_"        + ИдентификаторЭлемента;
				ИспользованиеИмя = СвойстваНастройки.Тип + "_Использование_" + ИдентификаторЭлемента;
				ЗначениеИмя      = СвойстваНастройки.Тип + "_Значение_"      + ИдентификаторЭлемента;
				
				ИменаОсновныхРеквизитовФормы.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
				ИменаЭлементовДляУстановкиСвязей.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
				ИменаФлажковИспользование.Вставить(ИдентификаторЭлемента, ?(СвойстваНастройки.ФлажокИспользование, ИспользованиеИмя, ""));
				
				// Группа с флажком.
				Если СвойстваНастройки.ФлажокИспользование Тогда
					
					// Добавление основной группы
					Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.БыстрыеНастройки);
					Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
					Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
					Группа.Заголовок           = ЭлементЗаголовок;
					Группа.ОтображатьЗаголовок = Ложь;
					
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ИспользованиеИмя, "Булево");
					
					// Флажок
					ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), Группа);
					ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
					ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
					ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
					ПолеФлажка.Заголовок = ЭлементЗаголовок + ":";
					
					// Значение флажка.
					ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
					
					ГруппаВывода.Порядок.Добавить(1, ГруппаИмя);
					ГруппаВывода.Размер = ГруппаВывода.Размер + 1;
					
				Иначе
					
					Группа = Элементы.БыстрыеНастройки;
					
					ГруппаВывода.Порядок.Добавить(1, ЗначениеИмя);
					ГруппаВывода.Размер = ГруппаВывода.Размер + 1;
					
				КонецЕсли;
				
				// Реквизит
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);
				
				ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
				ПолеВвода.Вид                 = ВидПоляФормы.ПолеВвода;
				ПолеВвода.Заголовок           = ЭлементЗаголовок;
				ПолеВвода.КнопкаОткрытия      = Ложь;
				ПолеВвода.КнопкаРегулирования = Ложь;
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
				
				ЗаполнитьЗначенияСвойств(ПолеВвода, СвойстваНастройки.ДоступнаяСКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
				
				Если СвойстваНастройки.ФлажокИспользование Тогда
					ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Иначе
					ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
				КонецЕсли;
				
				Если СвойстваНастройки.Свойство("ВыборГруппИЭлементов") Тогда
					ПолеВвода.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
				Иначе
					ПолеВвода.ВыборГруппИЭлементов = ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(СвойстваНастройки.ДоступнаяСКД.ВыборГруппИЭлементов);
				КонецЕсли;
				
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					ПолеВвода.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяСКД.ЗапрещатьНезаполненныеЗначения;
				КонецЕсли;
				
				// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
				//     Дата, Булево, Число, Тип.
				ПолеВвода.КнопкаОчистки            = СвойстваНастройки.СодержитДругиеТипы;
				ПолеВвода.РастягиватьПоГоризонтали = СвойстваНастройки.СодержитДругиеТипы;
				Для Каждого ЭлементСпискаВФорме Из СвойстваНастройки.ЗначенияДляВыбора Цикл
					ЗаполнитьЗначенияСвойств(ПолеВвода.СписокВыбора.Добавить(), ЭлементСпискаВФорме);
				КонецЦикла;
				ПолеВвода.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
				Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					ПолеВвода.РежимВыбораИзСписка = Истина;
					ПолеВвода.КнопкаСоздания = Ложь;
					ПолеВвода.РастягиватьПоГоризонтали = Истина;
				КонецЕсли;
				
				// Фиксированные параметры выбора.
				Если СвойстваНастройки.Свойство("ПараметрыВыбора") Тогда
					ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
				КонецЕсли;
				
				// Значение реквизита.
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					Значение = ПользовательскаяНастройка.Значение;
				Иначе
					Значение = ПользовательскаяНастройка.ПравоеЗначение;
				КонецЕсли;
				Если ТипЗнч(Значение) = Тип("СтандартнаяДатаНачала") Тогда
					Значение = Дата(Значение);
				ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Значение);
					Значение = Новый ОписаниеТипов(МассивТипов);
				КонецЕсли;
				ДобавленныеПоляВвода.Вставить(ЗначениеИмя, Значение);
				
			ИначеЕсли СвойстваНастройки.Шаблон = "СписокСПодбором" Тогда
				
				ГруппаИмя          = СвойстваНастройки.Тип + "_Группа_"          + ИдентификаторЭлемента;
				ГруппаЗаголовокИмя = СвойстваНастройки.Тип + "_ГруппаЗаголовка_" + ИдентификаторЭлемента;
				ИспользованиеИмя   = СвойстваНастройки.Тип + "_Использование_"   + ИдентификаторЭлемента;
				ДекорацияИмя       = СвойстваНастройки.Тип + "_Декорация_"       + ИдентификаторЭлемента;
				ТаблицаИмя              = СвойстваНастройки.Тип + "_СписокЗначений_"        + ИдентификаторЭлемента;
				ГруппаКолонокИмя        = СвойстваНастройки.Тип + "_ГруппаКолонок_"         + ИдентификаторЭлемента;
				КолонкаИспользованиеИмя = СвойстваНастройки.Тип + "_Колонка_Использование_" + ИдентификаторЭлемента;
				КолонкаЗначениеИмя      = СвойстваНастройки.Тип + "_Колонка_Значение_"      + ИдентификаторЭлемента;
				КоманднаяПанельИмя = СвойстваНастройки.Тип + "_КоманднаяПанель_"  + ИдентификаторЭлемента;
				КнопкаПодборИмя    = СвойстваНастройки.Тип + "_Подбор_"           + ИдентификаторЭлемента;
				КнопкаВставитьИмя  = СвойстваНастройки.Тип + "_ВставитьИзБуфера_" + ИдентификаторЭлемента;
				
				ГруппаВывода.Порядок.Добавить(5, ГруппаИмя);
				ГруппаВывода.Размер = ГруппаВывода.Размер + 5;
				
				ИменаОсновныхРеквизитовФормы.Вставить(ИдентификаторЭлемента, ТаблицаИмя);
				ИменаЭлементовДляУстановкиСвязей.Вставить(ИдентификаторЭлемента, КолонкаЗначениеИмя);
				ИменаФлажковИспользование.Вставить(ИдентификаторЭлемента, ?(СвойстваНастройки.ФлажокИспользование, ИспользованиеИмя, ""));
				
				// Добавление основной группы
				Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.БыстрыеНастройки);
				Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Группа.Заголовок           = ЭлементЗаголовок;
				Группа.ОтображатьЗаголовок = Ложь;
				
				// Группа-строка для заголовка и командной панели таблицы.
				Если СвойстваНастройки.ФлажокИспользование И СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					ГруппаЗаголовокТаблицы = Группа;
				Иначе
					ГруппаЗаголовокТаблицы = Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
					ГруппаЗаголовокТаблицы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗаголовокТаблицы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					ГруппаЗаголовокТаблицы.Отображение         = ОтображениеОбычнойГруппы.Нет;
					ГруппаЗаголовокТаблицы.ОтображатьЗаголовок = Ложь;
				КонецЕсли;
				
				// Флажок.
				Если СвойстваНастройки.ФлажокИспользование Тогда
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ИспользованиеИмя, "Булево");
					
					ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), ГруппаЗаголовокТаблицы);
					ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
					ПолеФлажка.Заголовок          = ЭлементЗаголовок + ":";
					ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
					ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
					
					// Значение флажка
					ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
				КонецЕсли;
				
				// Заголовок / Пустая декорация.
				Если Не СвойстваНастройки.ФлажокИспользование Или Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					ПустаяДекорация = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
					ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
					ПустаяДекорация.Заголовок                = ?(СвойстваНастройки.ФлажокИспользование, " ", ЭлементЗаголовок + ":");
					ПустаяДекорация.РастягиватьПоГоризонтали = Истина;
				КонецЕсли;
				
				// Подбор.
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					ТаблицаКоманднаяПанель = Элементы.Добавить(КоманднаяПанельИмя, Тип("ГруппаФормы"), ГруппаЗаголовокТаблицы);
					ТаблицаКоманднаяПанель.Вид                      = ВидГруппыФормы.КоманднаяПанель;
					ТаблицаКоманднаяПанель.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
					ТаблицаКоманднаяПанель.РастягиватьПоГоризонтали = Ложь;
					ТаблицаКоманднаяПанель.Ширина                   = 0;
					
					Если СвойстваНастройки.СодержитСсылочныеТипы Тогда
						КомандаПодбор = Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие    = "Подключаемый_СписокСПодбором_Подбор";
						КомандаПодбор.Заголовок   = НСтр("ru = 'Подбор'");
						КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
					Иначе
						КомандаПодбор = Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие    = "Подключаемый_СписокСПодбором_Добавить";
						КомандаПодбор.Заголовок   = НСтр("ru = 'Добавить'");
						КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
						КомандаПодбор.Картинка    = БиблиотекаКартинок.СоздатьЭлементСписка;
					КонецЕсли;
					
					КнопкаПодбор = Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
					КнопкаПодбор.ИмяКоманды = КнопкаПодборИмя;
					
					Если ЕстьЗагрузкаДанныхИзФайла Тогда
						КомандаВставить = Команды.Добавить(КнопкаВставитьИмя);
						КомандаВставить.Действие    = "Подключаемый_СписокСПодбором_ВставитьИзБуфера";
						КомандаВставить.Заголовок   = НСтр("ru = 'Вставить из буфера обмена...'");
						КомандаВставить.Картинка    = БиблиотекаКартинок.ЗаполнитьФорму;
						КомандаВставить.Отображение = ОтображениеКнопки.Картинка;
						
						КнопкаВставить = Элементы.Добавить(КнопкаВставитьИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
						КнопкаВставить.ИмяКоманды = КнопкаВставитьИмя;
					КонецЕсли;
				КонецЕсли;
				
				// Таблица.
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя, "СписокЗначений");
				
				ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
				ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
				ТаблицаФормы.Заголовок                 = ЭлементЗаголовок;
				ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
				ТаблицаФормы.ВертикальныеЛинии         = Ложь;
				ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
				ТаблицаФормы.Шапка                     = Ложь;
				ТаблицаФормы.Подвал                    = Ложь;
				ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
				ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
				ТаблицаФормы.РастягиватьПоВертикали    = Истина;
				ТаблицаФормы.Высота                    = 3;
				
				// Группа колонок "в ячейке".
				ГруппаКолонок = Элементы.Добавить(ГруппаКолонокИмя, Тип("ГруппаФормы"), ТаблицаФормы);
				ГруппаКолонок.Вид         = ВидГруппыФормы.ГруппаКолонок;
				ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
				
				// Колонка "Использование".
				КолонкаИспользованиеЭлемент = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ГруппаКолонок);
				КолонкаИспользованиеЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				
				// Колонка "Значение".
				КолонкаЗначениеЭлемент = Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ГруппаКолонок);
				КолонкаЗначениеЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				
				ЗаполнитьЗначенияСвойств(КолонкаЗначениеЭлемент, СвойстваНастройки.ДоступнаяСКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
				
				Если СвойстваНастройки.Свойство("ВыборГруппИЭлементов") Тогда
					КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
				Иначе
					КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(СвойстваНастройки.ДоступнаяСКД.ВыборГруппИЭлементов);
				КонецЕсли;
				
				Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					КолонкаЗначениеЭлемент.ТолькоПросмотр = Истина;
				КонецЕсли;
				
				// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
				// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
				Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
					СоответствиеИменОбъектовМетаданных.Вставить(ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
				КонецЕсли;
				
				// Фиксированные параметры выбора.
				Если СвойстваНастройки.Свойство("ПараметрыВыбора") Тогда
					КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
				КонецЕсли;
				
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					СоответствиеХранимыхСписковВыбора.Вставить(ИдентификаторЭлемента, ТаблицаИмя);
				КонецЕсли;
				
				СвойстваНастройки.Вставить("ИмяТаблицы",         ТаблицаИмя);
				СвойстваНастройки.Вставить("ИмяКолонкиЗначение", КолонкаЗначениеИмя);
				СвойстваНастройки.Вставить("ИмяКолонкиИспользование", КолонкаИспользованиеИмя);
				ДобавленныеСпискиЗначений.Добавить(СвойстваНастройки);
				
			ИначеЕсли СвойстваНастройки.Шаблон = "ТаблицаПорядкаСФлажками" Тогда
				
				ГруппаИмя  = СвойстваНастройки.Тип + "_Группа_"  + ИдентификаторЭлемента;
				ТаблицаИмя = СвойстваНастройки.Тип + "_Таблица_" + ИдентификаторЭлемента;
				КолонкаИспользованиеИмя = СвойстваНастройки.Тип + "_КолонкаИспользование_" + ИдентификаторЭлемента;
				КолонкаПредставлениеИмя = СвойстваНастройки.Тип + "_КолонкаПредставление_" + ИдентификаторЭлемента;
				КолонкаПорядокИмя  = СвойстваНастройки.Тип + "_КолонкаПорядок_"  + ИдентификаторЭлемента;
				КоманднаяПанельИмя = СвойстваНастройки.Тип + "_КоманднаяПанель_" + ИдентификаторЭлемента;
				КомандаПереместитьВверхИмя = СвойстваНастройки.Тип + "_Команда_ПереместитьВверх_" + ИдентификаторЭлемента;
				КомандаПереместитьВнизИмя  = СвойстваНастройки.Тип + "_Команда_ПереместитьВниз_"  + ИдентификаторЭлемента;
				КомандаСортироватьПоВозрастаниюИмя = СвойстваНастройки.Тип + "_Команда_СортироватьПоВозрастанию_" + ИдентификаторЭлемента;
				КомандаСортироватьПоУбываниюИмя    = СвойстваНастройки.Тип + "_Команда_СортироватьПоУбыванию_"    + ИдентификаторЭлемента;
				
				//ГруппаВывода.Порядок.Добавить(5, ГруппаИмя);
				//ГруппаВывода.Размер = ГруппаВывода.Размер + 5;
				
				// Реквизиты.
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя, "ТаблицаЗначений");
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя + ".Идентификатор", "Строка");
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя + ".Использование", "Булево");
				БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя + ".Представление", "Строка");
				
				Если СвойстваНастройки.Тип = "Порядок" Тогда
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя + ".Направление", "НаправлениеСортировкиКомпоновкиДанных");
				ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
					БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ТаблицаИмя + ".ЭтоГруппа", "Булево");
				КонецЕсли;
				
				// Группы и элементы
				//Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.БыстрыеНастройки);
				//Группа.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
				//Группа.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				//Группа.Отображение              = ОтображениеОбычнойГруппы.СлабоеВыделение;
				//Группа.ОтображатьЗаголовок      = Истина;
				//Группа.РастягиватьПоГоризонтали = Истина;
				//Группа.Заголовок                = ЭлементЗаголовок + ":";
				Группа = Элементы.Вставить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.СтраницыНастроек, Элементы.СтраницаДополнительно);
				Группа.Вид         = ВидГруппыФормы.Страница;
				Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Группа.Заголовок   = ЭлементЗаголовок;
				Если СвойстваНастройки.Тип = "Порядок" Тогда
					Группа.Картинка = БиблиотекаКартинок.ПорядокКомпоновкиДанных;
				ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
					Группа.Картинка = БиблиотекаКартинок.ВыборКомпоновкиДанных;
				ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
					Группа.Картинка = БиблиотекаКартинок.ПоляГруппировкиКомпоновкиДанных;
				КонецЕсли;
				
				ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
				ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
				ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
				ТаблицаФормы.ВертикальныеЛинии         = Ложь;
				ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
				ТаблицаФормы.Шапка                     = Ложь;
				ТаблицаФормы.Подвал                    = Ложь;
				ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
				ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
				ТаблицаФормы.РастягиватьПоВертикали    = Истина;
				ТаблицаФормы.Высота                    = 3;
				ТаблицаФормы.ИзменятьСоставСтрок       = Ложь;
				ТаблицаФормы.ИзменятьПорядокСтрок      = Ложь;
				ТаблицаФормы.РежимВыделения            = РежимВыделенияТаблицы.Одиночный;
				
				КолонкаИспользование = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ТаблицаФормы);
				КолонкаИспользование.Вид                 = ВидПоляФормы.ПолеФлажка;
				КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
				КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаПорядка_КолонкаИспользование_ПриИзменении");
				
				КолонкаПредставление = Элементы.Добавить(КолонкаПредставлениеИмя, Тип("ПолеФормы"), ТаблицаФормы);
				КолонкаПредставление.Вид            = ВидПоляФормы.ПолеВвода;
				КолонкаПредставление.ТолькоПросмотр = Истина;
				
				// Командная панель
				ТаблицаКоманднаяПанель = Элементы.Добавить(КоманднаяПанельИмя, Тип("ГруппаФормы"), Группа);
				ТаблицаКоманднаяПанель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ТаблицаКоманднаяПанель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТаблицаКоманднаяПанель.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ТаблицаКоманднаяПанель.ОтображатьЗаголовок = Ложь;
				
				// Команды
				КомандаПереместитьВверх = Команды.Добавить(КомандаПереместитьВверхИмя);
				КомандаПереместитьВверх.Действие    = "Подключаемый_ТаблицаПорядка_ПереместитьВверх";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаПереместитьВниз = Команды.Добавить(КомандаПереместитьВнизИмя);
				КомандаПереместитьВниз.Действие    = "Подключаемый_ТаблицаПорядка_ПереместитьВниз";
				КомандаПереместитьВниз.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
				КомандаПереместитьВниз.Отображение = ОтображениеКнопки.Картинка;
				
				// Кнопки
				КнопкаПереместитьВверх = Элементы.Добавить(КомандаПереместитьВверхИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
				КнопкаПереместитьВверх.ИмяКоманды = КомандаПереместитьВверхИмя;
				КнопкаПереместитьВверх.Заголовок  = НСтр("ru = 'Переместить строку вверх'");
				
				КнопкаПереместитьВниз = Элементы.Добавить(КомандаПереместитьВнизИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
				КнопкаПереместитьВниз.ИмяКоманды = КомандаПереместитьВнизИмя;
				КнопкаПереместитьВниз.Заголовок  = НСтр("ru = 'Переместить строку вниз'");
				
				Если СвойстваНастройки.Тип = "Порядок" Тогда
					
					КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Поднять приоритет сортировки по колонке'");
					КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Понизить приоритет сортировки по колонке'");
					
					КолонкаПорядок = Элементы.Добавить(КолонкаПорядокИмя, Тип("ПолеФормы"), ТаблицаФормы);
					КолонкаПорядок.Вид                      = ВидПоляФормы.ПолеВвода;
					КолонкаПорядок.ТолькоПросмотр           = Истина;
					//КолонкаПорядок.РастягиватьПоГоризонтали = Ложь;
					//КолонкаПорядок.Ширина                   = 11;
					КолонкаПорядок.ГиперссылкаЯчейки        = Истина;
					
					// Команды
					КомандаПереместитьВверх = Команды.Добавить(КомандаСортироватьПоВозрастаниюИмя);
					КомандаПереместитьВверх.Действие    = "Подключаемый_ТаблицаПорядка_СортироватьПоВозрастанию";
					КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
					КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
					
					КомандаПереместитьВниз = Команды.Добавить(КомандаСортироватьПоУбываниюИмя);
					КомандаПереместитьВниз.Действие    = "Подключаемый_ТаблицаПорядка_СортироватьПоУбыванию";
					КомандаПереместитьВниз.Картинка    = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
					КомандаПереместитьВниз.Отображение = ОтображениеКнопки.Картинка;
					
					// Кнопки
					КнопкаПереместитьВверх = Элементы.Добавить(КомандаСортироватьПоВозрастаниюИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
					КнопкаПереместитьВверх.ИмяКоманды = КомандаСортироватьПоВозрастаниюИмя;
					КнопкаПереместитьВверх.Заголовок  = НСтр("ru = 'Сортировать по возрастанию'");
					
					КнопкаПереместитьВниз = Элементы.Добавить(КомандаСортироватьПоУбываниюИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
					КнопкаПереместитьВниз.ИмяКоманды = КомандаСортироватьПоУбываниюИмя;
					КнопкаПереместитьВниз.Заголовок  = НСтр("ru = 'Сортировать по убыванию'");
					
				ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
					
					КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Переместить поле выше или левее'");
					КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Переместить поле ниже или правее'");
					
					// Условное оформление для групп
					ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить(); 
					ЭлементУсловногоОформления.Использование = Истина;
					
					ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборОформления.Использование = Истина;
					ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТаблицаИмя + ".ЭтоГруппа");
					ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ОтборОформления.ПравоеЗначение = Истина;
					
					ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
					ПолеОформление.Использование = Истина;
					ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных(ТаблицаИмя);
					
					ШрифтОформления = ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")); 
					ШрифтОформления.Значение      = Новый Шрифт(ШрифтОформления.Значение, , , Истина, , Истина, ); 
					ШрифтОформления.Использование = Истина;
					
				ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
					
					КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Переместить поле вверх'");
					КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Переместить поле вниз'");
					
				КонецЕсли;
				
				// Значения.
				СвойстваНастройки.Вставить("ИмяГруппы",  ГруппаИмя);
				СвойстваНастройки.Вставить("ИмяТаблицы", ТаблицаИмя);
				СвойстваНастройки.Вставить("ИмяКолонкиИспользование", КолонкаИспользованиеИмя);
				СвойстваНастройки.Вставить("ИмяКолонкиПредставление", КолонкаПредставлениеИмя);
				СвойстваНастройки.Вставить("ИмяКолонкиПорядок", КолонкаПорядокИмя);
				ДобавленныеТаблицыСФлажками.Добавить(СвойстваНастройки);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ГруппаВывода = ГруппыВывода.Быстрые;
	ТекущаяГруппа = Элементы.БыстрыеНастройкиКолонка1;
	ОсталосьМеста = ГруппаВывода.Размер/2;
	Для Каждого ЭлементСписка Из ГруппаВывода.Порядок Цикл
		Если ОсталосьМеста > 0 И ОсталосьМеста < ЭлементСписка.Значение/4 Тогда // Текущий шаг больше половины оставшегося места.
			ТекущаяГруппа = Элементы.БыстрыеНастройкиКолонка2;
			ОсталосьМеста = 0;
		КонецЕсли;
		Элементы.Переместить(Элементы[ЭлементСписка.Представление], ТекущаяГруппа);
		Если ОсталосьМеста > 0 Тогда
			ОсталосьМеста = ОсталосьМеста - ЭлементСписка.Значение;
			Если ОсталосьМеста <= 0 Тогда // Оставшееся место исчерпано текущим шагом.
				ТекущаяГруппа = Элементы.БыстрыеНастройкиКолонка2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого ОписаниеРеквизита Из ДобавленныеСтандартныеПериоды Цикл
		ЭтотОбъект[ОписаниеРеквизита.ПериодЗначениеИмя]      = ОписаниеРеквизита.Значение;
		ЭтотОбъект[ОписаниеРеквизита.ВидПериодаИмя]          = ОписаниеРеквизита.ВидПериода;
		ЭтотОбъект[ОписаниеРеквизита.ПериодПредставлениеИмя] = ОписаниеРеквизита.Представление;
		Элементы[ОписаниеРеквизита.ВидПериодаИмя].ПутьКДанным          = ОписаниеРеквизита.ВидПериодаИмя;
		Элементы[ОписаниеРеквизита.ПериодПредставлениеИмя].ПутьКДанным = ОписаниеРеквизита.ПериодПредставлениеИмя;
		Элементы[ОписаниеРеквизита.ПериодНачалоИмя].ПутьКДанным        = ОписаниеРеквизита.ПериодЗначениеИмя + ".ДатаНачала";
		Элементы[ОписаниеРеквизита.ПериодОкончаниеИмя].ПутьКДанным     = ОписаниеРеквизита.ПериодЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Поля подбора (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСпискиЗначений Цикл
		ИмяТаблицы = СвойстваНастройки.ИмяТаблицы;
		ТаблицаФормы = Элементы[ИмяТаблицы];
		КолонкаИспользование = Элементы[СвойстваНастройки.ИмяКолонкиИспользование];
		КолонкаЗначение = Элементы[СвойстваНастройки.ИмяКолонкиЗначение];
		СписокСФлажками = Новый СписокЗначений;
		
		ТипНеопределено = Тип("Неопределено");
		ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
		Количество = СвойстваНастройки.ОтмеченныеЗначения.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			ЭлементСпискаСКД = СвойстваНастройки.ОтмеченныеЗначения[ОбратныйИндекс];
			Значение = ЭлементСпискаСКД.Значение;
			Если Значение = Неопределено
				Или Значение = ТипНеопределено
				Или Значение = ОписаниеТиповНеопределено
				Или Не ЗначениеЗаполнено(Значение) Тогда
				СвойстваНастройки.ОтмеченныеЗначения.Удалить(ОбратныйИндекс);
				Продолжить; // Запрет пустых значений.
			КонецЕсли;
			Если ТипЗнч(Значение) = Тип("Тип") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Значение);
				Значение = Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями
				И СвойстваНастройки.ЗначенияДляВыбора.НайтиПоЗначению(Значение) = Неопределено Тогда
				СвойстваНастройки.ОтмеченныеЗначения.Удалить(ОбратныйИндекс);
				Продолжить; // Выбранное значение не входит в список доступных для выбора.
			КонецЕсли;
			ДобавитьУникальноеЗначениеВСписок(СписокСФлажками, Значение, ЭлементСпискаСКД.Представление, Истина);
		КонецЦикла;
		
		Для Каждого ЭлементСписка Из СвойстваНастройки.ЗначенияДляВыбора Цикл
			ДобавитьУникальноеЗначениеВСписок(СписокСФлажками, ЭлементСписка.Значение, Неопределено, Ложь);
		КонецЦикла;
		
		СписокСФлажками.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ЭтотОбъект[ИмяТаблицы] = СписокСФлажками;
		ЭтотОбъект[ИмяТаблицы].ТипЗначения = СвойстваНастройки.ОписаниеТипов;
		ТаблицаФормы.ПутьКДанным         = ИмяТаблицы;
		КолонкаЗначение.ПутьКДанным      = ИмяТаблицы + ".Значение";
		КолонкаИспользование.ПутьКДанным = ИмяТаблицы + ".Пометка";
		
		// Некоторые обработчики событий можно подключить только после установки связи элементов с данными.
		ТаблицаФормы.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_СписокСПодбором_ПередОкончаниемРедактирования");
		ТаблицаФормы.УстановитьДействие("ПриИзменении", "Подключаемый_СписокСПодбором_ПриИзменении");
		Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			ТаблицаФормы.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ФиксированныйСписок_ПередНачаломДобавления");
			ТаблицаФормы.УстановитьДействие("ПередУдалением", "Подключаемый_ФиксированныйСписок_ПередУдалением");
		Иначе
			ТаблицаФормы.УстановитьДействие("ОбработкаВыбора", "Подключаемый_СписокСПодбором_ОбработкаВыбора");
		КонецЕсли;
		КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_СписокСПодбором_Использование_ПриИзменении");
	КонецЦикла;
	
	// Установка значений и связей таблиц порядка с флажками.
	Для Каждого СвойстваНастройки Из ДобавленныеТаблицыСФлажками Цикл
		ПользовательскаяНастройка = СвойстваНастройки.ПользовательскаяСКД;
		Таблица = ЭтотОбъект[СвойстваНастройки.ИмяТаблицы];
		Таблица.Очистить();
		
		Если СвойстваНастройки.Тип = "Порядок" Тогда
			
			Для Каждого ЭлементПорядка Из ПользовательскаяНастройка.Элементы Цикл
				Если ТипЗнч(ЭлементПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляПорядка, ЭлементПорядка.Поле);
					Если ДоступноеПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПорядка = Таблица.Добавить();
					СтрокаПорядка.Использование = ЭлементПорядка.Использование;
					СтрокаПорядка.Идентификатор = ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ЭлементПорядка);
					СтрокаПорядка.Представление = ДоступноеПоле.Заголовок;
					СтрокаПорядка.Направление   = ЭлементПорядка.ТипУпорядочивания;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
			
			ФункцииОтчетовКлиентСервер.ДобавитьЭлементыНастройки(
				ЭтотОбъект,
				Таблица,
				ПользовательскаяНастройка,
				ПользовательскаяНастройка,
				Истина);
			
		ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
			
			Для Каждого ЭлементСтруктуры Из ПользовательскаяНастройка.Структура Цикл
				Представление = "";
				Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
					Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
						Если НЕ ПолеГруппировки.Использование Тогда
							Продолжить;
						КонецЕсли;
						ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляГруппировок, ПолеГруппировки.Поле);
						Если ДоступноеПоле = Неопределено Тогда
							Представление = Строка(ПолеГруппировки.Поле);
						ИначеЕсли ДоступноеПоле.Родитель <> Неопределено Тогда
							Представление = Представление + СтрЗаменить(СтрЗаменить(ДоступноеПоле.Заголовок, ДоступноеПоле.Родитель.Заголовок, ""), ".", "")+ ", ";
						ИНаче
							Представление = Представление + ДоступноеПоле.Заголовок + ", ";
						КонецЕсли;
					КонецЦикла;
					Представление = Лев(Представление, СтрДлина(Представление) - 2);
				Иначе
					Представление = НСтр("ru = 'Таблица / диаграмма'");
				КонецЕсли;
				СтрокиГруппировки = Таблица.Добавить();
				СтрокиГруппировки.Идентификатор = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки;
				СтрокиГруппировки.Использование = ЭлементСтруктуры.Использование;
				СтрокиГруппировки.Представление = Представление;
			КонецЦикла;
		КонецЕсли;
		
		Если Таблица.Количество() = 0 Тогда
			Элементы[СвойстваНастройки.ИмяГруппы].Видимость = Ложь;
		Иначе
			Элементы[СвойстваНастройки.ИмяТаблицы].ПутьКДанным = СвойстваНастройки.ИмяТаблицы;
			Элементы[СвойстваНастройки.ИмяКолонкиИспользование].ПутьКДанным = СвойстваНастройки.ИмяТаблицы + ".Использование";
			Элементы[СвойстваНастройки.ИмяКолонкиПредставление].ПутьКДанным = СвойстваНастройки.ИмяТаблицы + ".Представление";
			Если СвойстваНастройки.Тип = "Порядок" Тогда
				Элементы[СвойстваНастройки.ИмяКолонкиПорядок].ПутьКДанным = СвойстваНастройки.ИмяТаблицы + ".Направление";
				Элементы[СвойстваНастройки.ИмяТаблицы].УстановитьДействие("Выбор", "Подключаемый_ТаблицаПорядка_Выбор");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Регистрация связи параметров выбора (динамическая связь, отключаемая флажком Использование).
	Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ЕстьПодчиненные, ЕстьВедущие", Истина, Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПодчиненныйИмяТипа = СтрЗаменить(СтрокаТаблицы.ПодчиненныйПолноеИмя, ".", "Ссылка.");
		ВедущийИмяТипа     = СтрЗаменить(СтрокаТаблицы.ВедущийПолноеИмя,     ".", "Ссылка.");
		Для Каждого ВедущийИдентификатор Из СтрокаТаблицы.ВедущийМассивИдентификаторов Цикл
			// Если ведущий - отбор, который имеет вид сравнения не равно, тогда связь игнорируется.
			Если НастройкиСВидомСравненияРавно.Получить(ВедущийИдентификатор) <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненныхПоТипуВедущего") Тогда
				ПараметрыВыбораПодчиненныхПоТипуВедущего = ВсеСвязиВедущего.ПараметрыВыбораПодчиненныхПоТипуВедущего;
			Иначе
				ПараметрыВыбораПодчиненныхПоТипуВедущего = Новый Массив;
			КонецЕсли;
			
			ВедущийИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = ПользовательскиеНастройкиКД.ПолучитьОбъектПоИдентификатору(ВедущийИдентификаторКД);
			Для Каждого ПодчиненныйИдентификатор Из СтрокаТаблицы.ПодчиненныйМассивИдентификаторов Цикл
				
				// Если ведущий может отключаться (используется НЕ всегда),
				//   то связь регистрируется в таблице связей.
				//   Связь должна включаться/отключаться из события ПриИзменении флажка Использование
				//   Если связь типизирована по владельцу
				//         - владелец имеет несколько типов
				//         - связь задана для конкретного типа
				//       тогда связь должна включаться/отключаться также и из обработчика события ПриИзменении.
				ОписаниеСвязи = Новый Структура;
				ОписаниеСвязи.Вставить("ВедущийТип", СтрокаТаблицы.ВедущийТип);
				ОписаниеСвязи.Вставить("ВедущийИмяРеквизита", ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор", ПодчиненныйИдентификатор);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита", ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента", ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметраФормы", "Отбор." + СтрокаТаблицы.ПодчиненныйРеквизит);
				ОписаниеСвязи.Вставить("Действие", РежимИзмененияСвязанногоЗначения.НеИзменять);
				
				ПараметрыВыбораПодчиненныхПоТипуВедущего.Добавить(ОписаниеСвязи);
				
				// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
				Если ВедущийПользовательскаяНастройкаКД.Использование
					И ТипЗнч(ЭтотОбъект[ОписаниеСвязи.ВедущийИмяРеквизита]) = ОписаниеСвязи.ВедущийТип Тогда
					ПодчиненныйЭлемент = Элементы.Найти(ОписаниеСвязи.ПодчиненныйИмяЭлемента);
					Если ПодчиненныйЭлемент <> Неопределено Тогда
						УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, ОписаниеСвязи, Истина);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ВсеСвязиВедущего.Вставить("ПараметрыВыбораПодчиненныхПоТипуВедущего", ПараметрыВыбораПодчиненныхПоТипуВедущего);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
		КонецЦикла;
	КонецЦикла;
	
	ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено;
	
	// Связи по типу
	Для Каждого СтрокаТаблицы Из Связи.ПоТипу Цикл
		
		ВедущийИдентификатор = ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
		ПодчиненныйИдентификатор = СтрокаТаблицы.ПодчиненныйИдентификатор;
		ПодчиненныйИмяЭлемента   = ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор];
		Если Не ЗначениеЗаполнено(ПодчиненныйИмяЭлемента) Тогда
			Продолжить; // Подчиненный имеет такой вид сравнения ("Заполнено" или "Не заполнено"), при котором его связи отключаются.
		КонецЕсли;
		ПодчиненныйЭлемент = Элементы[ПодчиненныйИмяЭлемента];
		
		Если ВедущийИдентификатор = Неопределено Тогда // Ведущий не выведен в настройки.
			
			// Инициализация соответствия для быстрого поиска значений обычных настроек.
			Если ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено Тогда
				ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
				РекурсивныйАнализНастроекКД(Неопределено, ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных); // Заполнение соответствия.
			КонецЕсли;
			
			// Поиск значения ведущего.
			ВедущийЗначение = ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
			Если ВедущийЗначение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Установка фиксированного ограничения типа.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ВедущийЗначение));
			ПодчиненныйЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
			
		Иначе // Ведущий выведен в быстрые настройки.
			
			// Регистрация отключаемой связи ведущего с подчиненным (по типу).
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("СвязиСПодчиненнымиПоТипу") Тогда
				СвязиСПодчиненнымиПоТипу = ВсеСвязиВедущего.СвязиСПодчиненнымиПоТипу;
			Иначе
				СвязиСПодчиненнымиПоТипу = Новый Массив;
			КонецЕсли;
			
			ВедущийИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = ПользовательскиеНастройкиКД.ПолучитьОбъектПоИдентификатору(ВедущийИдентификаторКД);
			Если ТипЗнч(ВедущийПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ВедущийПользовательскаяНастройкаКД.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке
				И ВедущийПользовательскаяНастройкаКД.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
				Продолжить; // Ведущий имеет такой вид сравнения ("Заполнено" или "Не заполнено"), при котором его связи отключаются.
			КонецЕсли;
			
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ВедущийИмяРеквизита",      ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор", ПодчиненныйИдентификатор);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита",  ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента",   ПодчиненныйИмяЭлемента);
			ОписаниеСвязи.Вставить("НомерСубконто",            СтрокаТаблицы.НомерСубконто);
			
			СвязиСПодчиненнымиПоТипу.Добавить(ОписаниеСвязи);
			
			ВсеСвязиВедущего.Вставить("СвязиСПодчиненнымиПоТипу", СвязиСПодчиненнымиПоТипу);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
			
			// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
			Если ВедущийПользовательскаяНастройкаКД.Использование
				И Элементы.Найти(ОписаниеСвязи.ВедущийИмяРеквизита) <> Неопределено Тогда
				ПодчиненныйЭлемент.СвязьПоТипу = Новый СвязьПоТипу(ОписаниеСвязи.ВедущийИмяРеквизита, ОписаниеСвязи.НомерСубконто);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Связи параметров выбора
	Для Каждого СтрокаТаблицы Из Связи.ПараметровВыбора Цикл
		
		ВедущийИдентификатор = ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
		ПодчиненныйИдентификатор = СтрокаТаблицы.ПодчиненныйИдентификатор;
		ПодчиненныйИмяЭлемента   = ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор];
		Если Не ЗначениеЗаполнено(ПодчиненныйИмяЭлемента) Тогда
			Продолжить; // Подчиненный имеет такой вид сравнения ("Заполнено" или "Не заполнено"), при котором его связи отключаются.
		КонецЕсли;
		ПодчиненныйЭлемент = Элементы[ПодчиненныйИмяЭлемента];
		
		Если ВедущийИдентификатор = Неопределено Тогда // Ведущий не выведен в быстрые настройки.
			
			// Инициализация соответствия для быстрого поиска значений обычных настроек.
			Если ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено Тогда
				ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
				РекурсивныйАнализНастроекКД(Неопределено, ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных);
			КонецЕсли;
			
			// Поиск значения ведущего.
			ВедущийЗначение = ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
			Если ВедущийЗначение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Установка фиксированного значения параметра подчиненного.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ВедущийЗначение));
			ПодчиненныйЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
			
		Иначе // Ведущий выведен в быстрые настройки.
			
			// Регистрация отключаемой связи ведущего с подчиненными (параметров выбора).
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненных") Тогда
				ПараметрыВыбораПодчиненных = ВсеСвязиВедущего.ПараметрыВыбораПодчиненных;
			Иначе
				ПараметрыВыбораПодчиненных = Новый Массив;
			КонецЕсли;
			
			ВедущийИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = ПользовательскиеНастройкиКД.ПолучитьОбъектПоИдентификатору(ВедущийИдентификаторКД);
			Если ТипЗнч(ВедущийПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ВедущийПользовательскаяНастройкаКД.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке
				И ВедущийПользовательскаяНастройкаКД.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
				Продолжить; // Ведущий имеет такой вид сравнения ("Заполнено" или "Не заполнено"), при котором его связи отключаются.
			КонецЕсли;
			
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ВедущийИмяРеквизита",          ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор",     ПодчиненныйИдентификатор);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита",      ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяФлажка",         ИменаФлажковИспользование[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента",       ПодчиненныйИмяЭлемента);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметраФормы", СтрокаТаблицы.ПодчиненныйИмяПараметра);
			ОписаниеСвязи.Вставить("Действие",                     СтрокаТаблицы.Действие);
			
			ПараметрыВыбораПодчиненных.Добавить(ОписаниеСвязи);
			
			ВсеСвязиВедущего.Вставить("ПараметрыВыбораПодчиненных", ПараметрыВыбораПодчиненных);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
			
			// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
			Если ВедущийПользовательскаяНастройкаКД.Использование Тогда
				УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, ОписаниеСвязи, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискОтключаемыхСвязей        = Новый ФиксированноеСоответствие(СоответствиеОтключаемыхСвязей);
	
	ХранимыеСпискиВыбора = Новый ФиксированноеСоответствие(СоответствиеХранимыхСписковВыбора);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, ПолноеИмяРеквизита, ТипРеквизита)
	Если ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов") Тогда
		ТипыДобавляемого = ТипРеквизита;
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Строка") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Массив") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ТипыДобавляемого = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыСуществующего = ПараметрыЗаполнения.Реквизиты.Существующие.Получить(ПолноеИмяРеквизита);
	Если ОписанияТиповСовпадают(ТипыСуществующего, ТипыДобавляемого) Тогда
		ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(ПолноеИмяРеквизита);
	Иначе
		ПозицияТочки = Найти(ПолноеИмяРеквизита, ".");
		Если ПозицияТочки = 0 Тогда
			ПутьКРеквизиту = "";
			КраткоеИмяРеквизита = ПолноеИмяРеквизита;
		Иначе
			ПутьКРеквизиту = Лев(ПолноеИмяРеквизита, ПозицияТочки - 1);
			КраткоеИмяРеквизита = Сред(ПолноеИмяРеквизита, ПозицияТочки + 1);
		КонецЕсли;
		
		ПараметрыЗаполнения.Реквизиты.Добавляемые.Добавить(Новый РеквизитФормы(КраткоеИмяРеквизита, ТипыДобавляемого, ПутьКРеквизиту));
		Если ТипыСуществующего <> Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(ПолноеИмяРеквизита);
			ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(ПолноеИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2)
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОписаниеТипов1 = ОписаниеТипов2
		Или ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2);
КонецФункции

&НаСервере
Процедура УстановитьКлючиФормы()
	Если ПравоВывода Тогда
		Уникальность = КлючОбъекта;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		
		КлючСохраненияПоложенияОкна = Уникальность;
		
		НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", Уникальность);
		НастройкиПечатиВосстановить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиСохранить()
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		НастройкиПечатиСохранить();
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		НастройкиПечатиВосстановить();
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.ОтчетРасшифровка, УникальныйИдентификатор);
		
		Если РезультатФормирования.ВариантМодифицирован
			Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
			РезультатФормирования.Вставить("Событие", Новый Структура);
			РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
			РезультатФормирования.Событие.Вставить("Непосредственно", Ложь);
			БыстрыеНастройкиЗаполнить(РезультатФормирования);
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	ОписаниеОшибки = ФункцииОтчетовКлиентСервер.КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке);
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ?(ПустаяСтрока(ОписаниеОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АнализТиповИСвязей(ИдентификаторЭлемента, СвойстваНастройки, ИменаОбъектовМетаданных, Связи)
	
	КоличествоИзвестныхТипов = 0;
	
	ИсходноеОписаниеТипов = СвойстваНастройки.ДоступнаяСКД.ТипЗначения;
	ДобавляемыеТипы = Новый Массив;
	ВычитаемыеТипы = Новый Массив;
	
	СвойстваНастройки.Вставить("СодержитТипТип",        Ложь);
	СвойстваНастройки.Вставить("СодержитТипДата",       Ложь);
	СвойстваНастройки.Вставить("СодержитТипБулево",     Ложь);
	СвойстваНастройки.Вставить("СодержитТипЧисло",      Ложь);
	СвойстваНастройки.Вставить("СодержитТипПериод",     Ложь);
	СвойстваНастройки.Вставить("СодержитДругиеТипы",    Ложь);
	СвойстваНастройки.Вставить("СодержитСсылочныеТипы", Ложь);
	
	СвойстваНастройки.Вставить("КоличествоТипов", 0);
	СвойстваНастройки.Вставить("КоличествоПримитивныхТипов", 0);
	СвойстваНастройки.Вставить("КоличествоПеречислений", 0);
	СвойстваНастройки.Вставить("КоличествоПрочихСсылочныхТипов", 0);
	
	СвойстваНастройки.Вставить("Перечисления", Новый Массив);
	
	ДоступнаяНастройкаТипы = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из ДоступнаяНастройкаТипы Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			ВычитаемыеТипы.Добавить(Тип);
			Продолжить;
		КонецЕсли;
		СвойстваНастройки.КоличествоТипов = СвойстваНастройки.КоличествоТипов + 1;
		
		Если Тип = Тип("Тип") Тогда
			СвойстваНастройки.СодержитТипТип = Истина;
			ДобавляемыеТипы.Добавить(Тип("ОписаниеТипов"));
			ВычитаемыеТипы.Добавить(Тип("Тип"));
		ИначеЕсли Тип = Тип("Дата") Тогда
			СвойстваНастройки.СодержитТипДата = Истина;
			СвойстваНастройки.КоличествоПримитивныхТипов = СвойстваНастройки.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			СвойстваНастройки.СодержитТипБулево = Истина;
			СвойстваНастройки.КоличествоПримитивныхТипов = СвойстваНастройки.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			СвойстваНастройки.СодержитТипЧисло = Истина;
			СвойстваНастройки.КоличествоПримитивныхТипов = СвойстваНастройки.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			СвойстваНастройки.СодержитТипПериод = Истина;
		Иначе
			СвойстваНастройки.СодержитДругиеТипы = Истина;
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных <> Неопределено Тогда
				СвойстваНастройки.СодержитСсылочныеТипы = Истина;
				
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
				
				Если ВРег(Лев(ПолноеИмя, 13)) = "ПЕРЕЧИСЛЕНИЕ." Тогда
					СвойстваНастройки.Перечисления.Добавить(ПолноеИмя);
					СвойстваНастройки.КоличествоПеречислений = СвойстваНастройки.КоличествоПеречислений + 1;
				Иначе
					СвойстваНастройки.КоличествоПрочихСсылочныхТипов = СвойстваНастройки.КоличествоПрочихСсылочныхТипов + 1;
				КонецЕсли;
				
				// Регистрация имени объекта метаданных.
				ИменаОбъектовМетаданных.Вставить(Тип, ПолноеИмя);
				
				// Поиск типа в глобальных связях среди подчиненных.
				Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйТип", Тип));
				Для Каждого СтрокаТаблицы Из Найденные Цикл // Регистрация настройки как подчиненной.
					СтрокаТаблицы.ЕстьПодчиненные = Истина;
					СтрокаТаблицы.ПодчиненныйПолноеИмя = ПолноеИмя;
					СтрокаТаблицы.ПодчиненныйМассивИдентификаторов.Добавить(ИдентификаторЭлемента);
				КонецЦикла;
				
				// Поиск типа в глобальных связях среди ведущих.
				Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ВедущийТип", Тип));
				Для Каждого СтрокаТаблицы Из Найденные Цикл // Регистрация настройки как ведущей.
					СтрокаТаблицы.ЕстьВедущие = Истина;
					СтрокаТаблицы.ВедущийПолноеИмя = ПолноеИмя;
					СтрокаТаблицы.ВедущийМассивИдентификаторов.Добавить(ИдентификаторЭлемента);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеТипов = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	СвойстваНастройки.Вставить("ОписаниеТипов", ОписаниеТипов);
	
	// Переменные цикла
	Если СвойстваНастройки.Шаблон = "СвязьСКомпоновщиком" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(СвойстваНастройки.ДоступнаяСКД.СвязьПоТипу) Тогда
		
		СтрокаСвязи = Связи.ПоТипу.Добавить();
		СтрокаСвязи.ПодчиненныйИдентификатор = ИдентификаторЭлемента;
		СтрокаСвязи.ВедущийПолеКД            = СвойстваНастройки.ДоступнаяСКД.СвязьПоТипу.Поле;
		СтрокаСвязи.НомерСубконто            = СвойстваНастройки.ДоступнаяСКД.СвязьПоТипу.ЭлементСвязи;
		
	КонецЕсли;
	
	Для Каждого СтрокаСвязи Из СвойстваНастройки.ДоступнаяСКД.ПолучитьСвязиПараметровВыбора() Цикл
		
		Если Не ПустаяСтрока(Строка(СтрокаСвязи.Поле)) Тогда
			СтрокаСвязиПараметров = Связи.ПараметровВыбора.Добавить();
			СтрокаСвязиПараметров.ПодчиненныйИдентификатор = ИдентификаторЭлемента;
			СтрокаСвязиПараметров.ПодчиненныйИмяПараметра  = СтрокаСвязи.Имя;
			СтрокаСвязиПараметров.ВедущийПолеКД            = СтрокаСвязи.Поле;
			СтрокаСвязиПараметров.Действие                 = СтрокаСвязи.ИзменениеЗначения;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПараметрВыбораКД Из СвойстваНастройки.ДоступнаяСКД.ПолучитьПараметрыВыбора() Цикл
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ПараметрВыбораКД.Имя, ПараметрВыбораКД.Значение));
	КонецЦикла;
	
	Если ПараметрыВыбора.Количество() > 0 Тогда
		СвойстваНастройки.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтруктураСвязи, ВключитьСвязь)
	Если ПустаяСтрока(СтруктураСвязи.ПодчиненныйИмяПараметраФормы) Тогда
		Возврат;
	КонецЕсли;
	
	СвязьНайдена = Ложь;
	
	МассивЭлементов = Новый Массив;
	Для Каждого СвязьПараметра Из ПодчиненныйЭлемент.СвязиПараметровВыбора Цикл
		Если СвязьПараметра.ПутьКДанным = СтруктураСвязи.ВедущийИмяРеквизита
			И СвязьПараметра.Имя = СтруктураСвязи.ПодчиненныйИмяПараметраФормы
			И СвязьПараметра.ИзменениеЗначения = СтруктураСвязи.Действие Тогда
			Если ВключитьСвязь Тогда
				Возврат; // Включать не требуется - связь найдена.
			Иначе
				СвязьНайдена = Истина;
			КонецЕсли;
		Иначе
			МассивЭлементов.Добавить(СвязьПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВключитьСвязь И Не СвязьНайдена Тогда
		Возврат; // Отключать не требуется - связь не найдена.
	КонецЕсли;
	
	Если ВключитьСвязь Тогда
		МассивЭлементов.Добавить(Новый СвязьПараметраВыбора(СтруктураСвязи.ПодчиненныйИмяПараметраФормы, СтруктураСвязи.ВедущийИмяРеквизита, СтруктураСвязи.Действие));
	КонецЕсли;
	
	ПодчиненныйЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивЭлементов);
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруТаблицСвязей()
	// Связи из СКД.
	ТаблицаСвязейПоТипу = Новый ТаблицаЗначений;
	ТаблицаСвязейПоТипу.Колонки.Добавить("ПодчиненныйИдентификатор");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПоТипу.Колонки.Добавить("НомерСубконто");
	
	ТаблицаСвязейПараметровВыбора = Новый ТаблицаЗначений;
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИдентификатор");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИмяПараметра");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Действие");
	
	// Связи из метаданных.
	ТаблицаСвязейОбъектовМетаданных = Новый ТаблицаЗначений;
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйРеквизит", Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйТип",      Новый ОписаниеТипов("Тип"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийТип",          Новый ОписаниеТипов("Тип"));
	
	// Механизмы расширения.
	ФормаОтчетаПереопределяемый.ДополнитьСвязиОбъектовМетаданных(ТаблицаСвязейОбъектовМетаданных); // Глобальные связи...
	Если НастройкиОтчета.События.ДополнитьСвязиОбъектовМетаданных Тогда // ... можно переопределить локально для отчета.
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ДополнитьСвязиОбъектовМетаданных(ТаблицаСвязейОбъектовМетаданных);
	КонецЕсли;
	
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ЕстьПодчиненные",                  Новый ОписаниеТипов("Булево"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйПолноеИмя",             Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйМассивИдентификаторов", Новый ОписаниеТипов("Массив"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ЕстьВедущие",                      Новый ОписаниеТипов("Булево"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийПолноеИмя",                 Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийМассивИдентификаторов",     Новый ОписаниеТипов("Массив"));
	
	Связи = Новый Структура;
	Связи.Вставить("ПоТипу", ТаблицаСвязейПоТипу);
	Связи.Вставить("ПараметровВыбора", ТаблицаСвязейПараметровВыбора);
	Связи.Вставить("ОбъектовМетаданных", ТаблицаСвязейОбъектовМетаданных);
	
	Возврат Связи;
КонецФункции

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого НастройкаВарианта Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.Значение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если НастройкаВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(НастройкаВарианта.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если НастройкаВарианта.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(НастройкаВарианта.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = НастройкаВарианта.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение)
	Если ТипЗнч(Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат ЗначениеЗаполнено(Строка(Значение));
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораПользовательскихНастроек()
	Если ЗначениеЗаполнено(НастройкиОтчета.ХранилищеПользовательскихНастроек) Тогда
		МенеджерХранилища = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НастройкиОтчета.ХранилищеПользовательскихНастроек);
	Иначе
		МенеджерХранилища = ХранилищеПользовательскихНастроекОтчетов;
	КонецЕсли;
	КлючНастроек = КлючОбъекта + "/" + КлючТекущегоВарианта;
	СписокНастроек = МенеджерХранилища.ПолучитьСписок(КлючНастроек);
	СписокНастроек.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Группа = Элементы.ВариантыПользовательскихНастроек_Левая;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	
	Количество = КнопкиГруппы.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		
		Кнопка = КнопкиГруппы[ОбратныйИндекс];
		Команда = Команды[Кнопка.Имя];
		
		КнопкаИдентификатор = Прав(Кнопка.Имя, 32);
		КнопкаУникальныйИдентификатор = ПривестиИмяКИдентификатору(КнопкаИдентификатор);
		
		ОписаниеНастройки = СписокНастроек.НайтиПоЗначению(КнопкаУникальныйИдентификатор);
		Если ОписаниеНастройки = Неопределено Тогда
			Элементы.Удалить(Кнопка);
			Команды.Удалить(Команда);
		Иначе
			ОписаниеНастройки.Значение = Кнопка;
			Команда.Заголовок = ОписаниеНастройки.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеНастройки Из СписокНастроек Цикл
		Если ТипЗнч(ОписаниеНастройки.Значение) = Тип("КнопкаФормы") Тогда
			Элементы.Переместить(ОписаниеНастройки.Значение, Группа); // Сортировка.
			Продолжить;
		КонецЕсли;
		
		КомандаИмя = "ЗагрузитьПользовательскуюНастройку_" + ПривестиИдентификаторКИмени(ОписаниеНастройки.Значение);
		
		Команда = Команды.Добавить(КомандаИмя);
		Команда.Действие = "Подключаемый_ЗагрузитьПользовательскуюНастройку";
		Команда.Заголовок = ОписаниеНастройки.Представление;
		
		Кнопка = Элементы.Добавить(КомандаИмя, Тип("КнопкаФормы"), Группа);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = КомандаИмя;
		
		ПостоянныеКоманды.Добавить(КомандаИмя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.Событие.Имя <> "ПослеФормирования" Тогда
		Если НастройкиОтчета.ФормироватьСразу Тогда
			НадоСформировать = Истина;
		ИначеЕсли ПараметрыЗаполнения.ВариантМодифицирован
			Или ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы
			Или ПараметрыЗаполнения.Событие.Имя = "НастройкиПоУмолчанию" Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Истина;
			ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоВариантаЗарегистрироватьЭлемент(ЭлементСтруктурыСКД, НаборСтрокДерева)
	СтрокаДерева = НаборСтрокДерева.Добавить();
	СтрокаДерева.Настройка = ЭлементСтруктурыСКД;
	СтрокаДерева.ТипНастройки = ТипНастройкиСтрокой(ТипЗнч(ЭлементСтруктурыСКД));
	Если СтрокаДерева.ТипНастройки = "Настройки" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.ТипНастройки = "Группировка" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.ТипНастройки = "Таблица" Тогда
		СтрокаДерева.ЕстьПоляИОформление = Истина;
		// Колонки:
		ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ПодчиненнаяСтрокаДерева.Настройка = ЭлементСтруктурыСКД;
		ПодчиненнаяСтрокаДерева.ТипНастройки = СтрокаДерева.ТипНастройки + "_Колонки";
		Для Каждого ВложенныйЭлемент Из ЭлементСтруктурыСКД.Колонки Цикл
			ДеревоВариантаЗарегистрироватьЭлемент(ВложенныйЭлемент, ПодчиненнаяСтрокаДерева.Строки);
		КонецЦикла;
		// Строки:
		ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ПодчиненнаяСтрокаДерева.Настройка = ЭлементСтруктурыСКД;
		ПодчиненнаяСтрокаДерева.ТипНастройки = СтрокаДерева.ТипНастройки + "_Строки";
		Для Каждого ВложенныйЭлемент Из ЭлементСтруктурыСКД.Строки Цикл
			ДеревоВариантаЗарегистрироватьЭлемент(ВложенныйЭлемент, ПодчиненнаяСтрокаДерева.Строки);
		КонецЦикла;
	ИначеЕсли СтрокаДерева.ТипНастройки = "Диаграмма" Тогда
		СтрокаДерева.ЕстьПоляИОформление = Истина;
		// Серии:
		ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ПодчиненнаяСтрокаДерева.Настройка = ЭлементСтруктурыСКД;
		ПодчиненнаяСтрокаДерева.ТипНастройки = СтрокаДерева.ТипНастройки + "_Серии";
		Для Каждого ВложенныйЭлемент Из ЭлементСтруктурыСКД.Серии Цикл
			ДеревоВариантаЗарегистрироватьЭлемент(ВложенныйЭлемент, ПодчиненнаяСтрокаДерева.Строки);
		КонецЦикла;
		// Точки:
		ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ПодчиненнаяСтрокаДерева.Настройка = ЭлементСтруктурыСКД;
		ПодчиненнаяСтрокаДерева.ТипНастройки = СтрокаДерева.ТипНастройки + "_Точки";
		Для Каждого ВложенныйЭлемент Из ЭлементСтруктурыСКД.Точки Цикл
			ДеревоВариантаЗарегистрироватьЭлемент(ВложенныйЭлемент, ПодчиненнаяСтрокаДерева.Строки);
		КонецЦикла;
	ИначеЕсли СтрокаДерева.ТипНастройки = "НастройкиВложенногоОбъекта" Тогда
		ДеревоВариантаЗарегистрироватьЭлемент(ЭлементСтруктурыСКД.Настройки, СтрокаДерева.Строки);
	ИначеЕсли СтрокаДерева.ТипНастройки = "ГруппировкаТаблицы" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.ТипНастройки = "ГруппировкаДиаграммы" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипНастройки <> "НастройкиВложенногоОбъекта" Тогда
		ПараметрЗаголовок = ЭлементСтруктурыСКД.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
		Если ПараметрЗаголовок <> Неопределено И ПараметрЗаголовок.Использование Тогда
			СтрокаДерева.Заголовок = ПараметрЗаголовок.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ЕстьСтруктура Тогда
		Для Каждого ВложенныйЭлемент Из ЭлементСтруктурыСКД.Структура Цикл
			ДеревоВариантаЗарегистрироватьЭлемент(ВложенныйЭлемент, СтрокаДерева.Строки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТипНастройкиСтрокой(ТипНастройки)
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";
	
	ИначеЕсли ТипНастройки = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли ТипНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";
	
	ИначеЕсли ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";
	
	ИначеЕсли ТипНастройки = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли ТипНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли ТипНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	
	ИначеЕсли ТипНастройки = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли ТипНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";
	
	ИначеЕсли ТипНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";
	
	ИначеЕсли ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли ТипНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";
	
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли ТипНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";
	
	ИначеЕсли ТипНастройки = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли ТипНастройки = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли ТипНастройки = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДеревоВариантаНайти(ДеревоВарианта, СвойстваНастройки)
	ИдентификаторСКД = СвойстваНастройки.ИдентификаторСКД;
	
	Если СвойстваНастройки.Тип = "Отбор" Тогда
		
		//Настройки, свойство Отбор
		//Группировка, свойство Отбор
		//ГруппировкаТаблицы, свойство Отбор
		//ГруппировкаДиаграммы, свойство Отбор
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Отбор;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора"
		Или СвойстваНастройки.Тип = "ГруппаЭлементовОтбора" Тогда
		
		//Настройки, свойство Отбор.Элементы
		//Группировка, свойство Отбор.Элементы
		//ГруппировкаТаблицы, свойство Отбор.Элементы
		//ГруппировкаДиаграммы, свойство Отбор.Элементы
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			НайденныйЭлемент = НайтиПоИдентификатору(СтрокаДерева.Настройка.Отбор.Элементы, ИдентификаторСКД);
			Если НайденныйЭлемент <> Неопределено Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = НайденныйЭлемент;
				Если СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
					СвойстваНастройки.ДоступнаяСКД = СтрокаДерева.Настройка.Отбор.ДоступныеПоляОтбора.НайтиПоле(НайденныйЭлемент.ЛевоеЗначение);
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "Порядок" Тогда
		
		//Настройки, свойство Порядок
		//Группировка, свойство Порядок
		//ГруппировкаТаблицы, свойство Порядок
		//ГруппировкаДиаграммы, свойство Порядок
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Порядок;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
		
		//Настройки, свойство Выбор
		//Таблица, свойство Выбор
		//Диаграмма, свойство Выбор
		//Группировка, свойство Выбор
		//ГруппировкаДиаграммы, свойство Выбор
		//ГруппировкаТаблицы, свойство Выбор
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Выбор;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "УсловноеОформление" Тогда
		
		//Настройки, свойство УсловноеОформление
		//Таблица, свойство УсловноеОформление
		//Диаграмма, свойство УсловноеОформление
		//Группировка, свойство УсловноеОформление
		//ГруппировкаДиаграммы, свойство УсловноеОформление
		//ГруппировкаТаблицы, свойство УсловноеОформление
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.УсловноеОформление;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
		
		//Настройки, свойство УсловноеОформление.Элементы
		//Таблица, свойство УсловноеОформление.Элементы
		//Диаграмма, свойство УсловноеОформление.Элементы
		//Группировка, свойство УсловноеОформление.Элементы
		//ГруппировкаДиаграммы, свойство УсловноеОформление.Элементы
		//ГруппировкаТаблицы, свойство УсловноеОформление.Элементы
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Для Каждого ЭлементУО Из СтрокаДерева.Настройка.УсловноеОформление.Элементы Цикл
				Если ЭлементУО.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
					СвойстваНастройки.СтрокаДерева = СтрокаДерева;
					СвойстваНастройки.ВариантаСКД  = ЭлементУО;
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
		
		ПараметрКД = СвойстваНастройки.ПользовательскаяСКД.Параметр;
		
		//ПараметрКомпоновкиДанных содержится в КоллекцияЗначенийПараметровКомпоновкиДанных, которая в свою очередь:
		//	ЗначенияПараметровДанныхКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		Настройки, свойство ПараметрыДанных
		//	ЗначенияПараметровВыводаКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		Настройки, свойство ПараметрыВывода
		//	ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		Группировка, свойство ПараметрыВывода
		//	ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		ГруппировкаТаблицы, свойство ПараметрыВывода
		//	ЗначенияПараметровВыводаТаблицыКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		Таблица, свойство ПараметрыВывода
		//	ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		Диаграмма, свойство ПараметрыВывода
		//	ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		ГруппировкаДиаграммы, свойство ПараметрыВывода
		//	ОформлениеКомпоновкиДанных, свойство Элементы / метод НайтиЗначениеПараметра
		//		ЭлементОбластиМакетаОформленияКомпоновкиДанных, свойство Оформление
		//		ЭлементУсловногоОформленияКомпоновкиДанных, свойство Оформление
		//		ПолеНабораДанныхСхемыКомпоновкиДанных, свойство Оформление
		//		ВычисляемоеПолеСхемыКомпоновкиДанных, свойство Оформление
		//	ЗначениеПараметраКомпоновкиДанных, свойство ЗначенияВложенныхПараметров
		
		//Настройки, свойство ПараметрыДанных, метод НайтиЗначениеПараметра()
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", "Настройки"), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			ЗначениеПараметра = СтрокаДерева.Настройка.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеПараметра.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = ЗначениеПараметра;
				ДоступныеПараметры = СтрокаДерева.Настройка.ПараметрыДанных.ДоступныеПараметры;
				Если ДоступныеПараметры <> Неопределено Тогда
					СвойстваНастройки.ДоступнаяСКД = ДоступныеПараметры.НайтиПараметр(ПараметрКД);
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		//Настройки, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		//Группировка, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		//Таблица, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		//Диаграмма, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		//ГруппировкаТаблицы, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		//ГруппировкаДиаграммы, свойство ПараметрыВывода, метод НайтиЗначениеПараметра()
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			ЗначениеПараметра = СтрокаДерева.Настройка.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрКД);
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеПараметра.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Тип          = "ЗначениеПараметраВывода"; // Подмена типа...
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = ЗначениеПараметра;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СвойстваНастройки.Тип = "Группировка"
		Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
		Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы"
		Или СвойстваНастройки.Тип = "Таблица"
		Или СвойстваНастройки.Тип = "Диаграмма"
		Или СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
		
		// Прямо в структуре.
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", СвойстваНастройки.Тип), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка;
				Если СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
					СвойстваНастройки.ДоступнаяСКД = Отчет.КомпоновщикНастроек.Настройки.ДоступныеОбъекты.Элементы.Найти(СтрокаДерева.Настройка.ИдентификаторОбъекта);
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СвойстваНастройки.Тип = "Группировка" Тогда
			Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", "ГруппировкаТаблицы"), Истина);
			Для Каждого СтрокаДерева Из Найденные Цикл
				Если СтрокаДерева.Настройка.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
					СвойстваНастройки.Подтип       = "ГруппировкаТаблицы";
					СвойстваНастройки.СтрокаДерева = СтрокаДерева;
					СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка;
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
			Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", "ГруппировкаДиаграммы"), Истина);
			Для Каждого СтрокаДерева Из Найденные Цикл
				Если СтрокаДерева.Настройка.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
					СвойстваНастройки.Подтип       = "ГруппировкаДиаграммы";
					СвойстваНастройки.СтрокаДерева = СтрокаДерева;
					СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка;
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
		
		//Настройки, свойство Структура
		//Группировка, свойство Структура
		//ГруппировкаТаблицы, свойство Структура
		//ГруппировкаДиаграммы, свойство Структура
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Структура.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Подтип       = "Структура";
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Структура;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		//Таблица, свойство Колонки
		//Таблица, свойство Строки
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", "Таблица"), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Строки.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Подтип       = "ТаблицаСтроки";
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Строки;
				Возврат Истина;
			ИначеЕсли СтрокаДерева.Настройка.Колонки.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Подтип       = "ТаблицаКолонки";
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Колонки;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		//Диаграмма, свойство Серии
		//Диаграмма, свойство Точки
		Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ТипНастройки", "Диаграмма"), Истина);
		Для Каждого СтрокаДерева Из Найденные Цикл
			Если СтрокаДерева.Настройка.Серии.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Подтип       = "ДиаграммаСерии";
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Серии;
				Возврат Истина;
			ИначеЕсли СтрокаДерева.Настройка.Точки.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
				СвойстваНастройки.Подтип       = "ДиаграммаТочки";
				СвойстваНастройки.СтрокаДерева = СтрокаДерева;
				СвойстваНастройки.ВариантаСКД  = СтрокаДерева.Настройка.Точки;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция НайтиПоИдентификатору(ЭлементыСКД, ИдентификаторСКД)
	Для Каждого ЭлементСКД Из ЭлементыСКД Цикл
		Если ЭлементСКД.ИдентификаторПользовательскойНастройки = ИдентификаторСКД Тогда
			Возврат ЭлементСКД;
		ИначеЕсли ТипЗнч(ЭлементСКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Найденный = НайтиПоИдентификатору(ЭлементСКД.Элементы, ИдентификаторСКД);
			Если Найденный <> Неопределено Тогда
				Возврат Найденный;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПользовательскойНастройки(СвойстваНастройки)
	ЭлементЗаголовок = "";
	
	Если СвойстваНастройки.Тип = "Отбор" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Отбор'");
		
	ИначеЕсли СвойстваНастройки.Тип = "ГруппаЭлементовОтбора" Тогда
		ЭлементЗаголовок = Строка(СвойстваНастройки.ПользовательскаяСКД.ТипГруппы);
		
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		ЭлементЗаголовок = Строка(СвойстваНастройки.ВариантаСКД.ЛевоеЗначение);
		
	ИначеЕсли СвойстваНастройки.Тип = "Порядок" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Сортировка'");
		
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Поля'");
		
	ИначеЕсли СвойстваНастройки.Тип = "УсловноеОформление" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Оформление'");
		
	ИначеЕсли СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
		ПредставлениеЗначения = Строка(СвойстваНастройки.ПользовательскаяСКД.Оформление);
		ПредставлениеТипа = НСтр("ru = 'Элемент оформления'");
		Если ПустаяСтрока(ПредставлениеЗначения) Тогда
			ЭлементЗаголовок = ПредставлениеТипа;
		Иначе
			ЭлементЗаголовок = ПредставлениеЗначения +" ("+ НРег(ПредставлениеТипа) +")";
		КонецЕсли;
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
		ЭлементЗаголовок = Строка(СвойстваНастройки.ВариантаСКД.Параметр);
		
	ИначеЕсли СвойстваНастройки.Тип = "Группировка" Тогда
		Суффикс = СокрЛП(Строка(СвойстваНастройки.ВариантаСКД.ПоляГруппировки));
		ЭлементЗаголовок = НСтр("ru = 'Группировка'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
		
	ИначеЕсли СвойстваНастройки.Тип = "ГруппировкаТаблицы" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Группировка таблицы'");
		
	ИначеЕсли СвойстваНастройки.Тип = "ГруппировкаДиаграммы" Тогда
		Суффикс = СокрЛП(Строка(СвойстваНастройки.ВариантаСКД.ПоляГруппировки));
		ЭлементЗаголовок = НСтр("ru = 'Группировка диаграммы'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
		
	ИначеЕсли СвойстваНастройки.Тип = "Таблица" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Таблица'");
		
	ИначеЕсли СвойстваНастройки.Тип = "Диаграмма" Тогда
		ЭлементЗаголовок = НСтр("ru = 'Диаграмма'");
		
	ИначеЕсли СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
		ЭлементЗаголовок = СтрЗаменить(НСтр("ru = 'Вложенная группировка ''%1'''"), "%1", Строка(СвойстваНастройки.ПользовательскаяСКД));
		
	ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
		
		Если СвойстваНастройки.Подтип = "ТаблицаСтроки" Тогда
			ЭлементЗаголовок = НСтр("ru = 'Строки'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаКолонки" Тогда
			ЭлементЗаголовок = НСтр("ru = 'Колонки'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ДиаграммаСерии" Тогда
			ЭлементЗаголовок = НСтр("ru = 'Серии'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ДиаграммаТочки" Тогда
			ЭлементЗаголовок = НСтр("ru = 'Точки'");
			
		Иначе
			ЭлементЗаголовок = НСтр("ru = 'Структура'");
			
		КонецЕсли;
		
	Иначе
		ЭлементЗаголовок = Строка(СвойстваНастройки.Тип);
		
	КонецЕсли;
	
	Возврат СокрЛП(ЭлементЗаголовок);
КонецФункции

#КонецОбласти
